<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | #error NO_MONEY]]></title>
  <link href="http://enukane.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://enukane.github.io/"/>
  <updated>2018-05-08T20:07:55+09:00</updated>
  <id>http://enukane.github.io/</id>
  <author>
    <name><![CDATA[n_kane]]></name>
    <email><![CDATA[enukane@glenda9.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2018-05-08 論文100本ノック 1: Performance Analysis of IEEE 802.11ac DCF with Hidden Nodes]]></title>
    <link href="http://enukane.github.io/blog/2018/05/08/2018-05-08-100papers-00/"/>
    <updated>2018-05-08T19:39:17+09:00</updated>
    <id>http://enukane.github.io/blog/2018/05/08/2018-05-08-100papers-00</id>
    <content type="html"><![CDATA[<p>人もすなる論文100本ノックといふものを、我もしてみむとてするなり。
どこまで続くか分からないけどぼちぼち読んでたりしているのを吐き出す良い機会ではあるのでちょびちょびやっていこうと思う。</p>

<p>フォーマットは以下の落合先生フォーマットをアレンジしたものを使う。</p>

<ul>
<li><a href="http://lafrenze.hatenablog.com/entry/2015/08/04/120205">高速で論文がバリバリ読める落合先生のフォーマットがいい感じだったのでメモ</a></li>
</ul>


<p>だいたい以下の項目を埋めるイメージ</p>

<pre><code class="text">- from: 別のノックからの続きモノの場合、その番号。系統図書けると面白そうなので。
- 著者: ファーストオーサーの名前
- 著者団体: 著者の所属研究機関がわかるように
- 発行年: 旬のものなのかそうでないのかわかるように
- 学会: どれくらいのランクの学会のモノなのかわかるように
- どんなもの
- 技術や手法のキモはどこ？
- どうやって技術・手法の有効性を検証した？
- 議論はある？
- この中で出てきた次に読むべき論文リスト
- 所感
</code></pre>

<ul>
<li>from: none</li>
<li>著者: Zheng Chang et al</li>
<li>著者団体: Magister Solutions, Nokia Research Center, U of Jyvaskyla</li>
<li>発行年: 2012</li>
<li>学会: VTC012 Spring <a href="http://www.ieeevtc.org/vtc2012spring/">http://www.ieeevtc.org/vtc2012spring/</a></li>
<li>どんなもの

<ul>
<li>802.11 DCF x Hidden Node x 802.11acの組合せでパフォーマンス解析を行っている</li>
</ul>
</li>
<li>先行研究と比べてどこがすごい

<ul>
<li>先行研究: [1], [2]</li>
<li>新しい規格への対応: 既存802.11aまで -> 802.11acまでやる</li>
<li>Hidden Node(隠れ端末)の考慮</li>
<li>異なるプライマリチャネルを用いたOverlapping BSS環境を想定: これまでのDCFをターゲットにした研究では対象外</li>
</ul>
</li>
<li>技術や手法のキモはどこ？

<ul>
<li>どこに差異を見いだしているか</li>
<li>[1]のモデリングにblockackおよびHNの情報を考慮したモデルを構築</li>
</ul>
</li>
<li>どうやって技術・手法の有効性を検証した？

<ul>
<li>上記モデルの理論値とIEEE802.11で定められたチャネル伝搬モデル(ビットエラー起こしやすい環境)に基づくシミュレーション値で比較</li>
<li>40MHz幅のときの比較値として10STAs, 40Mhz basic DCFおよび50 STAs 40MHz basic DCFの場合に、モデルとシミュレーションがほぼ一致していることから適用できると判断</li>
<li>これを台数換えたりRTS/CTSにしたり、チャネル幅換えたりして適用し傾向を見ている</li>
<li>fig 5a: 40Mhz幅と80MHz幅の比較における検証

<ul>
<li>DCFの方式間の差異について
□ 10 STAs 40Mhzの場合だと、大きな差があり basic の方がよい
□ 50STAsやあるいは80, 160MHz幅以上だと差はほぼない</li>
<li>チャネル幅を上げる効果について

<ul>
<li>50STAs程度になると40Mhz -> 80Mhz幅に換えても、実際のところ2Mbps程度しか改善しない傾向にある</li>
<li>10STAs程度の場合、むしろ40MHz幅の方が良い場合もある(+10Mbps程度)</li>
</ul>
</li>
<li>結論

<ul>
<li>低い台数の場合、basicの方が性能が良い。ボンディング幅が狭いとより効果がある。</li>
<li>多い台数の場合、この差異はほぼなくなる</li>
<li>チャネル幅を上げることによる効果はあまりない(+2Mbps程度)</li>
</ul>
</li>
</ul>
</li>
<li>fig 5b: 80MHz幅と160Mhz幅の比較における検証

<ul>
<li>DCFの方式の差異について

<ul>
<li>basicの方が優位 (10STAsで+20Mbps,  50STAsで+5Mbps)

<ul>
<li>台数が上がると方式間の差異は縮まるが、引き続きbasicが優位</li>
</ul>
</li>
<li>チャネル幅を 80 -> 160MHzに上げるとbasic vs RTS/CTSの差が縮まる</li>
<li>50STAsの場合、RTS/CTSの方が性能がよい</li>
</ul>
</li>
<li>チャネル幅の差異について

<ul>
<li>このチャネル伝搬モデルだと80 -> 160MHzしても差異がない=> チャネル幅上げることによる効果はない？</li>
</ul>
</li>
<li>結論

<ul>
<li>低い台数の場合、basicの方が良い</li>
<li>多い台数の場合、RTS/CTSの方が良い</li>
<li>このチャネル伝搬モデルではチャネル幅を上げることによる効果はあまりない</li>
</ul>
</li>
</ul>
</li>
<li>OBSSとHNを考慮したシミュレーションの検証

<ul>
<li>BSSで同じprrimary チャネルを用いている場合 (fig 7)

<ul>
<li>それぞれのSTAがそれぞれのAPにアップリンク送信</li>
<li>BSS2が大幅にペナルティを受ける(図の下に張り付いてる4本の線</li>
<li>DCF方式間の差異について

<ul>
<li>HNにAPが直接干渉されない方(BSS1)はbasic > RTS/CTS</li>
<li>HNにAPが干渉される方(BSS2)は RTS/CTS > basic となり、むしろbasicだとほぼ通信できない</li>
</ul>
</li>
<li>チャネル幅の差異について

<ul>
<li>RTS/CTS方式の場合

<ul>
<li>上手く通信できる方はスループットが上がる</li>
<li>上手く通信出来ない方は、スループットは上がらない</li>
</ul>
</li>
<li>basic方式の場合

<ul>
<li>上手く通信できる方はスループットが上がる</li>
<li>上手く通信出来ない方はほぼ通信できないまま</li>
</ul>
</li>
</ul>
</li>
<li>結論

<ul>
<li>RTS/CTSを用いることでこのモデルではHNの影響を受ける</li>
<li>basic方式の場合、通信出来るBSSとHNの影響を受けやすいBSSとの間に、通信できないほどの不公平を生じる</li>
</ul>
</li>
</ul>
</li>
<li>異なるprimary チャネルを用いているがsecoundaryにprimaryが被ってる場合 (fig 8a)

<ul>
<li>BSS1 40MHzのセカンダリをBSS2 80MHzがprimaryとして使っている

<ul>
<li>たとえばBSS1 40MHz 44+ vs BSS2 80MHz 48-の場合</li>
<li>BSS1にとって48chはセカンダリ、BSS2にとってはプライマリ</li>
<li>STA1から40MHz転送が行われるとSTA2からの80MHz転送にプリマリで被さる</li>
</ul>
</li>
<li>プライマリがオーバーラップしている方(BSS2)ガbasicだと大きく割を食う (その文をBSS1が持っていく)</li>
<li>RTS/CTS方式だとBSS2のスループットが一定のレベルで改善する一方、BS1のスループットは低下する</li>
</ul>
</li>
<li>異なるprimaryチャネルを用いておりsecondaryにprimaryが被っていない場合 (fig 8b)

<ul>
<li>BSS1 40MHzのセカンダリとBSS2 80MHzのプライマリが被っていない場合

<ul>
<li>たとえばBSS1 40MHz 36+ vs BSS2 80MHz 48-の場合</li>
<li>36, 40チャネルは被っているがプライマリではない</li>
<li>BSS1からはSTA2は見えないので、80MHz幅転送の影響は受けない</li>
<li>STA1から40MHz転送が行われるとSTA2からの80MHz転送がセカンダリ以降で被さる</li>
</ul>
</li>
<li>fig 8aと同じ傾向

<ul>
<li>RTS/CTSで一部改善はしているが、BSS2が80MHz幅の利点を活かして通信できるほどではない</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>議論はある？

<ul>
<li>このチャネル伝搬モデルの妥当性は？イベント無線LAN環境などと比べるとどうなのだろう？</li>
<li>チャネル伝搬モデルを換えるとどうなる？換えられる対象はある？</li>
</ul>
</li>
<li>この中ででてきた次に読むべき論文リスト

<ul>
<li>[1]: モデリングの元となる論文

<ul>
<li>G.Bianchi &ldquo;Performance Analysis of the IEEE802.11 Distributed Coordination Function&rdquo; IEEE Journal on Selected Areas in Communication, vol.18, No.3, pp.535-547, Mar, 2000</li>
</ul>
</li>
<li>[8]: 本論文の調査結果として明らかになったHN x 802.11acの組合せ問題への解決策となりうる RTS/CTSの改良を扱っているらしい

<ul>
<li>M.Park &ldquo;IEEE80211ac : Dynamic Bandwidth Channel Access&rdquo; IEEE ICC 2011<a href="http://icc2011.ieee-icc.org/">http://icc2011.ieee-icc.org/</a></li>
</ul>
</li>
</ul>
</li>
<li>所感

<ul>
<li>モデルについて疑問はあるものの、DCF方式の差異、チャネル幅の差異、クライアント数の差異という観点でパラメータがどのように影響するのかが調査されているのは参考になった</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日本の5.3GHz帯DFS対象レーダー局をプロットしてみた]]></title>
    <link href="http://enukane.github.io/blog/2017/12/02/dfs-radar-site/"/>
    <updated>2017-12-02T01:36:58+09:00</updated>
    <id>http://enukane.github.io/blog/2017/12/02/dfs-radar-site</id>
    <content type="html"><![CDATA[<p>先日参加したInternetWeek2017 NOCチーム内で、「5GHz帯 DFS 対象のレーダーが飛んでくる場所」という話題が出たので試しにプロットしてみました。</p>

<ul>
<li><a href="https://www.google.com/maps/d/viewer?mid=1HN0HXt1HLAMVClb2YfaTzyM_hLM0QVjS&amp;hl=ja&amp;usp=sharing">DFS対象レーダー局</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PXEブートによるBitVisor開発環境の構築]]></title>
    <link href="http://enukane.github.io/blog/2017/06/27/bitvisor-on-pxe/"/>
    <updated>2017-06-27T14:17:13+09:00</updated>
    <id>http://enukane.github.io/blog/2017/06/27/bitvisor-on-pxe</id>
    <content type="html"><![CDATA[<p>書いた。これでBitVisor遊びが捗る。</p>

<ul>
<li><a href="http://qiita.com/n_kane/items/0f55218371f2b1b6bb9f">PXEブートによるBitVisor開発環境の構築</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Got Aruba IAP-103-JP]]></title>
    <link href="http://enukane.github.io/blog/2017/05/03/iap103/"/>
    <updated>2017-05-03T23:42:11+09:00</updated>
    <id>http://enukane.github.io/blog/2017/05/03/iap103</id>
    <content type="html"><![CDATA[<p>どこからともなく予算が割り当たったことにしたので、Aruba IAP-103-JP が降ってきました。</p>

<ul>
<li><a href="http://www.arubanetworks.com/ja/products/networking/access-points/103-series/">Aruba 103 シリーズ</a></li>
</ul>


<p>機体筐体はこんな感じ。Cisco Aironet 3602i やらと比べるとだいぶコンパクトでカワイイ。</p>

<p>{% img center /images/2017-05-03/iap103.jpg 480 %}</p>

<p>裏側のネジ4つを外すと表カバー、裏カバー、基板の3つに綺麗に分かれる。分解はしやすい。</p>

<p>アンテナ(基板の表カバー側)はこんな感じ。いわゆる逆Fアンテナの模様。
見ての通りアンテナは2つだけで、2.4/5GHz帯共用らしい。</p>

<p>{% img center /images/2017-05-03/iap103_ant.jpg 480 %}</p>

<p>チップ実装面はこんな感じ。シールドを一部外した状態。
右側のシールド内のチップはAtheros AR9582-AR1A。
左の黒いヒートシンクが付いているシールドからちらっと見えている石はAtheros AR9344-BC2AでこちらはSoC。
前者で5GHz帯、後者でCPU兼2.4GHz帯を捌いてる模様。
中央上部、ACアダプタソケットとEthernetソケットの間にピンヘッダが出ている。
細かく調べてはいないがシリアルコンソールが取れるのかもしれない。</p>

<p>{% img center /images/2017-05-03/iap103_chip.png 480 %}</p>

<p>この子はIAPタイプなのでコントローラとしても動作する。ダッシュボードはこんな感じ。
1台だけだからかもしれないがCisco WLCと比べるとだいぶシンプル、というか設定できるところが少なめっぽい。よしなに調整してくれるのかな？</p>

<p>{% img center /images/2017-05-03/iap103_db_ap.png 480 %}</p>

<p>AppRFを有効にしてると以下の様に通信内容の分析がAP/クライアントの単位でできるらしい。</p>

<p>{% img center /images/2017-05-03/iap103_db_apprf.png 640 %}</p>

<p>今のところ自宅ではAP機能(アクセスモード)に用はないので、スペクトルもモニターモードで動作させている。
このモードだと「スペクトラム」メニューにて非802.11デバイス一覧や、全チャネルのチャネル使用率&amp;品質が見れるらしい。
なおアクセスモードだと動作中チャネルのそれに限定される。</p>

<p>{% img center /images/2017-05-03/iap103_mon_gen.png 480 %}
{% img center /images/2017-05-03/iap103_mon_24g.png 480 %}
{% img center /images/2017-05-03/iap103_mon_5g.png  480 %}</p>

<p>ところでIAPが一台あれば、Remote APモデルのもの仕入れて繋げて遊べたりするのかな？
AP105はヤフオクで1500〜2000円/台の価格で数多く出ており、簡単に中規模ネットワークは組めそう。
なお一部のAruba APは某用途向けにファーム/基板ごと特殊モデルと聞くので対象外になりそうではある。</p>

<p>軽くぐぐってみた限り、以下のスレッドにあるとおりクラスタのAP数上限というのはないらしい。
推奨値128とあるようだがここまで巨大なものを組む予定はないので遊ぶ分には困らなさそう。</p>

<ul>
<li><a href="https://community.arubanetworks.com/t5/Aruba-Instant-Cloud-Wi-Fi/IAP-MAX-AP-per-Cluster/td-p/214997">IAP MAX AP per Cluster</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fluent-plugin-sflow でっちあげた]]></title>
    <link href="http://enukane.github.io/blog/2017/03/24/fluent-plugin-sflow-release/"/>
    <updated>2017-03-24T19:13:10+09:00</updated>
    <id>http://enukane.github.io/blog/2017/03/24/fluent-plugin-sflow-release</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/enukane/fluent-plugin-sflow">fluent-plugin-sflow</a></p>

<p>JuniperやAlaxala, NEC製品などでサポートされているsFlowプロトコルのサンプルを受信するFluentdプラグインを書きました。</p>

<p>netflowプロトコルについては repeatedly さんが既に<a href="https://github.com/repeatedly/fluent-plugin-netflow">fluent-plugin-netflow</a>を公開されています。
今回NECのIXシリーズからフローデータを送りつけたいという要望が某所であったため、実装してみました。
とはいえsflowのプロトコルを捌く部分は別の方のパーサに頼っています。</p>

<h1>使い方</h1>

<p>fluent-gemやtd-agent-gemでインストールするだけです。</p>

<pre><code>% fluent-gem install fluent-plugin-sflow
</code></pre>

<p>設定項目は以下の通りです。 待ち受けアドレス(bind)、待ち受けポート(port)そしてタグ名ぐらいしかありません。</p>

<pre><code>&lt;source&gt;
  @type sflow
  tag sflow.example

  bind 0.0.0.0
  port 6343
&lt;/source&gt;

&lt;match sflow.example&gt;
  @type stdout
&lt;/match&gt;
</code></pre>

<h1>host-sflow と組み合わせたテスト</h1>

<p>実際のテストにはスイッチやルータが必要ですが、手元で簡単に試すために <a href="http://www.sflow.net/">host-sflow</a> を導入します。
ここではMac OS X (MacBookPro)上に導入しWi-Fiのインタフェース(en0)のデータをサンプリング、先に挙げた設定で同一ホスト上で動作するfluentdに投げ込んでみます。</p>

<pre><code>% git clone https://github.com/sflow/host-sflow.git
% cd host-sflow

% make

# pcap のターゲットデバイスとして en0 を指定する
% cat &gt; /tmp/test.conf
sflow {
    polling=10
    collector { ip = 127.0.0.1 udpport=6343 }
    pcap { dev=en0 }
}
^D

# host-sflowの起動(デバッグ目的で -dddd としている)
% sudo ./src/Darwin/hsflowd -dddd -f /tmp/test.conf
</code></pre>

<p>fluentdの標準出力をしばらく眺めていると、以下の様にフローサンプルが出力されます。この時は *.twttr.com (twitter) への通信がキャッチされたようです。</p>

<pre><code>% fluentd -vv -c example/fluentd.conf
(中略)
2017-03-24 18:52:50.054347000 +0900 example.sflow: {"agent_address":null,"i_octets":0,"o_octets":0,"interface":6,"input_packets_error":0,"output_packets_error":0}
2017-03-24 18:52:52.519715000 +0900 example.sflow: {"agent_address":null,"sampling_rate":"400","i_iface_value":0,"o_iface_value":0,"ipv4_src":"199.59.148.241","ipv4_dst":"192.168.10.17","udp_src_port":1900,"udp_dst_port":57347,"frame_length":1486,"frame_length_multiplied":594400,"tcp_src_port":443,"tcp_dst_port":58076}
2017-03-24 18:53:01.984184000 +0900 example.sflow: {"agent_address":null}
2017-03-24 18:53:09.934539000 +0900 example.sflow: {"agent_address":null,"i_octets":0,"o_octets":0,"interface":6,"input_packets_error":0,"output_packets_error":0}
(中略)
</code></pre>

<p>ネットワーク機器にてよく見られるカウンタサンプルとフローサンプル以外にも、host-sflowはOSやアプリケーションの各種メトリックを集めsFlowプロトコルに載せて送信します。
現状の fluent-plugin-sflow ではカウンタ/フローサンプルのパースしかサポートしていないため、それらのメトリックは空扱いになります(上記5行目)。</p>

<h1>ToDo</h1>

<ul>
<li>bindata 1.8.1以上への対応

<ul>
<li>現状 Sflow5rawpacketdataVLAN の type メンバが BinData::Record あたりで定義されてる名前と被ってるらしく怒られるので、1.8.1にしている</li>
<li><a href="https://github.com/repeatedly/fluent-plugin-netflow">fluent-plugin-netflow</a>は2.5.3ベースであり、こちらと揃えたい</li>
<li>名前の変更にはおそらく次の項目をクリアする必要がある</li>
</ul>
</li>
<li>パーサーの取り込み

<ul>
<li>現状、<a href="https://github.com/NETWAYS/sflow/">NETWAYS/sflow</a>のパーサをリポジトリごと丸っと使っている</li>
<li>ライセンスとオリジナルを明記した上でパーサとモデルの部分だけコピーしてくる</li>
<li>または全部1から書き直す</li>
</ul>
</li>
<li>IPv6対応</li>
</ul>

]]></content>
  </entry>
  
</feed>
