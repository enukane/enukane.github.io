<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 100papers | #error NO_MONEY]]></title>
  <link href="http://enukane.github.io/blog/categories/100papers/atom.xml" rel="self"/>
  <link href="http://enukane.github.io/"/>
  <updated>2018-10-02T11:41:35+09:00</updated>
  <id>http://enukane.github.io/</id>
  <author>
    <name><![CDATA[n_kane]]></name>
    <email><![CDATA[enukane@glenda9.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2018-08-14 論文100本ノック 6: CSI-MIMO: Indoor Wi-Fi Fingerprinting System]]></title>
    <link href="http://enukane.github.io/blog/2018/08/14/100papers-06/"/>
    <updated>2018-08-14T10:47:36+09:00</updated>
    <id>http://enukane.github.io/blog/2018/08/14/100papers-06</id>
    <content type="html"><![CDATA[<ul>
<li>from:</li>
<li>著者: Yogita Chapre et al</li>
<li>所属: School of Computer Science &amp; Engineering, University of New South Wales</li>
<li>発行年: 2014</li>
<li>学会:IEEE Local Computer Networks Conference (<a href="https://www.ieeelcn.org/prior/LCN39/index.html">LCN2014</a>)</li>
<li>どんなもの

<ul>
<li>CSI-MIMOの提案</li>
<li>Channel State Informationを使って精度の高い屋内測位を実現</li>
<li>MIMOの情報を活かすのがキモ</li>
</ul>
</li>
<li>先行研究と比べてどこがすごい

<ul>
<li>RSSIベースはよくあるが精度が悪い

<ul>
<li>RSSIを複数APから見地して k近傍法で分類し位置情報を測定する手法 [1][2]</li>
<li>RSSIは平均電力としての値</li>
<li>マルチパスの影響を受けやすい</li>
<li>環境(人、モノの動き)により容易に揺蕩う</li>
<li>2〜3m程度の精度</li>
<li>Signal Streangth Difference(SSD)手法も環境の変化には弱い</li>
<li>k近傍法は活用するが、RSSIといった集約値をターゲットにしないのが本手法</li>
</ul>
</li>
<li>CIR (Channel Implulse Response)は

<ul>
<li>これをベースにした位置フィンガープリント手法</li>
<li>200MHzの帯域幅が見れるスペアナといった高価かつでかい機材が必要</li>
<li>Artificial neural networkを使って測定するが、精度は帯域幅による</li>
<li>下記の通りコモディティハードウェアでもできるのが本手法</li>
</ul>
</li>
<li>CSI

<ul>
<li>OFDMでは周波数ダイバーシチ・空間ダイバーシチを効かせているため、サブキャリアごとに異なるこれらによる変動を調整するための仕組みとしてCSIを用いる</li>
<li>コモディティハードウェアである5300ではこれらを取り出すことが可能</li>
<li>平均電力に集約されてしまうRSSIと異なり、サブキャリアごとにチャネルの情報が取得できる
§ サブキャリアごとの波の振幅と位相が含まれる
§ マルチパスによりサブキャリアごとにことなる経路をたどりバラバラの値になる</li>
<li>[8][9]でもCSIを使っていたが、そちらはSISOを想定していた</li>
</ul>
</li>
<li>MIMO

<ul>
<li>空間ダイバーシチを効かせて速度を上げているのが802.11n以降のMIMO</li>
<li>これを活用して位置のフィンガープリンティングを行う</li>
<li>[10]でも空間ダイバーシチを活用しているが電力を対象にしており、位置に紐付けようとはしていない。</li>
<li>[8][10][9]では同じくCSIを活用していたが、MIMOという意味で複数のアンテナをうまく使うという技術的課題をクリアできていなかった
§ 空間・周波数ダイバーシチの双方を活用して位置情報に活かすのがこの研究のキモ</li>
</ul>
</li>
</ul>
</li>
<li>技術や手法のキモはどこ？

<ul>
<li>CSI x MIMO の組み合わせ

<ul>
<li>CSIの利用によりRSSIの弱点である精度を改善</li>
<li>MIMOを考慮することで、空間・周波数ダイバーシチの双方を活用した、より精度の高いフィンガープリンティング</li>
</ul>
</li>
<li>トレーニングフェーズでこれらの情報により各地点のフィンガープリントを蓄積

<ul>
<li>amplitude difference vectorとphase difference vectorがフィンガープリント</li>
<li>全サブキャリアについてCSI値を合算(虚数の合算)</li>
<li>それぞれその絶対値をHavg-amp, 位相をHavg-phとしておく</li>
<li>各サブキャリアごとに隣のサブキャリアとのamp, phaseの差分をとり、Hampi, Hphiとする</li>
<li>それらをサブキャリアすべてに渡って足し合わせたHamp-diff, Hph-diffをシグネチャとする</li>
</ul>
</li>
<li>ポジショニングフェーズにて、現地点のそれをk近傍法でトレーニングしたものと近似をとる or ベイズ推定で最もらしい位置を割り出す

<ul>
<li>トレーニングサンプルとのユークリッド距離の算出→一推定</li>
<li>「このCSIフィンタープリントの時、あるロケーションである確率」のうち最大のロケーションとなりうる場所であると推定
§ (細かい式はよくわからん)</li>
</ul>
</li>
</ul>
</li>
<li>どうやって技術・手法の有効性を検証した？

<ul>
<li>ラボの室内(6 x 7.5m平方)の19地点で24時間トレーニング、APは2台

<ul>
<li>およそ10万サンプル</li>
</ul>
</li>
<li>FIFSや通常のCSIシグネチャ方式との比較

<ul>
<li>比較対象は振幅とフェーズ情報を合算してしまっている手法</li>
<li>FIFSはCSI-MIMOと同じくkNN &amp; ベイズ推定を用いている手法</li>
</ul>
</li>
<li>不明な地点で1000サンプル集めて位置推定を実施、精度を比較した</li>
<li>また、100, 1000, 10000トレーニングサンプルの場合や、100, 1000テストサンプルの場合に精度がどう変わるかも検証

<ul>
<li>k近傍法をもちいた場合:
§ 1000トレーニング100テストで 0.95mの誤差(最小)
§ CSI-MIMOの法がだいたいの場合、FIFSやCSIに勝っていることを確認</li>
<li>ベイズ推定を用いた場合:
§ 最も良い精度でも1000トレーニング100テストで1.02mと、k近傍法より悪い</li>
</ul>
</li>
<li>全体的にはFIFS/シンプルCSIに比べて良い性能</li>
<li>ただしFIFSが優位になる点もあり

<ul>
<li>ベイズ推定を用いた10000 or 1000 サンプルの場合 (Fig6の左下)</li>
<li>サンプル数が多くなると中央値や分散値の影響で良くなる場合がある？</li>
</ul>
</li>
<li>平均距離の誤差比較(table 1)

<ul>
<li>最大でFIFSより57%(k近傍法), 26%(ベイズ推定)良い。1000トレーニング1000テストの場合。</li>
</ul>
</li>
<li>1000トレーニング、100テストが一番成績がよい

<ul>
<li>これが最適な計測時のパラメータ</li>
<li>またほかの手法よりも優位にたっているパラメータでもある</li>
</ul>
</li>
<li>k近傍法とベイズ推定の比較

<ul>
<li>CSI-MIMOではどちらでも同じくらいの性能が出せる (Fig7の左下はどうなの&hellip;)</li>
<li>全体的にはk近傍法の法がCSI-MIMO(およびシンプルCSI)においては良い値を出す
§ 一方でFIFSはベイズの方が良いらしい</li>
<li>k近傍法においては、CSI-MIMOのサブキャリアごとの計算という前提が活きる
§ 一方で誤差をうまく丸めているベイズ推定においては、FIFSのほうが使える場合がある？</li>
</ul>
</li>
</ul>
</li>
<li>議論はある？

<ul>
<li>トレーニングにどれくらいの時間が最低限いるのか？ => 1000トレーニング程度でよいらしい</li>
<li>環境変動への耐性評価が入ってない気がする

<ul>
<li>人の動きやモノの移動があった場合にどうなるのか知りたい</li>
</ul>
</li>
</ul>
</li>
<li>この中ででてきた次に読むべき論文リスト

<ul>
<li>[10] J. Xiao, K. Wu, Y. Yi, and L. Ni, “FIFS: Fine-grained indoor fin- gerprinting system,” in 21st International Conference on Computer Communications and Networks (ICCCN), 2012, pp. 1–7.

<ul>
<li>FIFSの論文</li>
<li>アルゴリズム(ベイズ推定)によってはこちらの法が良くなる場合があったため</li>
<li>計算手法がシンプルならむしろあり</li>
</ul>
</li>
<li>[8] K. Wu, J. Xiao, Y. Yi, D. Chen, X. Luo, and L. Ni, “CSI-based indoor localization,” IEEE Transactions on Parallel and Distributed Systems, vol. 24, no. 7, pp. 1300–1309, 2013.

<ul>
<li>FILA。シンプルCSI。</li>
</ul>
</li>
<li>[9] S. Sen, R. R. Choudhury, B. Radunovic, and T. Minka, “Precise indoor localization using PHY layer information,” in Proceedings of the 10th ACM Workshop on Hot Topics in Networks, ser. HotNets-X. New York, NY, USA: ACM, 2011, pp. 18:1–18:6. [Online]. Available: <a href="http://doi.acm.org/10.1145/2070562.2070580">http://doi.acm.org/10.1145/2070562.2070580</a>

<ul>
<li>PinLoc, シンプルCSI。</li>
</ul>
</li>
</ul>
</li>
<li>所感

<ul>
<li>事前トレーニングが必要なタイプなので個人的な興味とはちょっとずれてる予感</li>
<li>前のMUSICアルゴリズム使ってモノのほうが個人的な目的には合致していそう</li>
<li>FIFSの方が優れている場合がある理由の掘り下げがちょっと足りてない？理解が足りてないだけな気もするが&hellip;</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018-08-07 論文100本ノック 5: LAMP: Lightweight and Accurate Malicious Access Points Localization via Channel Phase Information]]></title>
    <link href="http://enukane.github.io/blog/2018/08/07/2018-08-07-100papers-05-dot-markdown/"/>
    <updated>2018-08-07T11:37:25+09:00</updated>
    <id>http://enukane.github.io/blog/2018/08/07/2018-08-07-100papers-05-dot-markdown</id>
    <content type="html"><![CDATA[<ul>
<li>from: none</li>
<li>著者: Liangyi Gong</li>
<li>所属; Tianjin University of Technology (天津理工大学)</li>
<li>発行年: 2018</li>
<li>学会: The 13th Internatinal Conference on Wireless Algorithms, Systems and Applications (<a href="http://wasa-conference.org/WASA2018/index.html">WASA2018</a>)</li>
<li>どんなもの:

<ul>
<li>悪意のあるAPの場所特定をChannel State Informationを使ってコモディティハードウェアで実現</li>
<li>LAMP(Leightweight and Accurate Malicious access Point localization)の提案</li>
</ul>
</li>
<li>先行研究と比べてどこがすごい

<ul>
<li>RSSI ではなく CSI を利用

<ul>
<li>indoor multipathの影響を抑える</li>
</ul>
</li>
<li>単一デバイスによる三角測量

<ul>
<li>複数デバイスをばらまくことなく実現</li>
</ul>
</li>
<li>精度: 方向 5度以内、位置 35cm 以内で特定</li>
</ul>
</li>
<li>技術や手法のキモはどこ？

<ul>
<li>要素

<ul>
<li>Channel Phase Information を取得</li>
<li>特徴抽出: フィルタでフェーズ情報をサニタイズ</li>
<li>方向検知

<ul>
<li>self-adaptive MUSIC (MUltiple SIgnal Classification)アルゴリズムを利用</li>
</ul>
</li>
<li>三点測量</li>
</ul>
</li>
<li>特徴抽出

<ul>
<li>CSIからのフェーズ情報の逆算に Linear Transformation を利用、ランダム誤りを抑制</li>
<li>ノイズ除去にはSavitsky-Golay フィルタを適用</li>
</ul>
</li>
<li>方向測定

<ul>
<li>RFオシレータによるCSI中のフェーズオフセットによるエラーを self adaptive MUSICで補正</li>
</ul>
</li>
<li>方向キャリブレーション

<ul>
<li>アンテナをチェイン1とチェイン2、チェイン2とチェイン3の組み合わせでグループ化</li>
</ul>
</li>
<li>位置特定

<ul>
<li>1地点で、位置(x1, y1)と方向θ1がわかる</li>
<li>これを複数子(>2)測定して組み合わせ、基本的には2より上の地点数</li>
</ul>
</li>
</ul>
</li>
<li>どうやって技術・手法の有効性を検証した？

<ul>
<li>壁ありのオフィスフロアにAPをおいて、三点測量を実施

<ul>
<li>クライアントには Intel Wi-Fi Link 5300を利用 + Linux CSI Tools</li>
<li>モニタモードで5.32GHz帯を見る</li>
</ul>
</li>
<li>位置特定の精度

<ul>
<li>見通し(LOS)ありなら50%は35cm以内の誤差で特定できることを確認</li>
<li>LOSなしでも50%は45cm以内の誤差</li>
</ul>
</li>
<li>方向の精度

<ul>
<li>self adaptive MUSICの有効性として 50% 以内は6度以内の誤差であることを確認</li>
<li>単なるMUSICだと11度</li>
</ul>
</li>
</ul>
</li>
<li>議論はある

<ul>
<li>self-adaptive MUSICも本研究の貢献ぽいけど理論的背景が述べられていない気がする</li>
</ul>
</li>
<li>この中で出てきた次に読むべき論文リスト

<ul>
<li>6, 7: プロフェッショナルハードウェアを用いた位置測定

<ul>
<li>[6]: Shah, S.F.A., Srirangarajan, S., Tewfik, A.H.: Implementation of a directional beacon-based position location algorithm in a signal processing framework. IEEE  Trans. Wirel. Commun. 9(3), 1044–1053 (2010)</li>
<li>[7] Subramanian, A.P., Deshpande, P., Jie, G., Das, S.R.: Drive-by localization of road-side WiFi networks. In: The Conference on Computer Communications, INFOCOM  2008, pp. 718–725. IEEE (2008)</li>
</ul>
</li>
<li>1, 5, 8: RSSIベース

<ul>
<li>[1]: Adelstein, F., Alla, P., Joyce, R., Iii, G.G.R.: Physically locating wireless intruders. In: Proceedings of the International Conference on Information Technology: Coding and Computing, ITCC, vol. 1, pp. 482–489 (2004)</li>
<li>[5]: Schweitzer, D., Brown, W., Boleng, J.: Using visualization to locate rogue access points. Consortium for Computing Sciences in Colleges (2007)</li>
<li>[8]: Yang, Z., Zhou, Z., Liu, Y.: From RSSI to CSI: indoor localization via channel response. ACM Comput. Surv. 46(2), 1–32 (2013)</li>
</ul>
</li>
</ul>
</li>
<li>所感

<ul>
<li>手元にあるデバイスだしやりたいことに一番近いことだったんで、もうすこしこまかい情報を載せてほしい感じ&hellip;</li>
<li>self adaptive MUSICとかあまりに説明がなかったけどMUSICはともかくとしてself-adaptiveの方は有名なの？</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018-08-06 論文100本ノック 4: Demystifing 802.11n power consumption]]></title>
    <link href="http://enukane.github.io/blog/2018/08/06/2018-08-06-100papers-04/"/>
    <updated>2018-08-06T14:56:45+09:00</updated>
    <id>http://enukane.github.io/blog/2018/08/06/2018-08-06-100papers-04</id>
    <content type="html"><![CDATA[<ul>
<li>from: none</li>
<li>著者:  Daniel Helperin</li>
<li>所属: U of Washington, Intel Labs Seattle</li>
<li>発行年: 2010</li>
<li>学会: <a href="https://www.usenix.org/legacy/events/hotpower10/">Usenix HotPower &lsquo;10</a></li>
<li>どんなもの

<ul>
<li>802.11n NIC (intel 5300)の電力消費量をさまざまな条件で測定</li>
<li>電力消費をうまく抑える使い方を提案</li>
<li>これまでの経験則の検証、反証</li>
</ul>
</li>
<li>先行研究と比べてどこがすごい

<ul>
<li>細かい条件(チャネル幅、送信出力、転送レート、アンテナチェイン、スリープ条件)に基づいて分析</li>
<li>特に 802.11n MIMO 条件下というのはこれまでになかった設定</li>
<li>ガッと送ってズバッと眠るという 802.11 APSD(Automatic Power Save Delivery)やPSP(Power Save Polling)の有効なシナリオ、そうでないシナリオにも言及</li>
<li>電力消費削減に対する疑問の解決

<ul>
<li>送信出力削るとお得？ NO</li>
<li>眠るのはアイドリングよりお得? YES</li>
<li>送る方が受け取る方より消費する? YES</li>
<li>チャネル幅広げると電力ガンガン消費する? NO</li>
<li>早いレートでガッと送るのは電力効率いい？ NO</li>
<li>電力消費はMIMO のストリーム数に比例する? NO</li>
</ul>
</li>
</ul>
</li>
<li>技術や手法のキモはどこ?

<ul>
<li>実デバイスを使った測定 (Intel WiFi Link 5300)</li>
<li>802.11n MIMO のストリーム数を考慮しつつ、転送レートなどの条件を変えながら測定</li>
</ul>
</li>
<li>どうやって技術・手法の有効性を検証した？

<ul>
<li>スリープ状態

<ul>
<li>スリープするのはアイドリングよりお得</li>
</ul>
</li>
<li>転送レート

<ul>
<li>おなじアンテナ数なら、転送レートを変えても電力消費は変わらない</li>
<li>ただし早い転送レートだと DSP への負荷が上がる

<ul>
<li>例として MIMO 3 40Mhz幅で405Mbps出す場合、40.5Mbpsの時に比べて120mWほど消費が大きくなる</li>
</ul>
</li>
</ul>
</li>
<li>チャネル幅

<ul>
<li>チャネル幅を広げても、その分の電力消費は微々たるもの</li>
<li>転送レートが倍になるほどの影響はない</li>
<li>クロックが上がるのではなく、サブキャリアが増えるだけのため</li>
</ul>
</li>
<li>送信ストリーム数

<ul>
<li>1 -> 2 に増やした時が一番電力消費が上がる(53%上昇)、一方で 2 -> 3 に増やした時は5%ぐらいしか上がらない</li>
<li>MIMO 2 にしたときは、MIMO 3 で使うようなハードウェア(RFコンポーネントその他)はほとんど有効になるためと考察</li>
</ul>
</li>
<li>受信アンテナ数

<ul>
<li>アンテナ数増えるごとに電力消費も増える</li>
<li>1アンテナごとに330mWづつ。アンテナ数倍になるわけではない。</li>
</ul>
</li>
<li>受信ストリーム数

<ul>
<li>上述の通りアンテナ数ごとに330mWの定額上昇</li>
<li>一方で、空間ストリーム数を増やした時は10mW程度しか増えない</li>
<li>よって、アンテナ数減らす方がストリーム数の削減より重要</li>
</ul>
</li>
<li>送信出力

<ul>
<li>送信出力抑えてもたかだか10%程度電力消費削減が関の山</li>
</ul>
</li>
<li>racing to sleep

<ul>
<li>おなじアンテナ数、ストリーム数であれば受信・送信ともに速いレートでガッと送りつけてさくっと寝るというのはエネルギー効率として正しい

<ul>
<li>802.11での Power Save系全般の戦略の有効性を確認</li>
</ul>
</li>
<li>一方で、ストリーム数間を比較するとSISOの方がエネルギー効率がよい

<ul>
<li>一部MIMOでストリーム数が多い方が効率がよくなる箇所もある</li>
<li>ただし前述の箇所は over 250 Mbps な MCS indexで通信している領域</li>
<li>空間がきれいだったりリンクの条件がよくないと使えなかったりする速度</li>
<li>よってリンクがある程度ゆらぐということを前提にするなら SISO にした方が電力効率がよいといえる</li>
</ul>
</li>
</ul>
</li>
<li>パケットオーバーヘッドについて

<ul>
<li>Watt/bitという観点だとオーバーヘッドの削減が電力効率に直結する</li>
<li>オーバーヘッドが発生する要因

<ul>
<li>OFDM シンボル埋めるパディング

<ul>
<li>OFDM シンボルはビット数ではなく時間(4us)に制約される。1シンボルで遅れる情報に不足する分はオーバーヘッドとなる

<ul>
<li>例えば 10バイトのACKパケットは、エンコードやFCS含めると 134ビット</li>
<li>一方、SISO 39Mbps (MCS 3, 16-QAM, &frac34;)であれば 1symbol 156ビット

<ul>
<li>16-QAM はサブキャリアあたり 4bit x サブキャリア 52 個 x コーディングレート 3/ 4 = 156</li>
</ul>
</li>
<li>よって156 - 134 = 22 bit分の無駄がある</li>
<li>MIMO3 だと1620bitにもなるためショートフレームだとフリ</li>
</ul>
</li>
</ul>
</li>
<li>プリアンブル

<ul>
<li>マルチストリームだとその分長くなる

<ul>
<li>MIMO2, MIMO3のプリアンブルはそれぞれ1 or 3 OFDMシンボルとなり、SISOのそれに比べると長い</li>
<li>405Mbpsの場合は4860ビット分</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>オーバーヘッドの影響

<ul>
<li>小パケットであればSISOが一番電力効率がよい</li>
<li>ただしSISOで最悪レートで転送しているようなリンク状態ならMIMOの方がよい</li>
<li>空間ダイバーシチがいい感じに効いてエネルギー効率向上が望めるため</li>
</ul>
</li>
<li>ラージパケットかつリンク状態が良いのであればMIMOは有効、そうでないならSISOの方が良い</li>
</ul>
</li>
</ul>
</li>
<li>議論はある？

<ul>
<li>電力効率で SISO > MIMO という話があったが、収容しなきゃいけないクライアント数/トラフィック量という観点で比較するとどうだろう？

<ul>
<li>トレードオフをクライアント収容(数とトラフィック)、電力消費という二軸にしてみたときに均衡点を提示できる指標</li>
<li>大規模ネットw−悪環境にて、ユーザのスマホ・タブレットの電力消費を抑えたい vs 人数を収容するために上げたいというバランスに対する提言</li>
</ul>
</li>
<li>MU-MIMO では SISO っぽい動作を事実上するようになったはず。これは上記での SISO > MIMO 方向の議論といい感じにマッチするのでは？

<ul>
<li>サウンディングやスケジューリングのオーバーヘッドを踏まえた上で評価できると面白そう</li>
</ul>
</li>
</ul>
</li>
<li>この中ででてきた次に読むべき論文リスト

<ul>
<li>特になし</li>
</ul>
</li>
<li>所感

<ul>
<li>802.11n の最大のMIMOで2.1Wひっぱり、3hでばってりーを消費しつくしユーザの手を焼くのに充分な熱をもつという&hellip;</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018-05-11 論文100本ノック 3: Wireless MAC Processors: Programming MAC Protocols on Commodity Hardware]]></title>
    <link href="http://enukane.github.io/blog/2018/05/11/2018-05-11-100papers-03/"/>
    <updated>2018-05-11T15:52:29+09:00</updated>
    <id>http://enukane.github.io/blog/2018/05/11/2018-05-11-100papers-03</id>
    <content type="html"><![CDATA[<ul>
<li>from: none</li>
<li>著者: I.Tinnirello et al</li>
<li>所属: CNIT U degli Studi di Palermo, U degli Studi di Roma-Tor Vergata, U degli Studi di Brescia</li>
<li>発行年: Mar. 2012</li>
<li>学会: IEEE INFOROM 2012 <a href="http://infocom2012.ieee-infocom.org/">http://infocom2012.ieee-infocom.org/</a></li>
<li>どんなもの

<ul>
<li>Wireless MAC Processorsの概念の提唱

<ul>
<li>MAC(メディアアクセスコントロール)のプログラマビリティ提供のための抽象化</li>
</ul>
</li>
<li>コモディティハードウェア(bcm43xx)での実装</li>
</ul>
</li>
<li>先行研究と比べてどこがすごい

<ul>
<li>SDRやFPGAベースでは同様の取り組みは存在する

<ul>
<li>そもそも既存の802.11の機能を達成するハードルが高い</li>
</ul>
</li>
<li>bcm43xx(802.11チップ)、普通のハードウェアでこれを実現した

<ul>
<li>802.11ハードウェアに載っている諸機能は部品として再活用</li>
</ul>
</li>
<li>その上にWMPとしての抽象化をAPIで提供</li>
</ul>
</li>
<li>技術や手法のキモはどこ？

<ul>
<li>OpenFWWF(Open FirmWare for Wi-Fi networks)の成果を活用

<ul>
<li>コモディティハードウェアにデプロイできるという強み</li>
<li>著者グループの成果らしい</li>
</ul>
</li>
<li>WMPによる802.11含むMACの抽象化: ステートマシン(イベントと状態)とステートレスなコマンドへの分離

<ul>
<li>ホスト側にlower MAC部分を持ってくることなく、デバイスのファームウェア上で時間制約の厳しい挙動は簡潔させた</li>
<li>一方でプログラマビリティは一定のレベルで担保</li>
</ul>
</li>
</ul>
</li>
<li>どうやって技術・手法の有効性を検証した？

<ul>
<li>Piggyback Ackや擬似TDMA、チャネルまたぎのメディアアクセスなどの機能を実現

<ul>
<li>WMPのアーキテクチャで実装した普通の802.11 DCFに少し変更を加えることでできることを図示</li>
<li>抽象化の適切さを提示</li>
</ul>
</li>
<li>実装した機能が時間制約を満たした上で有効に動作できることを例示

<ul>
<li>抽象化したオペレーションが802.11の要件を満たせることを提示</li>
</ul>
</li>
<li>これらによりWMPのアーキテクチャの有用性を提示</li>
</ul>
</li>
<li>議論はある？

<ul>
<li>性能

<ul>
<li>柔軟な機能追加ができること、時間制約の厳しい802.11に適用できることというのを主眼に評価している</li>
<li>このWMPレイヤが入ることによるパフォーマンスオーバーヘッドについてどうなるかは言及がない(特に後述する暗号化周り)</li>
</ul>
</li>
<li>暗号化へのサポート

<ul>
<li>現在のチップにはAESやTKIP, WEPの各種ビット長の暗号化・復号化を行う機能がある

<ul>
<li>これらを活用するアクションは欲しい</li>
</ul>
</li>
<li>あるいはたとえば既存のOWE(RFC8110 Opportunistic Wireless Encryption)をソフトウェアではなくWMPのような枠組みでサポートすることを考えると何が必要になるだろう？</li>
</ul>
</li>
</ul>
</li>
<li>この中ででてきた次に読むべき論文リスト

<ul>
<li>[15]: M. Newfeld &ldquo;Soft MAC - Flexible Wireless Research Platgorm&rdquo; HotNets, Nov.2005</li>
<li>[18]: M.H. Lu &ldquo;Using commodity hardware platform to develop and evaluate CSMA protocols&rdquo;, ACM WiNTECH 2008</li>
</ul>
</li>
<li>所感

<ul>
<li>open-ath9k-htc-firmwareで同じようなことができるとおもしろそう</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018-05-08 論文100本ノック 2: IEEE802.11ac: Dynamic Bandwidth Channel Access]]></title>
    <link href="http://enukane.github.io/blog/2018/05/08/2018-05-08-100papers-02/"/>
    <updated>2018-05-08T20:08:42+09:00</updated>
    <id>http://enukane.github.io/blog/2018/05/08/2018-05-08-100papers-02</id>
    <content type="html"><![CDATA[<ul>
<li>from: 1</li>
<li>著者: Myoung Park</li>
<li>所属: Intel Labs</li>
<li>発行年: 2011</li>
<li>学会: IEEE ICC 2011 <a href="http://icc2011.ieee-icc.org/index.php">http://icc2011.ieee-icc.org/index.php</a></li>
<li>どんなもの

<ul>
<li>802.11acでサポートされた80Mhz幅での転送にあたって20/40/80MHzをセカンダリチャネル以降の20MHz幅ごとの空き状況を見て切り替える方式</li>
<li>セカンダリチャネルのCCA sensitivityの影響や802.11ac利用地のプライマリチャネルの選び方がスループットに与える影響を調べた。</li>
</ul>
</li>
<li>先行研究と比べてどこがすごい

<ul>
<li>先行研究: 802.11ac- 802.11n</li>
<li>セカンダリチャネルに定常的にトラフィックが有る場合のスループットを85%改善</li>
<li>もともとは802.11nの20/40切り替えテクニックだが、これを802.11acに適用した</li>
</ul>
</li>
<li>技術や手法のキモはどこ？

<ul>
<li>Dynamicに20/40/80とチャネル幅を変えるところ</li>
<li>もともと802.11nの20/40Mhz幅切り替えという前例がある

<ul>
<li>40MHz幅運用の場合、セカンダリチャネルでは

<ul>
<li>プライマリより低い感度のCCA感度で運用される: -82 or -79 vs -62 dBm (ED-CCAだけが動く): プライマリで必要なプリアンブルデコード等が不要なため</li>
<li>NAVをセットしない: セカンダリチャネルのみで動作する802.11aなどのデバイスのプリアンブルをデコードしないため</li>
</ul>
</li>
<li>まずプライマリチャネルがDIFS + CWの後に空いているか見る + PIFSの後にセカンダリが空いているか見る

<ul>
<li>(正確にはプライマリチャネルのCW(3〜1023us)中の後ろPIFS(9us)がクリアなら、プライマリと同期できる)</li>
<li>staticの場合: 両方空いていれば送信  or 再度バックオフ</li>
<li>dynamicの倍: 20mhzに縮退して送信</li>
</ul>
</li>
<li>80MHz幅運用の問題点</li>
</ul>
</li>
<li>20/40/80の切り替えについて

<ul>
<li>80MHzを占有できることはまずないという現状がある

<ul>
<li>staticだと送信機会がなかなかこない</li>
<li>プライマリとセカンダリとでCCAのレベルが異なることによる問題: セカンダリチャネルで-82〜-62dBmあたりの強度のフレームの送信と衝突する可能性 => 結局Ackが帰ってこずフレームが欠損し、双方にretryが必要になり、また時間を消費する&hellip;</li>
</ul>
</li>
<li>プライマリチャネルの選び方

<ul>
<li>大抵40/80の先頭か末尾が多い</li>
<li>これだとセカンダリが1つに限られるため20Mhzにフォールバックする確率がたかい</li>
<li>真ん中にプライマリを持ってこれる方式が望ましい場合がある</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>どうやって技術・手法の有効性を検証した？

<ul>
<li>MATLABのシミュレーションで実施</li>
<li>1台のAP、それに接続する1台の802.11ac STA、セカンダリチャネルに1〜3台のAP + 1- 2台のSTAsを配備した環境を想定</li>
<li>セカンダリチャネルに干渉する通信がある場合のスループットの改善を計測</li>
<li>80MHz staticだとそちらの通信の空きでしか通信できないため、かなり下がるはず -> これが改善していれば有意であることが示せる</li>
<li>スタティックvsダイナミックの比較 (Fig 4a vs Fig 4b)

<ul>
<li>セカンダリチャネルのSTAの送信確率を０〜100% (0-1)で換えたグラフ</li>
<li>セカンダリチャネルでの受信出力はED-CCAの閾値 -62dBmより上を想定</li>
<li>4aのスタティックの場合

<ul>
<li>台数1台の場合、TxProb =1でも200Mbps程度でる

<ul>
<li>縮退運転はしないため、</li>
</ul>
</li>
<li>が、台数が増えるごとに0Mbpsに近づく

<ul>
<li>TxProb >= 0.6のときは2台でダイナミック方式に抜かれる</li>
</ul>
</li>
</ul>
</li>
<li>4bのダイナミック方式の場合

<ul>
<li>台数1台の場合、TxProb = 1で144Mbps程度に落ちる

<ul>
<li>20MHzに縮退運転するため、スタティックよりも遅い</li>
</ul>
</li>
<li>但し台数が増えても100Mbps程度を維持

<ul>
<li>セカンダリチャネルにいる他局の影響を抑えることに成功している</li>
</ul>
</li>
</ul>
</li>
<li>改善の度合い(Table III)

<ul>
<li>Tx Prob = 0.6 (中程度) で85%</li>
<li>Tx prob = 1.0 (重程度) で 569%</li>
</ul>
</li>
</ul>
</li>
<li>セカンダリチャネルの他局の強度がED-CCAに引っかからない場合(-82 &lt; RSSI &lt; -62) (Fig 5)

<ul>
<li>802.11ac側は気づかずに潰しに掛かる(コリジョンが発生)</li>
<li>セカンダリにいる802.11a側の局は潰されるか、CCAでより多く待たされる => バックオフの増加</li>
<li>このため802.11a側の局の合計スループットが大幅に低下する</li>
<li>Fig 4a/bと比べて、802.11ac側BSSへの悪影響は低い
=> 強度を-62 dBmに押さえることでセカンダリ側に割を食わすということはできる</li>
</ul>
</li>
<li>プライマリチャネルを中間におくことの効用 (Fig6)

<ul>
<li>中間に置いた場合(例: W52の40ch)と末尾に置いた場合(例: W52の48ch)の比較</li>
<li>中程度(TxProb=0.6)以上のトラフィックが全部のセカンダリチャネルに発生している場合は+10Mbps程度の効用

<ul>
<li>最大で20Mbps程度、20%の改善</li>
<li>これは40MHz幅を2方向に取れることに起因する</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>議論はある？

<ul>
<li>50台ぐらいになり、BAR/BA/RTS/CTS等のコントロール系フレームが多くなった場合でも同様の傾向になるのか？</li>
<li>セカンダリチャネルに居る他局の出力が弱いと割を食いやすい問題への解決策の議論は&hellip;?</li>
</ul>
</li>
<li>この中ででてきた次に読むべき論文リスト

<ul>
<li>参考文献に論文がねぇ！</li>
<li>[5]: Kim- Y-. &ldquo;Enhanced CCA for Non-Primary Channels Using Guard Interval&rdquo;- IEEE 802.11-10/0012r0- Jan2010
セカンダリチャネルでのCCAが高いことによる問題 (論文ではないけど)</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
