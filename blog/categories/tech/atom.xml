<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | #error NO_MONEY]]></title>
  <link href="http://enukane.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://enukane.github.io/"/>
  <updated>2017-12-03T23:04:05+09:00</updated>
  <id>http://enukane.github.io/</id>
  <author>
    <name><![CDATA[n_kane]]></name>
    <email><![CDATA[enukane@glenda9.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[日本の5.3GHz帯DFS対象レーダー局をプロットしてみた]]></title>
    <link href="http://enukane.github.io/blog/2017/12/02/dfs-radar-site/"/>
    <updated>2017-12-02T01:36:58+09:00</updated>
    <id>http://enukane.github.io/blog/2017/12/02/dfs-radar-site</id>
    <content type="html"><![CDATA[<p>先日参加したInternetWeek2017 NOCチーム内で、「5GHz帯 DFS 対象のレーダーが飛んでくる場所」という話題が出たので試しにプロットしてみました。</p>

<ul>
<li><a href="https://www.google.com/maps/d/viewer?mid=1HN0HXt1HLAMVClb2YfaTzyM_hLM0QVjS&amp;hl=ja&amp;usp=sharing">DFS対象レーダー局</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PXEブートによるBitVisor開発環境の構築]]></title>
    <link href="http://enukane.github.io/blog/2017/06/27/bitvisor-on-pxe/"/>
    <updated>2017-06-27T14:17:13+09:00</updated>
    <id>http://enukane.github.io/blog/2017/06/27/bitvisor-on-pxe</id>
    <content type="html"><![CDATA[<p>書いた。これでBitVisor遊びが捗る。</p>

<ul>
<li><a href="http://qiita.com/n_kane/items/0f55218371f2b1b6bb9f">PXEブートによるBitVisor開発環境の構築</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Got Aruba IAP-103-JP]]></title>
    <link href="http://enukane.github.io/blog/2017/05/03/iap103/"/>
    <updated>2017-05-03T23:42:11+09:00</updated>
    <id>http://enukane.github.io/blog/2017/05/03/iap103</id>
    <content type="html"><![CDATA[<p>どこからともなく予算が割り当たったことにしたので、Aruba IAP-103-JP が降ってきました。</p>

<ul>
<li><a href="http://www.arubanetworks.com/ja/products/networking/access-points/103-series/">Aruba 103 シリーズ</a></li>
</ul>


<p>機体筐体はこんな感じ。Cisco Aironet 3602i やらと比べるとだいぶコンパクトでカワイイ。</p>

<p><img class="center" src="/images/2017-05-03/iap103.jpg" width="480"></p>

<p>裏側のネジ4つを外すと表カバー、裏カバー、基板の3つに綺麗に分かれる。分解はしやすい。</p>

<p>アンテナ(基板の表カバー側)はこんな感じ。いわゆる逆Fアンテナの模様。
見ての通りアンテナは2つだけで、2.4/5GHz帯共用らしい。</p>

<p><img class="center" src="/images/2017-05-03/iap103_ant.jpg" width="480"></p>

<p>チップ実装面はこんな感じ。シールドを一部外した状態。
右側のシールド内のチップはAtheros AR9582-AR1A。
左の黒いヒートシンクが付いているシールドからちらっと見えている石はAtheros AR9344-BC2AでこちらはSoC。
前者で5GHz帯、後者でCPU兼2.4GHz帯を捌いてる模様。
中央上部、ACアダプタソケットとEthernetソケットの間にピンヘッダが出ている。
細かく調べてはいないがシリアルコンソールが取れるのかもしれない。</p>

<p><img class="center" src="/images/2017-05-03/iap103_chip.png" width="480"></p>

<p>この子はIAPタイプなのでコントローラとしても動作する。ダッシュボードはこんな感じ。
1台だけだからかもしれないがCisco WLCと比べるとだいぶシンプル、というか設定できるところが少なめっぽい。よしなに調整してくれるのかな？</p>

<p><img class="center" src="/images/2017-05-03/iap103_db_ap.png" width="480"></p>

<p>AppRFを有効にしてると以下の様に通信内容の分析がAP/クライアントの単位でできるらしい。</p>

<p><img class="center" src="/images/2017-05-03/iap103_db_apprf.png" width="640"></p>

<p>今のところ自宅ではAP機能(アクセスモード)に用はないので、スペクトルもモニターモードで動作させている。
このモードだと「スペクトラム」メニューにて非802.11デバイス一覧や、全チャネルのチャネル使用率&amp;品質が見れるらしい。
なおアクセスモードだと動作中チャネルのそれに限定される。</p>

<p><img class="center" src="/images/2017-05-03/iap103_mon_gen.png" width="480">
<img class="center" src="/images/2017-05-03/iap103_mon_24g.png" width="480">
<img class="center" src="/images/2017-05-03/iap103_mon_5g.png" width="480"></p>

<p>ところでIAPが一台あれば、Remote APモデルのもの仕入れて繋げて遊べたりするのかな？
AP105はヤフオクで1500〜2000円/台の価格で数多く出ており、簡単に中規模ネットワークは組めそう。
なお一部のAruba APは某用途向けにファーム/基板ごと特殊モデルと聞くので対象外になりそうではある。</p>

<p>軽くぐぐってみた限り、以下のスレッドにあるとおりクラスタのAP数上限というのはないらしい。
推奨値128とあるようだがここまで巨大なものを組む予定はないので遊ぶ分には困らなさそう。</p>

<ul>
<li><a href="https://community.arubanetworks.com/t5/Aruba-Instant-Cloud-Wi-Fi/IAP-MAX-AP-per-Cluster/td-p/214997">IAP MAX AP per Cluster</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fluent-plugin-sflow でっちあげた]]></title>
    <link href="http://enukane.github.io/blog/2017/03/24/fluent-plugin-sflow-release/"/>
    <updated>2017-03-24T19:13:10+09:00</updated>
    <id>http://enukane.github.io/blog/2017/03/24/fluent-plugin-sflow-release</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/enukane/fluent-plugin-sflow">fluent-plugin-sflow</a></p>

<p>JuniperやAlaxala, NEC製品などでサポートされているsFlowプロトコルのサンプルを受信するFluentdプラグインを書きました。</p>

<p>netflowプロトコルについては repeatedly さんが既に<a href="https://github.com/repeatedly/fluent-plugin-netflow">fluent-plugin-netflow</a>を公開されています。
今回NECのIXシリーズからフローデータを送りつけたいという要望が某所であったため、実装してみました。
とはいえsflowのプロトコルを捌く部分は別の方のパーサに頼っています。</p>

<h1>使い方</h1>

<p>fluent-gemやtd-agent-gemでインストールするだけです。</p>

<pre><code>% fluent-gem install fluent-plugin-sflow
</code></pre>

<p>設定項目は以下の通りです。 待ち受けアドレス(bind)、待ち受けポート(port)そしてタグ名ぐらいしかありません。</p>

<pre><code>&lt;source&gt;
  @type sflow
  tag sflow.example

  bind 0.0.0.0
  port 6343
&lt;/source&gt;

&lt;match sflow.example&gt;
  @type stdout
&lt;/match&gt;
</code></pre>

<h1>host-sflow と組み合わせたテスト</h1>

<p>実際のテストにはスイッチやルータが必要ですが、手元で簡単に試すために <a href="http://www.sflow.net/">host-sflow</a> を導入します。
ここではMac OS X (MacBookPro)上に導入しWi-Fiのインタフェース(en0)のデータをサンプリング、先に挙げた設定で同一ホスト上で動作するfluentdに投げ込んでみます。</p>

<pre><code>% git clone https://github.com/sflow/host-sflow.git
% cd host-sflow

% make

# pcap のターゲットデバイスとして en0 を指定する
% cat &gt; /tmp/test.conf
sflow {
    polling=10
    collector { ip = 127.0.0.1 udpport=6343 }
    pcap { dev=en0 }
}
^D

# host-sflowの起動(デバッグ目的で -dddd としている)
% sudo ./src/Darwin/hsflowd -dddd -f /tmp/test.conf
</code></pre>

<p>fluentdの標準出力をしばらく眺めていると、以下の様にフローサンプルが出力されます。この時は *.twttr.com (twitter) への通信がキャッチされたようです。</p>

<pre><code>% fluentd -vv -c example/fluentd.conf
(中略)
2017-03-24 18:52:50.054347000 +0900 example.sflow: {"agent_address":null,"i_octets":0,"o_octets":0,"interface":6,"input_packets_error":0,"output_packets_error":0}
2017-03-24 18:52:52.519715000 +0900 example.sflow: {"agent_address":null,"sampling_rate":"400","i_iface_value":0,"o_iface_value":0,"ipv4_src":"199.59.148.241","ipv4_dst":"192.168.10.17","udp_src_port":1900,"udp_dst_port":57347,"frame_length":1486,"frame_length_multiplied":594400,"tcp_src_port":443,"tcp_dst_port":58076}
2017-03-24 18:53:01.984184000 +0900 example.sflow: {"agent_address":null}
2017-03-24 18:53:09.934539000 +0900 example.sflow: {"agent_address":null,"i_octets":0,"o_octets":0,"interface":6,"input_packets_error":0,"output_packets_error":0}
(中略)
</code></pre>

<p>ネットワーク機器にてよく見られるカウンタサンプルとフローサンプル以外にも、host-sflowはOSやアプリケーションの各種メトリックを集めsFlowプロトコルに載せて送信します。
現状の fluent-plugin-sflow ではカウンタ/フローサンプルのパースしかサポートしていないため、それらのメトリックは空扱いになります(上記5行目)。</p>

<h1>ToDo</h1>

<ul>
<li>bindata 1.8.1以上への対応

<ul>
<li>現状 Sflow5rawpacketdataVLAN の type メンバが BinData::Record あたりで定義されてる名前と被ってるらしく怒られるので、1.8.1にしている</li>
<li><a href="https://github.com/repeatedly/fluent-plugin-netflow">fluent-plugin-netflow</a>は2.5.3ベースであり、こちらと揃えたい</li>
<li>名前の変更にはおそらく次の項目をクリアする必要がある</li>
</ul>
</li>
<li>パーサーの取り込み

<ul>
<li>現状、<a href="https://github.com/NETWAYS/sflow/">NETWAYS/sflow</a>のパーサをリポジトリごと丸っと使っている</li>
<li>ライセンスとオリジナルを明記した上でパーサとモデルの部分だけコピーしてくる</li>
<li>または全部1から書き直す</li>
</ul>
</li>
<li>IPv6対応</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コミケ91 1日目の無線LAN模様]]></title>
    <link href="http://enukane.github.io/blog/2017/01/11/c91-wifi/"/>
    <updated>2017-01-11T23:59:31+09:00</updated>
    <id>http://enukane.github.io/blog/2017/01/11/c91-wifi</id>
    <content type="html"><![CDATA[<p>だんだんと自分にしか意味のない指標&amp;グラフが増えすぎてて大変に読みづらいものになったけど、
いつものやつ書きました。「C91 Wi-Fi 〜ららら、(無線的に)素敵なComiket Space〜」。</p>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/70907756 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> </p>

<p>今回は、また自スペースが西1に戻ってきました。
そのため<a href="http://www.slideshare.net/enukane/c90-wifi-comiket-space">前回のC90 (西3だった)</a>とはまた様子が異なっています。
比較のために、次はできれば東に割り当てられたいですね。</p>

<p>今回は新要素として以下を追加しています。</p>

<ul>
<li>&ldquo;18.1 AP滞在時間のヒストグラム(10分以上のみ抽出)&rdquo;

<ul>
<li>APが見えていた時間をプロット</li>
<li>大半がヒットアンドランで0秒付近に張り付く傾向があるので、一定時間以上に絞って長期傾向を見る</li>
</ul>
</li>
<li>&ldquo;19.1 端末の滞在時間ヒストグラム(10分以上のみ抽出)&rdquo;

<ul>
<li>同上</li>
</ul>
</li>
<li>&ldquo;20. Data &amp; BlockAckフレームの収集数/s&rdquo;

<ul>
<li>&ldquo;14. 正常フレームの収集数/s&rdquo; のうち、さらに Dataフレームと Block Ackフレームに絞り込み</li>
<li>サンプリングが妥当であれば、このFPSがデータ送信の活発さの指標になりうる</li>
<li>ただし長さは考慮されない</li>
<li>ただし高レートすぎて見えないフレームは Block Ack でしか考慮されない

<ul>
<li>Block Ack またはその他の要素から、これらのフレームを復元する方法が必要</li>
</ul>
</li>
</ul>
</li>
<li>&ldquo;21. FCS OKフレームの時間的占有率&rdquo;

<ul>
<li>毎回1秒キャプチャしてた間に見つけたFCS good なフレームの Duration (秒) と 1秒内の割合の推移をプロット</li>
<li>「13. チャネル使用率」のうち、どれくらいが有効に使われていたかを判断できるはず

<ul>
<li>正確な一致には FCS bad なフレームの考慮による検証が必要 (TODO)</li>
</ul>
</li>
<li>チャネル使用率との差分が、無駄になった時間

<ul>
<li>このDurationのうち、データフレームに使えた時間と長さを考慮してチャネル使用率との対比を取ると、有効に使えた度合いが取れる？</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>FCS badなフレームのDurationがどれくらい正確なのかは今後要検証。
これが正確にとれており、Durationの合計がチャネル使用率と合致するならサンプリング精度が良いという指標になりそう。</p>

<p>また、FCS badなデュレーションと
これと、プリアンブルだけの情報が上手く取れると高レートなフレームの流れが</p>
]]></content>
  </entry>
  
</feed>
