<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[#error NO_MONEY]]></title>
  <link href="http://enukane.github.io/atom.xml" rel="self"/>
  <link href="http://enukane.github.io/"/>
  <updated>2018-08-11T10:13:40+09:00</updated>
  <id>http://enukane.github.io/</id>
  <author>
    <name><![CDATA[n_kane]]></name>
    <email><![CDATA[enukane@glenda9.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2018-08-07 論文100本ノック 5: LAMP: Lightweight and Accurate Malicious Access Points Localization via Channel Phase Information]]></title>
    <link href="http://enukane.github.io/blog/2018/08/07/2018-08-07-100papers-05-dot-markdown/"/>
    <updated>2018-08-07T11:37:25+09:00</updated>
    <id>http://enukane.github.io/blog/2018/08/07/2018-08-07-100papers-05-dot-markdown</id>
    <content type="html"><![CDATA[<ul>
<li>from: none</li>
<li>著者: Liangyi Gong</li>
<li>所属; Tianjin University of Technology (天津理工大学)</li>
<li>発行年: 2018</li>
<li>学会: The 13th Internatinal Conference on Wireless Algorithms, Systems and Applications (<a href="http://wasa-conference.org/WASA2018/index.html">WASA2018</a>)</li>
<li>どんなもの:

<ul>
<li>悪意のあるAPの場所特定をChannel State Informationを使ってコモディティハードウェアで実現</li>
<li>LAMP(Leightweight and Accurate Malicious access Point localization)の提案</li>
</ul>
</li>
<li>先行研究と比べてどこがすごい

<ul>
<li>RSSI ではなく CSI を利用

<ul>
<li>indoor multipathの影響を抑える</li>
</ul>
</li>
<li>単一デバイスによる三角測量

<ul>
<li>複数デバイスをばらまくことなく実現</li>
</ul>
</li>
<li>精度: 方向 5度以内、位置 35cm 以内で特定</li>
</ul>
</li>
<li>技術や手法のキモはどこ？

<ul>
<li>要素

<ul>
<li>Channel Phase Information を取得</li>
<li>特徴抽出: フィルタでフェーズ情報をサニタイズ</li>
<li>方向検知

<ul>
<li>self-adaptive MUSIC (MUltiple SIgnal Classification)アルゴリズムを利用</li>
</ul>
</li>
<li>三点測量</li>
</ul>
</li>
<li>特徴抽出

<ul>
<li>CSIからのフェーズ情報の逆算に Linear Transformation を利用、ランダム誤りを抑制</li>
<li>ノイズ除去にはSavitsky-Golay フィルタを適用</li>
</ul>
</li>
<li>方向測定

<ul>
<li>RFオシレータによるCSI中のフェーズオフセットによるエラーを self adaptive MUSICで補正</li>
</ul>
</li>
<li>方向キャリブレーション

<ul>
<li>アンテナをチェイン1とチェイン2、チェイン2とチェイン3の組み合わせでグループ化</li>
</ul>
</li>
<li>位置特定

<ul>
<li>1地点で、位置(x1, y1)と方向θ1がわかる</li>
<li>これを複数子(>2)測定して組み合わせ、基本的には2より上の地点数</li>
</ul>
</li>
</ul>
</li>
<li>どうやって技術・手法の有効性を検証した？

<ul>
<li>壁ありのオフィスフロアにAPをおいて、三点測量を実施

<ul>
<li>クライアントには Intel Wi-Fi Link 5300を利用 + Linux CSI Tools</li>
<li>モニタモードで5.32GHz帯を見る</li>
</ul>
</li>
<li>位置特定の精度

<ul>
<li>見通し(LOS)ありなら50%は35cm以内の誤差で特定できることを確認</li>
<li>LOSなしでも50%は45cm以内の誤差</li>
</ul>
</li>
<li>方向の精度

<ul>
<li>self adaptive MUSICの有効性として 50% 以内は6度以内の誤差であることを確認</li>
<li>単なるMUSICだと11度</li>
</ul>
</li>
</ul>
</li>
<li>議論はある

<ul>
<li>self-adaptive MUSICも本研究の貢献ぽいけど理論的背景が述べられていない気がする</li>
</ul>
</li>
<li>この中で出てきた次に読むべき論文リスト

<ul>
<li>6, 7: プロフェッショナルハードウェアを用いた位置測定

<ul>
<li>[6]: Shah, S.F.A., Srirangarajan, S., Tewfik, A.H.: Implementation of a directional beacon-based position location algorithm in a signal processing framework. IEEE  Trans. Wirel. Commun. 9(3), 1044–1053 (2010)</li>
<li>[7] Subramanian, A.P., Deshpande, P., Jie, G., Das, S.R.: Drive-by localization of road-side WiFi networks. In: The Conference on Computer Communications, INFOCOM  2008, pp. 718–725. IEEE (2008)</li>
</ul>
</li>
<li>1, 5, 8: RSSIベース

<ul>
<li>[1]: Adelstein, F., Alla, P., Joyce, R., Iii, G.G.R.: Physically locating wireless intruders. In: Proceedings of the International Conference on Information Technology: Coding and Computing, ITCC, vol. 1, pp. 482–489 (2004)</li>
<li>[5]: Schweitzer, D., Brown, W., Boleng, J.: Using visualization to locate rogue access points. Consortium for Computing Sciences in Colleges (2007)</li>
<li>[8]: Yang, Z., Zhou, Z., Liu, Y.: From RSSI to CSI: indoor localization via channel response. ACM Comput. Surv. 46(2), 1–32 (2013)</li>
</ul>
</li>
</ul>
</li>
<li>所感

<ul>
<li>手元にあるデバイスだしやりたいことに一番近いことだったんで、もうすこしこまかい情報を載せてほしい感じ&hellip;</li>
<li>self adaptive MUSICとかあまりに説明がなかったけどMUSICはともかくとしてself-adaptiveの方は有名なの？</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018-08-06 論文100本ノック 4: Demystifing 802.11n power consumption]]></title>
    <link href="http://enukane.github.io/blog/2018/08/06/2018-08-06-100papers-04/"/>
    <updated>2018-08-06T14:56:45+09:00</updated>
    <id>http://enukane.github.io/blog/2018/08/06/2018-08-06-100papers-04</id>
    <content type="html"><![CDATA[<ul>
<li>from: none</li>
<li>著者:  Daniel Helperin</li>
<li>所属: U of Washington, Intel Labs Seattle</li>
<li>発行年: 2010</li>
<li>学会: <a href="https://www.usenix.org/legacy/events/hotpower10/">Usenix HotPower &lsquo;10</a></li>
<li>どんなもの

<ul>
<li>802.11n NIC (intel 5300)の電力消費量をさまざまな条件で測定</li>
<li>電力消費をうまく抑える使い方を提案</li>
<li>これまでの経験則の検証、反証</li>
</ul>
</li>
<li>先行研究と比べてどこがすごい

<ul>
<li>細かい条件(チャネル幅、送信出力、転送レート、アンテナチェイン、スリープ条件)に基づいて分析</li>
<li>特に 802.11n MIMO 条件下というのはこれまでになかった設定</li>
<li>ガッと送ってズバッと眠るという 802.11 APSD(Automatic Power Save Delivery)やPSP(Power Save Polling)の有効なシナリオ、そうでないシナリオにも言及</li>
<li>電力消費削減に対する疑問の解決

<ul>
<li>送信出力削るとお得？ NO</li>
<li>眠るのはアイドリングよりお得? YES</li>
<li>送る方が受け取る方より消費する? YES</li>
<li>チャネル幅広げると電力ガンガン消費する? NO</li>
<li>早いレートでガッと送るのは電力効率いい？ NO</li>
<li>電力消費はMIMO のストリーム数に比例する? NO</li>
</ul>
</li>
</ul>
</li>
<li>技術や手法のキモはどこ?

<ul>
<li>実デバイスを使った測定 (Intel WiFi Link 5300)</li>
<li>802.11n MIMO のストリーム数を考慮しつつ、転送レートなどの条件を変えながら測定</li>
</ul>
</li>
<li>どうやって技術・手法の有効性を検証した？

<ul>
<li>スリープ状態

<ul>
<li>スリープするのはアイドリングよりお得</li>
</ul>
</li>
<li>転送レート

<ul>
<li>おなじアンテナ数なら、転送レートを変えても電力消費は変わらない</li>
<li>ただし早い転送レートだと DSP への負荷が上がる

<ul>
<li>例として MIMO 3 40Mhz幅で405Mbps出す場合、40.5Mbpsの時に比べて120mWほど消費が大きくなる</li>
</ul>
</li>
</ul>
</li>
<li>チャネル幅

<ul>
<li>チャネル幅を広げても、その分の電力消費は微々たるもの</li>
<li>転送レートが倍になるほどの影響はない</li>
<li>クロックが上がるのではなく、サブキャリアが増えるだけのため</li>
</ul>
</li>
<li>送信ストリーム数

<ul>
<li>1 -> 2 に増やした時が一番電力消費が上がる(53%上昇)、一方で 2 -> 3 に増やした時は5%ぐらいしか上がらない</li>
<li>MIMO 2 にしたときは、MIMO 3 で使うようなハードウェア(RFコンポーネントその他)はほとんど有効になるためと考察</li>
</ul>
</li>
<li>受信アンテナ数

<ul>
<li>アンテナ数増えるごとに電力消費も増える</li>
<li>1アンテナごとに330mWづつ。アンテナ数倍になるわけではない。</li>
</ul>
</li>
<li>受信ストリーム数

<ul>
<li>上述の通りアンテナ数ごとに330mWの定額上昇</li>
<li>一方で、空間ストリーム数を増やした時は10mW程度しか増えない</li>
<li>よって、アンテナ数減らす方がストリーム数の削減より重要</li>
</ul>
</li>
<li>送信出力

<ul>
<li>送信出力抑えてもたかだか10%程度電力消費削減が関の山</li>
</ul>
</li>
<li>racing to sleep

<ul>
<li>おなじアンテナ数、ストリーム数であれば受信・送信ともに速いレートでガッと送りつけてさくっと寝るというのはエネルギー効率として正しい

<ul>
<li>802.11での Power Save系全般の戦略の有効性を確認</li>
</ul>
</li>
<li>一方で、ストリーム数間を比較するとSISOの方がエネルギー効率がよい

<ul>
<li>一部MIMOでストリーム数が多い方が効率がよくなる箇所もある</li>
<li>ただし前述の箇所は over 250 Mbps な MCS indexで通信している領域</li>
<li>空間がきれいだったりリンクの条件がよくないと使えなかったりする速度</li>
<li>よってリンクがある程度ゆらぐということを前提にするなら SISO にした方が電力効率がよいといえる</li>
</ul>
</li>
</ul>
</li>
<li>パケットオーバーヘッドについて

<ul>
<li>Watt/bitという観点だとオーバーヘッドの削減が電力効率に直結する</li>
<li>オーバーヘッドが発生する要因

<ul>
<li>OFDM シンボル埋めるパディング

<ul>
<li>OFDM シンボルはビット数ではなく時間(4us)に制約される。1シンボルで遅れる情報に不足する分はオーバーヘッドとなる

<ul>
<li>例えば 10バイトのACKパケットは、エンコードやFCS含めると 134ビット</li>
<li>一方、SISO 39Mbps (MCS 3, 16-QAM, &frac34;)であれば 1symbol 156ビット

<ul>
<li>16-QAM はサブキャリアあたり 4bit x サブキャリア 52 個 x コーディングレート 3/ 4 = 156</li>
</ul>
</li>
<li>よって156 - 134 = 22 bit分の無駄がある</li>
<li>MIMO3 だと1620bitにもなるためショートフレームだとフリ</li>
</ul>
</li>
</ul>
</li>
<li>プリアンブル

<ul>
<li>マルチストリームだとその分長くなる

<ul>
<li>MIMO2, MIMO3のプリアンブルはそれぞれ1 or 3 OFDMシンボルとなり、SISOのそれに比べると長い</li>
<li>405Mbpsの場合は4860ビット分</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>オーバーヘッドの影響

<ul>
<li>小パケットであればSISOが一番電力効率がよい</li>
<li>ただしSISOで最悪レートで転送しているようなリンク状態ならMIMOの方がよい</li>
<li>空間ダイバーシチがいい感じに効いてエネルギー効率向上が望めるため</li>
</ul>
</li>
<li>ラージパケットかつリンク状態が良いのであればMIMOは有効、そうでないならSISOの方が良い</li>
</ul>
</li>
</ul>
</li>
<li>議論はある？

<ul>
<li>電力効率で SISO > MIMO という話があったが、収容しなきゃいけないクライアント数/トラフィック量という観点で比較するとどうだろう？

<ul>
<li>トレードオフをクライアント収容(数とトラフィック)、電力消費という二軸にしてみたときに均衡点を提示できる指標</li>
<li>大規模ネットw−悪環境にて、ユーザのスマホ・タブレットの電力消費を抑えたい vs 人数を収容するために上げたいというバランスに対する提言</li>
</ul>
</li>
<li>MU-MIMO では SISO っぽい動作を事実上するようになったはず。これは上記での SISO > MIMO 方向の議論といい感じにマッチするのでは？

<ul>
<li>サウンディングやスケジューリングのオーバーヘッドを踏まえた上で評価できると面白そう</li>
</ul>
</li>
</ul>
</li>
<li>この中ででてきた次に読むべき論文リスト

<ul>
<li>特になし</li>
</ul>
</li>
<li>所感

<ul>
<li>802.11n の最大のMIMOで2.1Wひっぱり、3hでばってりーを消費しつくしユーザの手を焼くのに充分な熱をもつという&hellip;</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018-05-11 論文100本ノック 3: Wireless MAC Processors: Programming MAC Protocols on Commodity Hardware]]></title>
    <link href="http://enukane.github.io/blog/2018/05/11/2018-05-11-100papers-03/"/>
    <updated>2018-05-11T15:52:29+09:00</updated>
    <id>http://enukane.github.io/blog/2018/05/11/2018-05-11-100papers-03</id>
    <content type="html"><![CDATA[<ul>
<li>from: none</li>
<li>著者: I.Tinnirello et al</li>
<li>所属: CNIT U degli Studi di Palermo, U degli Studi di Roma-Tor Vergata, U degli Studi di Brescia</li>
<li>発行年: Mar. 2012</li>
<li>学会: IEEE INFOROM 2012 <a href="http://infocom2012.ieee-infocom.org/">http://infocom2012.ieee-infocom.org/</a></li>
<li>どんなもの

<ul>
<li>Wireless MAC Processorsの概念の提唱

<ul>
<li>MAC(メディアアクセスコントロール)のプログラマビリティ提供のための抽象化</li>
</ul>
</li>
<li>コモディティハードウェア(bcm43xx)での実装</li>
</ul>
</li>
<li>先行研究と比べてどこがすごい

<ul>
<li>SDRやFPGAベースでは同様の取り組みは存在する

<ul>
<li>そもそも既存の802.11の機能を達成するハードルが高い</li>
</ul>
</li>
<li>bcm43xx(802.11チップ)、普通のハードウェアでこれを実現した

<ul>
<li>802.11ハードウェアに載っている諸機能は部品として再活用</li>
</ul>
</li>
<li>その上にWMPとしての抽象化をAPIで提供</li>
</ul>
</li>
<li>技術や手法のキモはどこ？

<ul>
<li>OpenFWWF(Open FirmWare for Wi-Fi networks)の成果を活用

<ul>
<li>コモディティハードウェアにデプロイできるという強み</li>
<li>著者グループの成果らしい</li>
</ul>
</li>
<li>WMPによる802.11含むMACの抽象化: ステートマシン(イベントと状態)とステートレスなコマンドへの分離

<ul>
<li>ホスト側にlower MAC部分を持ってくることなく、デバイスのファームウェア上で時間制約の厳しい挙動は簡潔させた</li>
<li>一方でプログラマビリティは一定のレベルで担保</li>
</ul>
</li>
</ul>
</li>
<li>どうやって技術・手法の有効性を検証した？

<ul>
<li>Piggyback Ackや擬似TDMA、チャネルまたぎのメディアアクセスなどの機能を実現

<ul>
<li>WMPのアーキテクチャで実装した普通の802.11 DCFに少し変更を加えることでできることを図示</li>
<li>抽象化の適切さを提示</li>
</ul>
</li>
<li>実装した機能が時間制約を満たした上で有効に動作できることを例示

<ul>
<li>抽象化したオペレーションが802.11の要件を満たせることを提示</li>
</ul>
</li>
<li>これらによりWMPのアーキテクチャの有用性を提示</li>
</ul>
</li>
<li>議論はある？

<ul>
<li>性能

<ul>
<li>柔軟な機能追加ができること、時間制約の厳しい802.11に適用できることというのを主眼に評価している</li>
<li>このWMPレイヤが入ることによるパフォーマンスオーバーヘッドについてどうなるかは言及がない(特に後述する暗号化周り)</li>
</ul>
</li>
<li>暗号化へのサポート

<ul>
<li>現在のチップにはAESやTKIP, WEPの各種ビット長の暗号化・復号化を行う機能がある

<ul>
<li>これらを活用するアクションは欲しい</li>
</ul>
</li>
<li>あるいはたとえば既存のOWE(RFC8110 Opportunistic Wireless Encryption)をソフトウェアではなくWMPのような枠組みでサポートすることを考えると何が必要になるだろう？</li>
</ul>
</li>
</ul>
</li>
<li>この中ででてきた次に読むべき論文リスト

<ul>
<li>[15]: M. Newfeld &ldquo;Soft MAC - Flexible Wireless Research Platgorm&rdquo; HotNets, Nov.2005</li>
<li>[18]: M.H. Lu &ldquo;Using commodity hardware platform to develop and evaluate CSMA protocols&rdquo;, ACM WiNTECH 2008</li>
</ul>
</li>
<li>所感

<ul>
<li>open-ath9k-htc-firmwareで同じようなことができるとおもしろそう</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018-05-08 論文100本ノック 2: IEEE802.11ac: Dynamic Bandwidth Channel Access]]></title>
    <link href="http://enukane.github.io/blog/2018/05/08/2018-05-08-100papers-02/"/>
    <updated>2018-05-08T20:08:42+09:00</updated>
    <id>http://enukane.github.io/blog/2018/05/08/2018-05-08-100papers-02</id>
    <content type="html"><![CDATA[<ul>
<li>from: 1</li>
<li>著者: Myoung Park</li>
<li>所属: Intel Labs</li>
<li>発行年: 2011</li>
<li>学会: IEEE ICC 2011 <a href="http://icc2011.ieee-icc.org/index.php">http://icc2011.ieee-icc.org/index.php</a></li>
<li>どんなもの

<ul>
<li>802.11acでサポートされた80Mhz幅での転送にあたって20/40/80MHzをセカンダリチャネル以降の20MHz幅ごとの空き状況を見て切り替える方式</li>
<li>セカンダリチャネルのCCA sensitivityの影響や802.11ac利用地のプライマリチャネルの選び方がスループットに与える影響を調べた。</li>
</ul>
</li>
<li>先行研究と比べてどこがすごい

<ul>
<li>先行研究: 802.11ac- 802.11n</li>
<li>セカンダリチャネルに定常的にトラフィックが有る場合のスループットを85%改善</li>
<li>もともとは802.11nの20/40切り替えテクニックだが、これを802.11acに適用した</li>
</ul>
</li>
<li>技術や手法のキモはどこ？

<ul>
<li>Dynamicに20/40/80とチャネル幅を変えるところ</li>
<li>もともと802.11nの20/40Mhz幅切り替えという前例がある

<ul>
<li>40MHz幅運用の場合、セカンダリチャネルでは

<ul>
<li>プライマリより低い感度のCCA感度で運用される: -82 or -79 vs -62 dBm (ED-CCAだけが動く): プライマリで必要なプリアンブルデコード等が不要なため</li>
<li>NAVをセットしない: セカンダリチャネルのみで動作する802.11aなどのデバイスのプリアンブルをデコードしないため</li>
</ul>
</li>
<li>まずプライマリチャネルがDIFS + CWの後に空いているか見る + PIFSの後にセカンダリが空いているか見る

<ul>
<li>(正確にはプライマリチャネルのCW(3〜1023us)中の後ろPIFS(9us)がクリアなら、プライマリと同期できる)</li>
<li>staticの場合: 両方空いていれば送信  or 再度バックオフ</li>
<li>dynamicの倍: 20mhzに縮退して送信</li>
</ul>
</li>
<li>80MHz幅運用の問題点</li>
</ul>
</li>
<li>20/40/80の切り替えについて

<ul>
<li>80MHzを占有できることはまずないという現状がある

<ul>
<li>staticだと送信機会がなかなかこない</li>
<li>プライマリとセカンダリとでCCAのレベルが異なることによる問題: セカンダリチャネルで-82〜-62dBmあたりの強度のフレームの送信と衝突する可能性 => 結局Ackが帰ってこずフレームが欠損し、双方にretryが必要になり、また時間を消費する&hellip;</li>
</ul>
</li>
<li>プライマリチャネルの選び方

<ul>
<li>大抵40/80の先頭か末尾が多い</li>
<li>これだとセカンダリが1つに限られるため20Mhzにフォールバックする確率がたかい</li>
<li>真ん中にプライマリを持ってこれる方式が望ましい場合がある</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>どうやって技術・手法の有効性を検証した？

<ul>
<li>MATLABのシミュレーションで実施</li>
<li>1台のAP、それに接続する1台の802.11ac STA、セカンダリチャネルに1〜3台のAP + 1- 2台のSTAsを配備した環境を想定</li>
<li>セカンダリチャネルに干渉する通信がある場合のスループットの改善を計測</li>
<li>80MHz staticだとそちらの通信の空きでしか通信できないため、かなり下がるはず -> これが改善していれば有意であることが示せる</li>
<li>スタティックvsダイナミックの比較 (Fig 4a vs Fig 4b)

<ul>
<li>セカンダリチャネルのSTAの送信確率を０〜100% (0-1)で換えたグラフ</li>
<li>セカンダリチャネルでの受信出力はED-CCAの閾値 -62dBmより上を想定</li>
<li>4aのスタティックの場合

<ul>
<li>台数1台の場合、TxProb =1でも200Mbps程度でる

<ul>
<li>縮退運転はしないため、</li>
</ul>
</li>
<li>が、台数が増えるごとに0Mbpsに近づく

<ul>
<li>TxProb >= 0.6のときは2台でダイナミック方式に抜かれる</li>
</ul>
</li>
</ul>
</li>
<li>4bのダイナミック方式の場合

<ul>
<li>台数1台の場合、TxProb = 1で144Mbps程度に落ちる

<ul>
<li>20MHzに縮退運転するため、スタティックよりも遅い</li>
</ul>
</li>
<li>但し台数が増えても100Mbps程度を維持

<ul>
<li>セカンダリチャネルにいる他局の影響を抑えることに成功している</li>
</ul>
</li>
</ul>
</li>
<li>改善の度合い(Table III)

<ul>
<li>Tx Prob = 0.6 (中程度) で85%</li>
<li>Tx prob = 1.0 (重程度) で 569%</li>
</ul>
</li>
</ul>
</li>
<li>セカンダリチャネルの他局の強度がED-CCAに引っかからない場合(-82 &lt; RSSI &lt; -62) (Fig 5)

<ul>
<li>802.11ac側は気づかずに潰しに掛かる(コリジョンが発生)</li>
<li>セカンダリにいる802.11a側の局は潰されるか、CCAでより多く待たされる => バックオフの増加</li>
<li>このため802.11a側の局の合計スループットが大幅に低下する</li>
<li>Fig 4a/bと比べて、802.11ac側BSSへの悪影響は低い
=> 強度を-62 dBmに押さえることでセカンダリ側に割を食わすということはできる</li>
</ul>
</li>
<li>プライマリチャネルを中間におくことの効用 (Fig6)

<ul>
<li>中間に置いた場合(例: W52の40ch)と末尾に置いた場合(例: W52の48ch)の比較</li>
<li>中程度(TxProb=0.6)以上のトラフィックが全部のセカンダリチャネルに発生している場合は+10Mbps程度の効用

<ul>
<li>最大で20Mbps程度、20%の改善</li>
<li>これは40MHz幅を2方向に取れることに起因する</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>議論はある？

<ul>
<li>50台ぐらいになり、BAR/BA/RTS/CTS等のコントロール系フレームが多くなった場合でも同様の傾向になるのか？</li>
<li>セカンダリチャネルに居る他局の出力が弱いと割を食いやすい問題への解決策の議論は&hellip;?</li>
</ul>
</li>
<li>この中ででてきた次に読むべき論文リスト

<ul>
<li>参考文献に論文がねぇ！</li>
<li>[5]: Kim- Y-. &ldquo;Enhanced CCA for Non-Primary Channels Using Guard Interval&rdquo;- IEEE 802.11-10/0012r0- Jan2010
セカンダリチャネルでのCCAが高いことによる問題 (論文ではないけど)</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018-05-08 論文100本ノック 1: Performance Analysis of IEEE 802.11ac DCF with Hidden Nodes]]></title>
    <link href="http://enukane.github.io/blog/2018/05/08/2018-05-08-100papers-00/"/>
    <updated>2018-05-08T19:39:17+09:00</updated>
    <id>http://enukane.github.io/blog/2018/05/08/2018-05-08-100papers-00</id>
    <content type="html"><![CDATA[<p>人もすなる論文100本ノックといふものを、我もしてみむとてするなり。
どこまで続くか分からないけどぼちぼち読んでたりしているのを吐き出す良い機会ではあるのでちょびちょびやっていこうと思う。</p>

<p>フォーマットは以下の落合先生フォーマットをアレンジしたものを使う。</p>

<ul>
<li><a href="http://lafrenze.hatenablog.com/entry/2015/08/04/120205">高速で論文がバリバリ読める落合先生のフォーマットがいい感じだったのでメモ</a></li>
</ul>


<p>だいたい以下の項目を埋めるイメージ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>- from: 別のノックからの続きモノの場合、その番号。系統図書けると面白そうなので。
</span><span class='line'>- 著者: ファーストオーサーの名前
</span><span class='line'>- 著者団体: 著者の所属研究機関がわかるように
</span><span class='line'>- 発行年: 旬のものなのかそうでないのかわかるように
</span><span class='line'>- 学会: どれくらいのランクの学会のモノなのかわかるように
</span><span class='line'>- どんなもの
</span><span class='line'>- 技術や手法のキモはどこ？
</span><span class='line'>- どうやって技術・手法の有効性を検証した？
</span><span class='line'>- 議論はある？
</span><span class='line'>- この中で出てきた次に読むべき論文リスト
</span><span class='line'>- 所感
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>from: none</li>
<li>著者: Zheng Chang et al</li>
<li>著者団体: Magister Solutions, Nokia Research Center, U of Jyvaskyla</li>
<li>発行年: 2012</li>
<li>学会: VTC012 Spring <a href="http://www.ieeevtc.org/vtc2012spring/">http://www.ieeevtc.org/vtc2012spring/</a></li>
<li>どんなもの

<ul>
<li>802.11 DCF x Hidden Node x 802.11acの組合せでパフォーマンス解析を行っている</li>
</ul>
</li>
<li>先行研究と比べてどこがすごい

<ul>
<li>先行研究: [1], [2]</li>
<li>新しい規格への対応: 既存802.11aまで -> 802.11acまでやる</li>
<li>Hidden Node(隠れ端末)の考慮</li>
<li>異なるプライマリチャネルを用いたOverlapping BSS環境を想定: これまでのDCFをターゲットにした研究では対象外</li>
</ul>
</li>
<li>技術や手法のキモはどこ？

<ul>
<li>どこに差異を見いだしているか</li>
<li>[1]のモデリングにblockackおよびHNの情報を考慮したモデルを構築</li>
</ul>
</li>
<li>どうやって技術・手法の有効性を検証した？

<ul>
<li>上記モデルの理論値とIEEE802.11で定められたチャネル伝搬モデル(ビットエラー起こしやすい環境)に基づくシミュレーション値で比較</li>
<li>40MHz幅のときの比較値として10STAs, 40Mhz basic DCFおよび50 STAs 40MHz basic DCFの場合に、モデルとシミュレーションがほぼ一致していることから適用できると判断</li>
<li>これを台数換えたりRTS/CTSにしたり、チャネル幅換えたりして適用し傾向を見ている</li>
<li>fig 5a: 40Mhz幅と80MHz幅の比較における検証

<ul>
<li>DCFの方式間の差異について
□ 10 STAs 40Mhzの場合だと、大きな差があり basic の方がよい
□ 50STAsやあるいは80, 160MHz幅以上だと差はほぼない</li>
<li>チャネル幅を上げる効果について

<ul>
<li>50STAs程度になると40Mhz -> 80Mhz幅に換えても、実際のところ2Mbps程度しか改善しない傾向にある</li>
<li>10STAs程度の場合、むしろ40MHz幅の方が良い場合もある(+10Mbps程度)</li>
</ul>
</li>
<li>結論

<ul>
<li>低い台数の場合、basicの方が性能が良い。ボンディング幅が狭いとより効果がある。</li>
<li>多い台数の場合、この差異はほぼなくなる</li>
<li>チャネル幅を上げることによる効果はあまりない(+2Mbps程度)</li>
</ul>
</li>
</ul>
</li>
<li>fig 5b: 80MHz幅と160Mhz幅の比較における検証

<ul>
<li>DCFの方式の差異について

<ul>
<li>basicの方が優位 (10STAsで+20Mbps,  50STAsで+5Mbps)

<ul>
<li>台数が上がると方式間の差異は縮まるが、引き続きbasicが優位</li>
</ul>
</li>
<li>チャネル幅を 80 -> 160MHzに上げるとbasic vs RTS/CTSの差が縮まる</li>
<li>50STAsの場合、RTS/CTSの方が性能がよい</li>
</ul>
</li>
<li>チャネル幅の差異について

<ul>
<li>このチャネル伝搬モデルだと80 -> 160MHzしても差異がない=> チャネル幅上げることによる効果はない？</li>
</ul>
</li>
<li>結論

<ul>
<li>低い台数の場合、basicの方が良い</li>
<li>多い台数の場合、RTS/CTSの方が良い</li>
<li>このチャネル伝搬モデルではチャネル幅を上げることによる効果はあまりない</li>
</ul>
</li>
</ul>
</li>
<li>OBSSとHNを考慮したシミュレーションの検証

<ul>
<li>BSSで同じprrimary チャネルを用いている場合 (fig 7)

<ul>
<li>それぞれのSTAがそれぞれのAPにアップリンク送信</li>
<li>BSS2が大幅にペナルティを受ける(図の下に張り付いてる4本の線</li>
<li>DCF方式間の差異について

<ul>
<li>HNにAPが直接干渉されない方(BSS1)はbasic > RTS/CTS</li>
<li>HNにAPが干渉される方(BSS2)は RTS/CTS > basic となり、むしろbasicだとほぼ通信できない</li>
</ul>
</li>
<li>チャネル幅の差異について

<ul>
<li>RTS/CTS方式の場合

<ul>
<li>上手く通信できる方はスループットが上がる</li>
<li>上手く通信出来ない方は、スループットは上がらない</li>
</ul>
</li>
<li>basic方式の場合

<ul>
<li>上手く通信できる方はスループットが上がる</li>
<li>上手く通信出来ない方はほぼ通信できないまま</li>
</ul>
</li>
</ul>
</li>
<li>結論

<ul>
<li>RTS/CTSを用いることでこのモデルではHNの影響を受ける</li>
<li>basic方式の場合、通信出来るBSSとHNの影響を受けやすいBSSとの間に、通信できないほどの不公平を生じる</li>
</ul>
</li>
</ul>
</li>
<li>異なるprimary チャネルを用いているがsecoundaryにprimaryが被ってる場合 (fig 8a)

<ul>
<li>BSS1 40MHzのセカンダリをBSS2 80MHzがprimaryとして使っている

<ul>
<li>たとえばBSS1 40MHz 44+ vs BSS2 80MHz 48-の場合</li>
<li>BSS1にとって48chはセカンダリ、BSS2にとってはプライマリ</li>
<li>STA1から40MHz転送が行われるとSTA2からの80MHz転送にプリマリで被さる</li>
</ul>
</li>
<li>プライマリがオーバーラップしている方(BSS2)ガbasicだと大きく割を食う (その文をBSS1が持っていく)</li>
<li>RTS/CTS方式だとBSS2のスループットが一定のレベルで改善する一方、BS1のスループットは低下する</li>
</ul>
</li>
<li>異なるprimaryチャネルを用いておりsecondaryにprimaryが被っていない場合 (fig 8b)

<ul>
<li>BSS1 40MHzのセカンダリとBSS2 80MHzのプライマリが被っていない場合

<ul>
<li>たとえばBSS1 40MHz 36+ vs BSS2 80MHz 48-の場合</li>
<li>36, 40チャネルは被っているがプライマリではない</li>
<li>BSS1からはSTA2は見えないので、80MHz幅転送の影響は受けない</li>
<li>STA1から40MHz転送が行われるとSTA2からの80MHz転送がセカンダリ以降で被さる</li>
</ul>
</li>
<li>fig 8aと同じ傾向

<ul>
<li>RTS/CTSで一部改善はしているが、BSS2が80MHz幅の利点を活かして通信できるほどではない</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>議論はある？

<ul>
<li>このチャネル伝搬モデルの妥当性は？イベント無線LAN環境などと比べるとどうなのだろう？</li>
<li>チャネル伝搬モデルを換えるとどうなる？換えられる対象はある？</li>
</ul>
</li>
<li>この中ででてきた次に読むべき論文リスト

<ul>
<li>[1]: モデリングの元となる論文

<ul>
<li>G.Bianchi &ldquo;Performance Analysis of the IEEE802.11 Distributed Coordination Function&rdquo; IEEE Journal on Selected Areas in Communication, vol.18, No.3, pp.535-547, Mar, 2000</li>
</ul>
</li>
<li>[8]: 本論文の調査結果として明らかになったHN x 802.11acの組合せ問題への解決策となりうる RTS/CTSの改良を扱っているらしい

<ul>
<li>M.Park &ldquo;IEEE80211ac : Dynamic Bandwidth Channel Access&rdquo; IEEE ICC 2011<a href="http://icc2011.ieee-icc.org/">http://icc2011.ieee-icc.org/</a></li>
</ul>
</li>
</ul>
</li>
<li>所感

<ul>
<li>モデルについて疑問はあるものの、DCF方式の差異、チャネル幅の差異、クライアント数の差異という観点でパラメータがどのように影響するのかが調査されているのは参考になった</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018年 抱負]]></title>
    <link href="http://enukane.github.io/blog/2018/01/01/2018-100-wish/"/>
    <updated>2018-01-01T18:50:01+09:00</updated>
    <id>http://enukane.github.io/blog/2018/01/01/2018-100-wish</id>
    <content type="html"><![CDATA[<p>2018/01/01 なので、今年のだけというわけではないけれどここ10年ぐらいでやりたいことを100個思い付く限り書き出してみた。</p>

<ol>
<li>一陸技を取る</li>
<li>2018/01を生き延びる</li>
<li>FPGA + RFフロントエンドでぼくの考えたさいきょーのキャプチャデバイスを作る</li>
<li>USRPベースのキャプチャ箱作る</li>
<li>virtioのまとめ本出す</li>
<li>indesignを使った薄い本を出す</li>
<li>夏(C94)、冬(C95)にサークル参加する</li>
<li>802.11キャプチャデバイス(PCIe編)をまとめる</li>
<li>ビットコイン(というかスマートコントラクタ)ネタの応用アプリをデモれるぐらいに作り上げる</li>
<li>Launchpad MK2の、活用フレームワークを完成させる</li>
<li>積んでる経済学系の本を読み切る(「一般理論」「大転換」「資本主義・社会主義・民主主義」「自由の条件」)</li>
<li>財政健全化グランドゼロ</li>
<li>ダンボール入りの本を全て本棚に展開する</li>
<li>テルミンが弾けるようになる</li>
<li>原付の免許とる</li>
<li>第二級小型船舶免許とる</li>
<li>若洲記念公園まで自転車でかっ飛ばして初日の出を見る</li>
<li>船の上で初日の出を見る</li>
<li>持ってるイベント無線LAN系のノウハウを全部吐き出す</li>
<li>頭皮湿疹治す</li>
<li>おせち料理をDIYする</li>
<li>A4/A5肉でローストビーフを作る</li>
<li>スキンヘッドにする</li>
<li>目指せ体重&lt;80kg</li>
<li>仏検3級を取る</li>
<li>独検3級を取る</li>
<li>漢語水平考試2級を取る</li>
<li>仏語でカミュのLe Mythe de Sisyphe, Le justeを読み切る</li>
<li>CCNA WIFUNDを取る</li>
<li>IEEE WCETを取る</li>
<li>作るモノの半分を非rubyにする</li>
<li>生活着に和服を取り入れる</li>
<li>CubieAIO-A20ボードベースのキャプチャ箱を作る</li>
<li>ベッドを買い換える</li>
<li>船を買う、マリーナに係留・維持する</li>
<li>長距離無線で一本遊ぶ</li>
<li>映画「記憶の扉」を見る</li>
<li>「少女革命ウテナ」全話見る</li>
<li>キェルケゴール「キリスト教の修練」を読む</li>
<li>「ガリア戦記」を原語で読む</li>
<li>全部ラテン語の薄い本を書く</li>
<li>自宅に電波望遠鏡を建造する</li>
<li>Google Home/Alexa + 赤外線リモコンでTV/エアコンのオペレーションハンズフリー化</li>
<li>着るものレコメンデータを作る</li>
<li>自宅温湿度センサ系に外気温の記録も加える</li>
<li>「めんどくさっ」と避けていることを少なくとも月に1つはとりあえずとりかかる(投げ出してもよい</li>
<li>「人を上手く巻き込むこと」の試行錯誤をする</li>
<li>「人に上手く伝えること」の試行錯誤をする</li>
<li>夏と冬の戦利品画像解析・DB化自動集計の仕組みを作る</li>
<li>Getting Over Itを上手くやっていく</li>
<li>早割入稿する、またはそれぐらいの時期に原稿を書き上げる</li>
<li>ペン字の練習をする</li>
<li>ひきこもろうと思った時に5回は外に出る</li>
<li>東京外語大オープンアカデミー公開講座の面白そうな言語の講座を受講してみる(アラビア語、ポーランド語、ハンガリー語、セルビア語、その他非印欧系)</li>
<li>ヘブライ/アラビア文字が読み書きできる</li>
<li>CADでプリント基板の発注ができる</li>
<li>1日1回体重計に乗る</li>
<li>アンガーコントロールを学ぶ、試行錯誤をする</li>
<li>6月のブートキャンプを生き残る</li>
<li>遊び、楽しいことと仕事のAND領域を広げる</li>
<li>りんご酒を漬ける</li>
<li>考えをきちんと文章化する。ブログでも薄い本でもレポートでも主張のある文章を24個/年はきちんとまとめる。</li>
<li>アイディア・思考のメモを取る習慣を付ける</li>
<li>お仕事の次のステップを考える</li>
<li>小笠原諸島への旅に出る</li>
<li>El Camino de Santiagoを今度はフランスの道のスタート地点から歩く(一ヶ月間。前はレオンからだった＠2007)</li>
<li>南極大陸に上陸する</li>
<li>オーロラを見る</li>
<li>シベリア鉄道に乗る</li>
<li>国内の寝台列車(サンライズ出雲/瀬戸)にのる</li>
<li>月あたりの平均睡眠時間を7時間以上にキープする</li>
<li>シングルトピック以上の総括的な文章を上手く書く方法を学ぶ</li>
<li>可視光通信で遊ぶ、なにかアウトプットを1つはつくる</li>
<li>水中通信で遊ぶ、なにかアウトプットを1つはつくる</li>
<li>反物から自分用の着物が縫えるようになる</li>
<li>時刻同期について自分なりの整理をアウトプットする</li>
<li>位置測位について自分なりの整理をアウトプットする</li>
<li>1年1言語、人工言語を作る</li>
<li>人工言語を作る時の補助ツールを作る(単語帳、文法構造定義ツール)</li>
<li>オマージュモノのでない薄い本の表紙を作る</li>
<li>楽をするために全力を尽くすこと、尽くしたことについてきちんと見直す・振り返る</li>
<li>おいしいものを食べる。行きたい店リスト12個/年は埋める。行きたい店を12個/年は増やす。</li>
<li>やりたいことは書き留める</li>
<li>バイロイト音楽祭にニーベルングの指環を観に行く</li>
<li>歌舞伎を見に行く</li>
<li>映画30本は観る</li>
<li>時計を買う、身につける習慣を付ける</li>
<li>2018年講演のローエングリンとトスカを観に行く</li>
<li>人の集まりから少なくとも3回/年は逃避しない</li>
<li>簿記三級を取る</li>
<li>白色申告を出してみる</li>
<li>タルコフスキー作品を全部観る</li>
<li>なにかで局免(アマ, 実験局 e.t.c)を取ってみる</li>
<li>親にもうちょっと顔見せにいく</li>
<li>風呂敷を上手く広げる術を学ぶ</li>
<li>厚い肉料理6種をレパートリーに加える</li>
<li>圧力鍋使った料理を5種覚える</li>
<li>荒川河畔で燻製をやる</li>
<li>不惑までは生きる</li>
<li>自分を引き受けて生きる</li>
</ol>


<p>意外と100個書き出すの結構難しい。欲しいもの並べ立てると早いんだろうけど。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日本の5.3GHz帯DFS対象レーダー局をプロットしてみた]]></title>
    <link href="http://enukane.github.io/blog/2017/12/02/dfs-radar-site/"/>
    <updated>2017-12-02T01:36:58+09:00</updated>
    <id>http://enukane.github.io/blog/2017/12/02/dfs-radar-site</id>
    <content type="html"><![CDATA[<p>先日参加したInternetWeek2017 NOCチーム内で、「5GHz帯 DFS 対象のレーダーが飛んでくる場所」という話題が出たので試しにプロットしてみました。</p>

<ul>
<li><a href="https://www.google.com/maps/d/viewer?mid=1HN0HXt1HLAMVClb2YfaTzyM_hLM0QVjS&amp;hl=ja&amp;usp=sharing">DFS対象レーダー局</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PXEブートによるBitVisor開発環境の構築]]></title>
    <link href="http://enukane.github.io/blog/2017/06/27/bitvisor-on-pxe/"/>
    <updated>2017-06-27T14:17:13+09:00</updated>
    <id>http://enukane.github.io/blog/2017/06/27/bitvisor-on-pxe</id>
    <content type="html"><![CDATA[<p>書いた。これでBitVisor遊びが捗る。</p>

<ul>
<li><a href="http://qiita.com/n_kane/items/0f55218371f2b1b6bb9f">PXEブートによるBitVisor開発環境の構築</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Got Aruba IAP-103-JP]]></title>
    <link href="http://enukane.github.io/blog/2017/05/03/iap103/"/>
    <updated>2017-05-03T23:42:11+09:00</updated>
    <id>http://enukane.github.io/blog/2017/05/03/iap103</id>
    <content type="html"><![CDATA[<p>どこからともなく予算が割り当たったことにしたので、Aruba IAP-103-JP が降ってきました。</p>

<ul>
<li><a href="http://www.arubanetworks.com/ja/products/networking/access-points/103-series/">Aruba 103 シリーズ</a></li>
</ul>


<p>機体筐体はこんな感じ。Cisco Aironet 3602i やらと比べるとだいぶコンパクトでカワイイ。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-05-03/iap103.jpg" width="480"></p>

<p>裏側のネジ4つを外すと表カバー、裏カバー、基板の3つに綺麗に分かれる。分解はしやすい。</p>

<p>アンテナ(基板の表カバー側)はこんな感じ。いわゆる逆Fアンテナの模様。
見ての通りアンテナは2つだけで、2.4/5GHz帯共用らしい。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_ant.jpg" width="480"></p>

<p>チップ実装面はこんな感じ。シールドを一部外した状態。
右側のシールド内のチップはAtheros AR9582-AR1A。
左の黒いヒートシンクが付いているシールドからちらっと見えている石はAtheros AR9344-BC2AでこちらはSoC。
前者で5GHz帯、後者でCPU兼2.4GHz帯を捌いてる模様。
中央上部、ACアダプタソケットとEthernetソケットの間にピンヘッダが出ている。
細かく調べてはいないがシリアルコンソールが取れるのかもしれない。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_chip.png" width="480"></p>

<p>この子はIAPタイプなのでコントローラとしても動作する。ダッシュボードはこんな感じ。
1台だけだからかもしれないがCisco WLCと比べるとだいぶシンプル、というか設定できるところが少なめっぽい。よしなに調整してくれるのかな？</p>

<p><img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_db_ap.png" width="480"></p>

<p>AppRFを有効にしてると以下の様に通信内容の分析がAP/クライアントの単位でできるらしい。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_db_apprf.png" width="640"></p>

<p>今のところ自宅ではAP機能(アクセスモード)に用はないので、スペクトルもモニターモードで動作させている。
このモードだと「スペクトラム」メニューにて非802.11デバイス一覧や、全チャネルのチャネル使用率&amp;品質が見れるらしい。
なおアクセスモードだと動作中チャネルのそれに限定される。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_mon_gen.png" width="480">
<img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_mon_24g.png" width="480">
<img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_mon_5g.png" width="480"></p>

<p>ところでIAPが一台あれば、Remote APモデルのもの仕入れて繋げて遊べたりするのかな？
AP105はヤフオクで1500〜2000円/台の価格で数多く出ており、簡単に中規模ネットワークは組めそう。
なお一部のAruba APは某用途向けにファーム/基板ごと特殊モデルと聞くので対象外になりそうではある。</p>

<p>軽くぐぐってみた限り、以下のスレッドにあるとおりクラスタのAP数上限というのはないらしい。
推奨値128とあるようだがここまで巨大なものを組む予定はないので遊ぶ分には困らなさそう。</p>

<ul>
<li><a href="https://community.arubanetworks.com/t5/Aruba-Instant-Cloud-Wi-Fi/IAP-MAX-AP-per-Cluster/td-p/214997">IAP MAX AP per Cluster</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fluent-plugin-sflow でっちあげた]]></title>
    <link href="http://enukane.github.io/blog/2017/03/24/fluent-plugin-sflow-release/"/>
    <updated>2017-03-24T19:13:10+09:00</updated>
    <id>http://enukane.github.io/blog/2017/03/24/fluent-plugin-sflow-release</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/enukane/fluent-plugin-sflow">fluent-plugin-sflow</a></p>

<p>JuniperやAlaxala, NEC製品などでサポートされているsFlowプロトコルのサンプルを受信するFluentdプラグインを書きました。</p>

<p>netflowプロトコルについては repeatedly さんが既に<a href="https://github.com/repeatedly/fluent-plugin-netflow">fluent-plugin-netflow</a>を公開されています。
今回NECのIXシリーズからフローデータを送りつけたいという要望が某所であったため、実装してみました。
とはいえsflowのプロトコルを捌く部分は別の方のパーサに頼っています。</p>

<h1>使い方</h1>

<p>fluent-gemやtd-agent-gemでインストールするだけです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% fluent-gem install fluent-plugin-sflow</span></code></pre></td></tr></table></div></figure>


<p>設定項目は以下の通りです。 待ち受けアドレス(bind)、待ち受けポート(port)そしてタグ名ぐらいしかありません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;source&gt;
</span><span class='line'>  @type sflow
</span><span class='line'>  tag sflow.example
</span><span class='line'>
</span><span class='line'>  bind 0.0.0.0
</span><span class='line'>  port 6343
</span><span class='line'>&lt;/source&gt;
</span><span class='line'>
</span><span class='line'>&lt;match sflow.example&gt;
</span><span class='line'>  @type stdout
</span><span class='line'>&lt;/match&gt;</span></code></pre></td></tr></table></div></figure>


<h1>host-sflow と組み合わせたテスト</h1>

<p>実際のテストにはスイッチやルータが必要ですが、手元で簡単に試すために <a href="http://www.sflow.net/">host-sflow</a> を導入します。
ここではMac OS X (MacBookPro)上に導入しWi-Fiのインタフェース(en0)のデータをサンプリング、先に挙げた設定で同一ホスト上で動作するfluentdに投げ込んでみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git clone https://github.com/sflow/host-sflow.git
</span><span class='line'>% cd host-sflow
</span><span class='line'>
</span><span class='line'>% make
</span><span class='line'>
</span><span class='line'># pcap のターゲットデバイスとして en0 を指定する
</span><span class='line'>% cat &gt; /tmp/test.conf
</span><span class='line'>sflow {
</span><span class='line'>  polling=10
</span><span class='line'>  collector { ip = 127.0.0.1 udpport=6343 }
</span><span class='line'>  pcap { dev=en0 }
</span><span class='line'>}
</span><span class='line'>^D
</span><span class='line'>
</span><span class='line'># host-sflowの起動(デバッグ目的で -dddd としている)
</span><span class='line'>% sudo ./src/Darwin/hsflowd -dddd -f /tmp/test.conf</span></code></pre></td></tr></table></div></figure>


<p>fluentdの標準出力をしばらく眺めていると、以下の様にフローサンプルが出力されます。この時は *.twttr.com (twitter) への通信がキャッチされたようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% fluentd -vv -c example/fluentd.conf
</span><span class='line'>(中略)
</span><span class='line'>2017-03-24 18:52:50.054347000 +0900 example.sflow: {"agent_address":null,"i_octets":0,"o_octets":0,"interface":6,"input_packets_error":0,"output_packets_error":0}
</span><span class='line'>2017-03-24 18:52:52.519715000 +0900 example.sflow: {"agent_address":null,"sampling_rate":"400","i_iface_value":0,"o_iface_value":0,"ipv4_src":"199.59.148.241","ipv4_dst":"192.168.10.17","udp_src_port":1900,"udp_dst_port":57347,"frame_length":1486,"frame_length_multiplied":594400,"tcp_src_port":443,"tcp_dst_port":58076}
</span><span class='line'>2017-03-24 18:53:01.984184000 +0900 example.sflow: {"agent_address":null}
</span><span class='line'>2017-03-24 18:53:09.934539000 +0900 example.sflow: {"agent_address":null,"i_octets":0,"o_octets":0,"interface":6,"input_packets_error":0,"output_packets_error":0}
</span><span class='line'>(中略)</span></code></pre></td></tr></table></div></figure>


<p>ネットワーク機器にてよく見られるカウンタサンプルとフローサンプル以外にも、host-sflowはOSやアプリケーションの各種メトリックを集めsFlowプロトコルに載せて送信します。
現状の fluent-plugin-sflow ではカウンタ/フローサンプルのパースしかサポートしていないため、それらのメトリックは空扱いになります(上記5行目)。</p>

<h1>ToDo</h1>

<ul>
<li>bindata 1.8.1以上への対応

<ul>
<li>現状 Sflow5rawpacketdataVLAN の type メンバが BinData::Record あたりで定義されてる名前と被ってるらしく怒られるので、1.8.1にしている</li>
<li><a href="https://github.com/repeatedly/fluent-plugin-netflow">fluent-plugin-netflow</a>は2.5.3ベースであり、こちらと揃えたい</li>
<li>名前の変更にはおそらく次の項目をクリアする必要がある</li>
</ul>
</li>
<li>パーサーの取り込み

<ul>
<li>現状、<a href="https://github.com/NETWAYS/sflow/">NETWAYS/sflow</a>のパーサをリポジトリごと丸っと使っている</li>
<li>ライセンスとオリジナルを明記した上でパーサとモデルの部分だけコピーしてくる</li>
<li>または全部1から書き直す</li>
</ul>
</li>
<li>IPv6対応</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[レベル 30 にあがった]]></title>
    <link href="http://enukane.github.io/blog/2017/03/20/level30/"/>
    <updated>2017-03-20T00:21:36+09:00</updated>
    <id>http://enukane.github.io/blog/2017/03/20/level30</id>
    <content type="html"><![CDATA[<p>2017/03/19 でレベル30になった。不毛の20代が終わり、そして不毛の30代が始まった。
節目でもあるのでざっくりとここ10年を振り返って思い出せることをつらつらと書いてみる。</p>

<ul>
<li>2007

<ul>
<li>大学生3年生</li>
<li>サークルに入らず毎日自宅と大学とを行き来する量子的な大学生生活。大学に知り合い？知らない子ですね。</li>
<li>週3で入れてたリサイクルショップのバイトでのみわずかに人間的なコミュニケーションを行う</li>
<li>一年前に出来たつくばエクスプレスがなければしんでいた</li>
<li>念願のEl Camino de Santiago 巡礼で2週間歩き通す旅にでた。300km超。帰ってきても体重は変わらなかった。自分探しの無意味さを知る。</li>
</ul>
</li>
<li>2008

<ul>
<li>大学生4年生</li>
<li>OS系を志望して、やわらか研究室に配属される。</li>
<li>OSやりたくて入ったけど分散システム系のネタをやることになる</li>
<li>今もつきあいのある頭のおかしい人たちを知る(syonboriさん, ozaさん, hirakuさん, yoshinabuさん, goさん e.t.c)</li>
<li>はじめてのコミケ一般参加＠冬(go先生のガイド、しかも始発組だった気がする&hellip;)</li>
</ul>
</li>
<li>Before Twitter と Anno Twitter の境目</li>
<li>2009

<ul>
<li>大学4年、卒業。良く分からないけど卒業に際して学類長賞もらう。一言とはいえ友達も知り合いも0なのに前で所感をしゃべるの拷問。</li>
<li>モラトリアム延長のため大学院に入院する。研究室に住むという道を選ぶ。</li>
<li>後輩にさらに頭のおかしいのが入ってきて一般人層として肩身が狭くなる (えむばさん、frsyukiさん、athlonzさん, kdmnさん e.t.c)</li>
<li>7月、syonboriさんその他に触発されてtwitterに手を染める(<a href="https://twitter.com/n_kane/status/2477877389">初Tweet</a>)</li>
<li>お外に出ていた先輩・後輩経由で外の頭のおかしい人たちを知る。世の中は広大だわ。</li>
<li>はじめてのコミケサークル参加おてつだい＠yoshinabuさん &amp; goさん&#8217;sスペースでサークル参加の楽しさを知る</li>
<li>沼津の方にインターンに行く。Linux系の怖い人たちを知る。</li>
<li><a href="http://d.hatena.ne.jp/syuu1228/20090820/1250748541">はじめてのハッカソン</a></li>
<li>Plan 9への傾倒、グレンダのぬいぐるみ製造の外注に着手する</li>
</ul>
</li>
<li>2010

<ul>
<li>はじめての勉強会発表。いろいろとひどかった(主催者の方ごめんなさい)けど、いろいろ学びをえた。</li>
<li>グレンダぬいぐるみが降臨、信仰が始まる</li>
<li>修士2年生、研究室の机の下の住居環境の充実化が一層進む。研究は進まない。</li>
<li>グレンダのオリジナル作者さんからグレンダぬいぐるみについて<a href="https://twitter.com/reneefrench/status/9174639444">問い合わせ</a>が来る</li>
<li>就活、なんとか滑り込む。</li>
<li>はじめてのコミケサークル参加、修論ほっぽって原稿書く。直前まで仕上がらず大量のカフェインドーピングの結果、カフェ中の恐ろしさをカラダで学ぶ。</li>
</ul>
</li>
<li>2011

<ul>
<li>震災当日、風邪を言い訳にゼミサボって寝てたら頭上から大量のガジェットが降り注ぐ。</li>
<li>震災を言い訳に研究の引き継ぎをろくにやらずに逃亡そして修了。研究成果のOSS化ェ&hellip;.</li>
<li>某社で社畜はじめた。スーツ生活つらい。同期の面白い連中を知る(akiray03先生, hizumiさん, suu_gさん, smison先生 e.t.c)</li>
<li>配属告知の当日に夢で、まったく希望してない部署を告げられ13Fの窓から飛び降りるところで目が覚める。</li>
<li>分散システムっぽい研究の反動で、OSとかネットワークスタック開発っぽいことやるお仕事をすることになった。</li>
<li>おちんぎんでお寿司を食べる快楽に目覚める</li>
</ul>
</li>
<li>2012

<ul>
<li>社畜2年目</li>
<li>身近に識者がいない無線LANのお仕事が降ってきて、無線沼に嵌まり始める。</li>
<li>新製品開発でふぃーばーしはじめる</li>
<li>そのせいで気が狂ったのか、生ハムの原木を買ってしまう。もう二度と買わない。</li>
<li>お仕事で温泉ハッカソンに行く</li>
</ul>
</li>
<li>2013

<ul>
<li>新製品リリース判定前日、お仕事で初めて徹夜仕事をキメる。作業中意識を失ってお花畑でスキップする白昼夢を見、ｱﾊﾊﾊﾊと笑ってるところで目が覚め我に帰る。</li>
<li>結局解決せず、自分の担当分のトラブルでリリース延期をやらかしかけるも、帰って寝てる間に妖精さん(先輩)が問題箇所見つけてくれたおかげでGOサインがでる。</li>
<li>学生の卒業旅行に混じって奥日光に行く</li>
<li>社畜3年目、研究室の先輩と同期が後輩になる</li>
<li>某BSD系のハッカソンに参加＠トロントするも特に成果がないままおめおめ帰ってくる</li>
<li>反省してヒゲを伸ばし始める</li>
</ul>
</li>
<li>2014

<ul>
<li>社畜4年目、飯田橋へのマイグレーション</li>
<li>先輩の導きで「イベント無線LAN構築・運用」というアートと快楽を教え込まれる。が、その先輩はすぐに旅立ってしまった。</li>
<li>無線LANパケットキャプチャ沼に嵌まる</li>
<li>2回のイベント無線LAN(2014年内)</li>
</ul>
</li>
<li>2015

<ul>
<li>社怪人5年目、職場に新しい無線LANフレンズができる</li>
<li>CONBUにプロジェクトメンバとして初参加する＠YAPC::Asia 2015</li>
<li>唆されてハムやら陸特やらの勉強を始める</li>
<li>CONBUコアメンバにhiringされる。テレカンでもF2Fでも沈黙を貫く仕事をしないコアメンバになる。</li>
<li>葉巻と西洋剃刀にハマる</li>
<li>先輩後輩知り合い同期が大量に旅立ってなんとなく焦り始める。でも焦っても特に何もないことに気づいて落ち着きを取り戻す。</li>
<li>8回のイベント無線LAN構築・運用(2015年内)</li>
</ul>
</li>
<li>2016

<ul>
<li>初めての3週間連続勤務、残業3桁</li>
<li>社壊人6年目、新製品開発で燃え尽き気味になり以降やりたいことをやりたいようにやりはじめる。</li>
<li>はじめてのJANOGと沖縄、まさかの懇親会申し込みておくれ</li>
<li>夏C90で、はじめての印刷所利用(オンデマンド印刷)</li>
<li>先輩後輩知り合いが大量に結婚しはじめてなんとなく焦り始める。でも焦っても特に(同上)。</li>
<li>冬C91で、コミケサークル参加たぶん10回目、10冊目の薄い本</li>
<li>20代最後の年が漫然と流れゆく。「而立〜さよなら20代〜」のそれぞれの曲がさらに心に突き刺さる。</li>
<li>8回のイベント無線LAN(2016年内)</li>
</ul>
</li>
<li>2017

<ul>
<li>自分が何のエンジニアなのか悩み始める。でも悩んでも特に(同上)。</li>
<li>3/19 ああ、もう戻れない</li>
</ul>
</li>
</ul>


<p>三十路初心者を慰めてやろうという心ある方々の援助を募集しております＞ <a href="http://amzn.asia/3Ck9iQ8">ほしいものリスト</a></p>

<p>まだ20代の人はこれを聴くといいよ＞ <a href="http://goodbye-twenties.com/">而立〜さよなら20代〜</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コミケ91 1日目の無線LAN模様]]></title>
    <link href="http://enukane.github.io/blog/2017/01/11/c91-wifi/"/>
    <updated>2017-01-11T23:59:31+09:00</updated>
    <id>http://enukane.github.io/blog/2017/01/11/c91-wifi</id>
    <content type="html"><![CDATA[<p>だんだんと自分にしか意味のない指標&amp;グラフが増えすぎてて大変に読みづらいものになったけど、
いつものやつ書きました。「C91 Wi-Fi 〜ららら、(無線的に)素敵なComiket Space〜」。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/70907756 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>

<p>今回は、また自スペースが西1に戻ってきました。
そのため<a href="http://www.slideshare.net/enukane/c90-wifi-comiket-space">前回のC90 (西3だった)</a>とはまた様子が異なっています。
比較のために、次はできれば東に割り当てられたいですね。</p>

<p>今回は新要素として以下を追加しています。</p>

<ul>
<li>&ldquo;18.1 AP滞在時間のヒストグラム(10分以上のみ抽出)&rdquo;

<ul>
<li>APが見えていた時間をプロット</li>
<li>大半がヒットアンドランで0秒付近に張り付く傾向があるので、一定時間以上に絞って長期傾向を見る</li>
</ul>
</li>
<li>&ldquo;19.1 端末の滞在時間ヒストグラム(10分以上のみ抽出)&rdquo;

<ul>
<li>同上</li>
</ul>
</li>
<li>&ldquo;20. Data &amp; BlockAckフレームの収集数/s&rdquo;

<ul>
<li>&ldquo;14. 正常フレームの収集数/s&rdquo; のうち、さらに Dataフレームと Block Ackフレームに絞り込み</li>
<li>サンプリングが妥当であれば、このFPSがデータ送信の活発さの指標になりうる</li>
<li>ただし長さは考慮されない</li>
<li>ただし高レートすぎて見えないフレームは Block Ack でしか考慮されない

<ul>
<li>Block Ack またはその他の要素から、これらのフレームを復元する方法が必要</li>
</ul>
</li>
</ul>
</li>
<li>&ldquo;21. FCS OKフレームの時間的占有率&rdquo;

<ul>
<li>毎回1秒キャプチャしてた間に見つけたFCS good なフレームの Duration (秒) と 1秒内の割合の推移をプロット</li>
<li>「13. チャネル使用率」のうち、どれくらいが有効に使われていたかを判断できるはず

<ul>
<li>正確な一致には FCS bad なフレームの考慮による検証が必要 (TODO)</li>
</ul>
</li>
<li>チャネル使用率との差分が、無駄になった時間

<ul>
<li>このDurationのうち、データフレームに使えた時間と長さを考慮してチャネル使用率との対比を取ると、有効に使えた度合いが取れる？</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>FCS badなフレームのDurationがどれくらい正確なのかは今後要検証。
これが正確にとれており、Durationの合計がチャネル使用率と合致するならサンプリング精度が良いという指標になりそう。</p>

<p>また、FCS badなデュレーションと
これと、プリアンブルだけの情報が上手く取れると高レートなフレームの流れが</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017-01-11 コミケ91で、ハニーポット無線LANアクセスポイント立てたお話]]></title>
    <link href="http://enukane.github.io/blog/2017/01/11/hap/"/>
    <updated>2017-01-11T09:35:12+09:00</updated>
    <id>http://enukane.github.io/blog/2017/01/11/hap</id>
    <content type="html"><![CDATA[<p>{:TOC}</p>

<h1>概要</h1>

<p>今冬のコミックマーケット91にて、1日目 西1 み-18a &ldquo;glenda9&rdquo; で出展するにあたって
自スペースにハニーポット無線LANアクセスポイント(以下 ハニポAP)を立てました。
ここではその提供方法、構成および結果について記述します。</p>

<p>この手のイベントでは「応仁のLAN」といった面白SSIDを告知する遊びをする人がいます。
これに倣って自分のスペース名をSSIDで告知というのも可能ですが、
せっかくAPを立てるからにはもうすこし遊びを入れたいところです。</p>

<p>もうちょっと真面目な目的としては各種プラットフォームが備えているキャプティブポータル検知の実装を見てみたい、
この手のイベントでいかにもセキュリティの甘そうなAPをおいておくと
どれくらいの人が引っかかるのか見てみたいといったモチベーションがありました。</p>

<p>ここではAPとキャプティブポータルを組み合わせてイベント環境にデプロイし、
クライアントの通信を特定コンテンツにねじ曲げて以下の様なページを強制表示するようにしつつ各種ログを収集しました。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/captive-webui.png" width="350"></p>

<!---
# 目的

- APを用いた宣伝、お客さんを釣る
- どれくらいの人がハニポAPに引っかかるかをみる
- キャプティブポータル検知の仕組みを実際に引っかけて調べる

先にも述べたように単純にSSIDを「み-18a glenda9」などとして宣伝する方法もあります。
が、一般的なハニーポットとしては"Free Wi-Fi"といったそれらしいSSIDをつけておきたいところです。
威力業務妨害扱いにもなりそうなので、今回はやりませんでしたが他のFree Wi-Fiで用いている
SSIDをつけるという案もあります。
コミケの環境では、PCというよりスマホ・タブレットが主として用いられると思われ
またさらにいえばWi-Fiよりは3G/LTEを用いるであろうと思われるためあまり引っかかる人はいなさそうです。
しかし、無線LANがデフォルト有効かつ暗号化なしSSIDに自動的に接続しに行くデバイスや、
テザリング接続時にたまたまフリーっぽいSSIDを見つけて手動接続するユーザはいると思われます。
これらをターゲットとしてSSIDを告知します。

各種プラットフォームではそれぞれ [HOW AUTOMATIC DETECTION OF CAPTIVE PORTAL WORKS](https://success.tanaza.com/s/article/How-Automatic-Detection-of-Captive-Portal-works)にあるようなキャプティブポータル検知の仕組みを導入しています。
これを実際に調べるとともに、この際に発生する接続からアドレス取得、名前解決からHTTPアクセスまでの
一連の流れから読み取れることを探ってみます。

-->


<h1>ハニーポットAPの見え方</h1>

<p>ハニポAPのSSIDとして「  Not Free Wi-Fi」を告知するようにしました。
SSIDの先頭に半角スペースを2つ入れることで、
「0000」で始まるものやアンダースコアから始まるSSIDよりも上位に出現するようにしています。
2.4GHz帯と5GHz帯でSSIDを分けており、
下記の様に2.4GHz帯側には&#8221;-g&#8221;とのサフィクスをつけました。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/not-free-wifi-ssid_hide.png" width="300"></p>

<!--- 引っかかると --->


<p>このSSIDに接続すると、
大抵のプラットフォームに入っているキャプティブポータル検知の仕組みによりスプラッシュページが表示されます。
Androidのスマホで見ると、ハニーポットAPのSSIDを選択後しばらくすると以下の画面がポップアップします。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/sp-captive.jpg" width="300"></p>

<h1>ハニーポットAPの機材について</h1>

<h2>AP本体</h2>

<p>ハニーポットAPには、Buffalo WZR-HP-AG300H に OpenWRT を載せたものを用いました。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/hap.png" width="300"></p>

<p>C90で同様の試みをしたときは Raspberry Pi と USB Wi-Fi アダプタを用いていました(以下)。
その際は、混雑している2.4GHz帯でしか運用せず出力も弱めであったため、
あまり接続数を稼げませんでした。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/old-hap.png" width="300"></p>

<p>WZR-HP-AG300H は家庭用APとしてそれなりにきちんとしたアンテナを備え、
2.4GHz/5GHz帯の同時運用も可能です。
OpenWRT を導入できカスタマイズ性も高いため今回はこれを用いてハニーポットAPを実装しました。</p>

<h2>APへの電源供給</h2>

<p>WZR-HP-AG300Hの消費電力は最大13.2Wであり、付属のACアダプタは定格 12V/2.0A となっています。
通常のUSBモバイルバッテリーではここまでの電圧は出せないため、
簡単にやるにはACが取れる電源などの大きめのバッテリーを用意する必要があります。
これらは価格も高い上にでかいし重いしで大変に邪魔なので、
ここでは以下のページに従ってQuickCharge 2.0対応のバッテリー(今回は AUKEY PB-T4 を利用)から12Vを引き出すようにしました。</p>

<ul>
<li><a href="https://lowreal.net/2015/12/07/3">Quick Charge 2.0 電源から 12V とる</a></li>
</ul>


<p>なお上記ページのコードでは上手く動かなかったため、
挿入するディレイの長さを変更して運用しています。コードは下記をご参照ください。</p>

<ul>
<li><a href="https://gist.github.com/enukane/26f3af8938ed2a775296f472b1c71168">https://gist.github.com/enukane/26f3af8938ed2a775296f472b1c71168</a></li>
</ul>


<p>後述するとおり 10000mAh のバッテリーで6時間程度は運用できました。
基板に起こすのは間に合わなかったので Arduino そのままとブレッドボードで動かしていました。
たまに結線が外れてリブートしてたり。。。。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/hap-power.jpg" width="350"></p>

<h2>簡易キャプティブポータル on OpenWRT</h2>

<p>簡易キャプティブポータル実現のため、以下の細工を入れています。</p>

<ul>
<li>管理用WebUIはWAN側インタフェースでのみ受付</li>
<li>LAN から WAN への通信を全て遮断</li>
<li>DHCPで配布するDNSサーバを自身(10.0.0.1)に設定</li>
<li>DNSサーバにて全てのAレコードのクエリに対して自身のアドレスで応答</li>
<li>LAN側(キャプティブポータル提供側)では Apache で HTTP アクセスを待ち受け

<ul>
<li>全てのHTTPアクセスを /index.html に置き換え</li>
</ul>
</li>
</ul>


<p>dnsmasqのレコード上書き機能を用いて全てのホスト名に対して自分のアドレスを返すことで、
アクセスを自身にねじ曲げます。
現状 /etc/init.d/dnsmasq にて dnsmasq コマンドの引数に以下を
加えてこれを実現しています。本来的には /etc/config/dhcp に list address の
行を追加すれば動くはずですが、上手く動作しないようでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--address='/#/10.0.0.1'</span></code></pre></td></tr></table></div></figure>


<p>キャプティブポータルとして HTTP アクセスを受け付ける側には Apache を用います。
上記 DNS の細工により、HTTP アクセスはこちらに向きますがパスは不定のためリダイレクト等が必要です。
OpenWRT デフォルトの apache では mod_rewrite が使えないため、
AliasMatch でこれを実現します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AliasMatch ^/.+$ /root/www/index.html
</span><span class='line'>&lt;Directory "/root/www"&gt;
</span><span class='line'>  Options Indexes FollowSymLinks SymLinksIfOwnerMatch
</span><span class='line'>  AllowOverride None
</span><span class='line'>  Order allow,deny
</span><span class='line'>  Allow from all
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<p>これにより全てのHTTP アクセスに対して /index.html の中見を返すようになります。
このHTMLファイル中に、先に挙げたWebページを詰め込んでおきます。</p>

<h2>設置場所</h2>

<p>ハニーポットAP は コミックマーケット91 1日目 (2016/12/29) の西ホール1、
み-18a の机の上に設置しました。西ホールのだいたい赤丸の位置に自スペースがあります。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/map.png" width="200"></p>

<p><img src="http://enukane.github.io/images/2017-01-11/my-space_cap.png"></p>

<p>机の上の可能な限り高いところに、
設置しましたができればポスタースタンドなどにくくりつけてより高さを稼ぎたいところではあります。</p>

<h1>提供結果</h1>

<p>ハニーポットAPの提供は 12/29 09:05:29 から 15:09:15 までの期間、6時間3分46秒に渡って実施しました。</p>

<h2>無線LAN</h2>

<p>接続しにきたユニーククライアント数は 62 台でした。
この値は、ログ中の接続(Authentication)イベントに紐付くMACアドレスのユニークアドレス数を計上したものです。
なお、いくつかの端末は Authentication Response に対してACKを返せていないため実際にAssociationまで至ったクライアントは
56 台です。</p>

<p>MACアドレスのOUIからベンダ名を引き、分布を図示した物が以下になります。
全体でベンダは10種類でした。コミケという利用環境上、大半がスマートフォンであると推測できます。
この中でも大半が Apple (おそらくiPhone/iPad) と Huawei で占められています。
&ldquo;IEEE Registration Authority&#8221;という名前になっているものがありますが、
一部のスマホでは自社のベンダ名を登録していないためこうなっているようです。</p>

<p><img src="http://enukane.github.io/images/2017-01-11/sta_oui_histogram.png" alt="sta-oui-histogram" /></p>

<p>ハニーポットAPでは2.4/5GHz帯でそれぞれ別のSSIDを告知しています。
以下は帯域毎のユニーク接続クライアント数の分布です。
2.4GHz帯は18端末、5GHz帯は42端末と後者に寄っています。
接続イベント数上も2.4GHz帯は 33回、5GHz帯は 63回となっており、
5GHz帯側に接続しにくることが多かったようです。</p>

<p><img src="http://enukane.github.io/images/2017-01-11/sta_per_band.png" alt="sta-per-band" /></p>

<p>以下は端末の接続持続時間のヒストグラムです。端末が接続してから切断するまでの期間(秒)と発生回数をプロットしています。
10秒単位で丸めています。大半は1分以内ですが、最長で1030秒(17分程度)の場合もあったようです。
300秒にて山がありますが、これは5分毎に走るGTKの更新失敗やらのタイムアウトに起因するものと推測しています。
移動が激しいコミケのような環境では、接続後そのまま明示的に切断せずにクライアントが離脱することが多いため、
このような傾向があるものと考えています。</p>

<p><img src="http://enukane.github.io/images/2017-01-11/sta_dur_histogram.png" alt="sta-dur-histogram" /></p>

<h2>DHCP</h2>

<p>DHCPサーバがアドレスを割り当てた端末は 50 台でした。
先に述べたとおり、Assocした端末数は56端末であるため6台はDHCPによるアドレス取得まで至らなかったようです。</p>

<p>割り当てたアドレスは10.0.0.0/8から 45 アドレス分でした。
dnsmasqは比較的割り当てアドレスをばらけさせる傾向にありますが、うち5アドレスは重複して配布しています。
デフォルトでは DHCP Lease Time が 1h であるため再利用されたようです。</p>

<p>DHCPクライアントは DHCP Requestのオプションとしてホスト名を付与する場合があります。
このホスト名のユニーク数は今回 39 種でした。
ホスト名文字列として何が付与されるかは端末により異なります。
iOS系だと<strong>〜のiPhone</strong>といった形式、
androidだと<strong>android-XXXXXXXX</strong>といった乱数要素を含んだ文字列を用いる場合があります。
詳細は伏せますが、今回は以下の様な文字列が検出されました。</p>

<ul>
<li>iPhone/iPod Touchと推測されるもの(&ldquo;iphone&rdquo;, &ldquo;ipod&#8221;が含まれる): 14 個</li>
<li>iPadと推測されるもの(&ldquo;ipad&#8221;が含まれる): 5 個</li>
<li>androidと推測されるもの

<ul>
<li>&ldquo;android-XXXXX&rdquo; の形式: 12 個</li>
<li>機種名: 4 個</li>
</ul>
</li>
<li>不明(端末を推測可能な文字列を含まない): 4 個</li>
</ul>


<p>上記に挙げたとおり android にてホスト名に機種名を用いている例が4つありました。
以下の通り全てHuawei製品であり、このベンダでは一律このポリシーを採っているのかもしれません。</p>

<ul>
<li>HUAWEI_P9</li>
<li>HUAWEI_P9_lite</li>
<li>HUAWEI_Mate_9</li>
<li>Honor_8</li>
</ul>


<h2>DNS クエリ</h2>

<p>ハニポAPで動作しているDNSサーバでは期間中に合計556回 DNS クエリを受け取っており、
この対象レコードの内訳は以下の通りです。</p>

<ul>
<li>Aレコード: 504回</li>
<li>AAAAレコード: 50回</li>
<li>PTRレコード: 2回</li>
</ul>


<p>合計 123 個の名前にたいしてクエリを受信しました。
以下はその中で回数の多いほうからトップ10をプロットしたグラフです。
<em>connectivitycheck.gstatic.com</em> や <em>captive.apple.com</em>
のようにキャプティブポータル検知に用いられるホストが多く現れています。
またプッシュ通知を司るホスト向けの通信が多いことも伺えます。</p>

<p><img src="http://enukane.github.io/images/2017-01-11/query_top10.png" alt="query-top10" /></p>

<p>AAAA レコードへのクエリのみを抽出すると、以下の5ホストに対してのクエリを受信していました。
IPv6はサポートしていないため、一律NODATAを返しています。</p>

<ul>
<li>connectivitycheck.gstatic.com</li>
<li>clients3.google.com</li>
<li>mobile.pipe.aria.microsoft.com</li>
<li>a.config.skype.com</li>
<li>b.config.skype.com</li>
</ul>


<h2>キャプティブポータル</h2>

<p>名前でねじ曲げられた先のキャプティブポータルに対するアクセスは以下のようになっています。</p>

<ul>
<li>HTTPアクセス回数: 246 回</li>
<li>HTTPアクセスのユニーク送信元アドレス数: 43 個

<ul>
<li>うち5つのアドレスは重複割り当ての可能性あり</li>
</ul>
</li>
<li>HTTPアクセス対象ホストのユニーク数: 21 ホスト

<ul>
<li>先のクエリ対象ホストが123だったのに比べるとだいぶ少なめ</li>
<li>HTTPのみ対象のため？</li>
</ul>
</li>
</ul>


<p>以下はアクセス数の多いほうから、ホスト名のトップ10をプロットしたグラフです。
やはりキャプティブポータル検知用ホストへのアクセスが多めです。</p>

<p><img src="http://enukane.github.io/images/2017-01-11/http_host_histogram.png" alt="http-host-histogram" /></p>

<p>アクセス数のヒストグラムをURL全体に拡張し、そのトップ10を並べたものを以下に記載します。
全体では31個のURLに対するアクセスを記録しています。</p>

<p><img src="http://enukane.github.io/images/2017-01-11/http_url_histogram.png" alt="http-url-histogram" /></p>

<p>通常のWebアクセスらしきものや、Simejiの通信なども見えますが
大多数はキャプティブポータル検知用のURLに対するアクセスです。</p>

<ul>
<li>Apple系

<ul>
<li><a href="http://captive.apple.com/hotspot-detect.html">http://captive.apple.com/hotspot-detect.html</a></li>
<li><a href="http://captive.apple.com/XXXXXXXXXX/YYYYYYYYYYY/ZZZZZZZZZZZZZZZZZZZZZ.html">http://captive.apple.com/XXXXXXXXXX/YYYYYYYYYYY/ZZZZZZZZZZZZZZZZZZZZZ.html</a>

<ul>
<li>captive.apple.com はどのパスでも固定の応答が返る模様</li>
</ul>
</li>
</ul>
</li>
<li>Android系

<ul>
<li><a href="http://connectivitycheck.gstatic.com/generate_204">http://connectivitycheck.gstatic.com/generate_204</a></li>
<li><a href="http://clients3.google.com/generate_204">http://clients3.google.com/generate_204</a></li>
<li><a href="http://connectivitycheck.android.com/generate_204">http://connectivitycheck.android.com/generate_204</a></li>
<li><a href="http://10.0.0.1/generate_204">http://10.0.0.1/generate_204</a></li>
</ul>
</li>
</ul>


<p>今回検出したアクセス時のUser-Agentは大別すると以下の4種類に分けられそれぞれ一定の役割のもと
用いられているようです。</p>

<ul>
<li>CaptiveNetworkSupport系</li>
<li>Dalvik系</li>
<li>WebKit系</li>
<li>その他</li>
</ul>


<p>CaptivePortalSupportは主に captive.apple.com 向けの通信に使われていました。
ただしこれだけ、と言うわけではなく以下の様に CaptiveNetworkSupport系とMozilla系のUser-Agentを交互に利用しているようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10.0.0.73 GET /hotspot-detect.html FryingPan.lan captive.apple.com "CaptiveNetworkSupport-325.10.1 wispr" 200
</span><span class='line'>10.0.0.73 GET /hotspot-detect.html FryingPan.lan captive.apple.com "Mozilla/5.0 (iPhone; CPU iPhone OS 9_3_3 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13G34" 200</span></code></pre></td></tr></table></div></figure>


<p>CaptiveNetworkSupportを含むUser-Agent文字列には以下のパターンが存在していました。
WISPrの仕様上、User-Agent文字列は &ldquo;WISPR!任意の文字列&rdquo; ということになっているので
CaptiveNetworkSupportの文字列の出典および後続する数値列の意味は不明です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CaptiveNetworkSupport-346 wispr
</span><span class='line'>CaptiveNetworkSupport-325.10.1 wispr
</span><span class='line'>CaptiveNetworkSupport-277.10.5 wispr
</span><span class='line'>CaptiveNetworkSupport-306.20.1 wispr</span></code></pre></td></tr></table></div></figure>


<p>Android向けであると推測される connectivitycheck.gstatic.com等へのアクセスは主に Dalvik系 User-Agent から
なされています。が、Apple系とおなじくMozilla系Uer-Agentでのアクセスも確認されています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10.0.0.13 GET /generate_204 FryingPan.lan connectivitycheck.gstatic.com "Dalvik/2.1.0 (Linux; U; Android 7.0; Nexus 6 Build/NBD91P)" 200
</span><span class='line'>10.0.0.13 GET /generate_204 FryingPan.lan connectivitycheck.gstatic.com "Mozilla/5.0 (Linux; Android 7.0; Nexus 6 Build/NBD91P; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36" 200</span></code></pre></td></tr></table></div></figure>




<!---

- "KT/6.0.1 An/4.4.2 ko"
  - アプリ内の広告表示アクセスっぽい
- なし
  - simejiっぽい
- "iPad5,3/9.3.3 (13G34)"
  - iOSのPush通知関連？
- "dianxinos-user-agent"
  - Baidu系っぽい
- "LINE/2016.1114.1637 CFNetwork/758.5.3 Darwin/15.6.0"
  - LINE?
- "DXCoreService"
- "com.baidujp.Simeji.SimejiKB/243 CFNetwork/758.5.3 Darwin/15.6.0"
  - Simeji
- "Alamofire"
  - Simejiっぽい

--->


<h1>まとめ</h1>

<ul>
<li>コミケ91 1日目にてハニーポットAPを動かしてみた</li>
<li>62人のお客さんが釣れた

<ul>
<li>うち43人程度にはキャプティブWebページを見てもらえた模様</li>
<li>前回 (C90, 10人程度) に比べてだいぶアクセスしてもらえた</li>
</ul>
</li>
<li>キャプティブポータル検知をしてるらしい動きが見れた

<ul>
<li>iphone &amp; android がメイン?</li>
<li>PC系は今回はほぼいないのもあって確認できず</li>
<li>1台だけ Ubuntu マシンがいたが、キャプティブ検知っぽい動作はしていなかった</li>
</ul>
</li>
</ul>


<h1>Future Work</h1>

<p>お次やるとしたらこう工夫しようというToDoリスト</p>

<ul>
<li>DHCP リースタイムの延長

<ul>
<li>1日程度の方が良さそう</li>
</ul>
</li>
<li>運用時の可視化方法

<ul>
<li>本当は ruby 動かして管理用 WebUI が見れるはずだったけど、上手く動かなかった</li>
</ul>
</li>
<li>自律的な時刻同期

<ul>
<li>会期中一回落ちて時刻がおかしくなった</li>
<li>3G/LTE で NTP ?</li>
</ul>
</li>
<li>電源モジュールの基板化

<ul>
<li>ブレッドボードはつらい</li>
</ul>
</li>
<li>DHCP Fingerprinting で遊びたい</li>
<li>別の場所での運用

<ul>
<li>PC が多そうな環境で見てみたい</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今年やりたいこと＠2017]]></title>
    <link href="http://enukane.github.io/blog/2017/01/01/2017-01-01-hofu/"/>
    <updated>2017-01-01T00:06:53+09:00</updated>
    <id>http://enukane.github.io/blog/2017/01/01/2017-01-01-hofu</id>
    <content type="html"><![CDATA[<h2>2016年やれたこと</h2>

<ul>
<li>新年初日からておくれた(初日の出号のチケットが無駄に…)</li>
<li>メガネっ漢はじめました。本格的に目がだめだ。</li>
<li>生まれ年のウィスキー買った(グレンタレット 1986, 27年物)</li>
<li>同人誌2冊新刊だせた(Plan9 と 802.11それぞれ)

<ul>
<li>頒布同人誌、昨年比で併せて2.5倍ぐらいの数刷った、個人的にはかなり冒険な数だけどなんとか捌けた。感謝。</li>
<li>念願の、印刷所に印刷お願いした同人誌だせた。仕上がりとっても綺麗。</li>
</ul>
</li>
<li>一陸特とった。4.9Ghz帯で遊ぶためだったのにデバイスはまだない。</li>
<li>ジョギングはじめた(頻度は低い)</li>
<li>イベント向け無線LAN構築: 8件

<ul>
<li>主担当1件、お手伝い7件。基本的に無線LANの運用監視中心。</li>
</ul>
</li>
<li>はじめてのJANOG参加と沖縄</li>
<li>島

<ul>
<li>八丈島と沖縄いった</li>
</ul>
</li>
<li>葉巻始めました</li>
<li>西洋剃刀で髭剃る趣味始めました</li>
</ul>


<h2>2017年にやりたいこと</h2>

<p>追記中</p>

<ul>
<li>厳かに而立を迎える＠3月</li>
<li>言語系

<ul>
<li>仏検(2017/06, 4or3級)とる</li>
<li>独検(2017/06/25, 4or3級)とる</li>
<li>漢語水平考試(12/03, 2級)とる</li>
<li>アイスランド語勉強する</li>
<li>仏語で「Le Mythe de Sisyphe」読み切る</li>
</ul>
</li>
<li>一陸技(秋)とる</li>
<li>CCNA WIFUNDとる、たぶんCCENTが事前に必要っぽい</li>
<li>IEEE WCETうけたい(一陸技が必要で、受験料55k、つらい)</li>
<li>無線LAN利用状況監視の新しい方向性を作る</li>
<li>作る物の半分をgolangにしてみる (from ruby)</li>
<li>CAD覚える

<ul>
<li>3DプリンタでPiZero版キャプチャ箱のケースつくってみる</li>
<li>基板を起こしてみる(quickcharge用)</li>
</ul>
</li>
<li>ネットワークアナライザの使い方を覚える</li>
<li>FPGAとRFフロントエンドでなにかやりたい(ぼくの考えたさいきょーのキャプチャ箱とか)</li>
<li>IndesignまたはScribusへのｳｽｲﾎﾝ作成環境の移行(vivliostyleでもいいかも): acrobat proからの脱却</li>
<li>HarveyOS入門まとめる。今までの内容盛り込みつつ。</li>
<li>今年こそ「Plan9のブートプロセスを見る」の同人誌を作る</li>
<li>オペラ「ニーベルングの指環」第三夜見にいく@三月</li>
<li>片方の系の財政健全化</li>
<li>原付免許とる</li>
<li>船舶免許取りたい(2級?)</li>
<li>生活用の和服一式ほしい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[システム系論文紹介 Advent Calendar 2016 - 時刻同期話]]></title>
    <link href="http://enukane.github.io/blog/2016/12/04/2016-system-paper-adv-calendar/"/>
    <updated>2016-12-04T10:58:41+09:00</updated>
    <id>http://enukane.github.io/blog/2016/12/04/2016-system-paper-adv-calendar</id>
    <content type="html"><![CDATA[<h1>論文紹介: “Globally Synchronized Time via Datacenter Networks”</h1>

<p>本記事は システム系論文紹介 Advent Calendar 2016の4日目, 12/04 のための記事です.</p>

<h2>はじめに</h2>

<p>4日目 n_kane の担当分では今年の ACM SIGCOMM 2016 より時刻同期話ということで以下の論文を取り上げます.</p>

<ul>
<li>タイトル: Globally Synchronized Time via Datacenter Networks

<ul>
<li>著者 Ki Suh Lee et al. (Cornell University)</li>
<li>出展: ACM SIGCOMM 2016, Session 5, Datacenters 1</li>
<li><a href="http://dl.acm.org/authorize?N19282">論文へのリンク</a></li>
<li><a href="http://conferences.sigcomm.org/sigcomm/2016/files/program/sigcomm/Session05-Paper01-Global-Ki.pdf">スライド資料へのリンク</a></li>
</ul>
</li>
</ul>


<p>セッション自体の括りはデータセンター, 内容としても DC 環境での分散システム向けの時刻同期をターゲットにしています. このあたりは個人的な興味ではなかったのですが, 最近時刻同期関連(GPS, NTP, PTP 等等)を勉強しようと思っておりました. その矢先にこの論文を見つけたため今回取り上げることにしました.</p>

<h2>対象としている問題</h2>

<p>NTPやPTPをベースにした時刻同期はもはや無くてはならないプロトコルですが, ナノ秒レベルでの時刻同期が必要な場合, 精度に非決定性があるというのが本論文で取り上げ解決策を提示している問題です.</p>

<p>NTPはマイクロ〜ミリ秒, PTPはサブナノ秒の精度で時刻(クロック)同期が可能なプロトコルです. これらのプロトコルでは細かい差異はあるにせよ共に, 2台の計算機の間でRTTを測定し これをもとに一方向遅延(OWD One Way Delay)と相互のクロックの差(Offset)を算出, 時刻やクロックを合わせ, クロック発振器がそれを維持し定期的に再計測を行うという方法で 同期を行います.</p>

<p>この流れの RTT 計測, クロックの維持, 再計測に非決定的な誤差を生む要因がある, と本論文では主張しています. NTP, PTPはともに UDP ベースのプロトコルでありネットワーク帯域を消費しているため 間の経路の経路, 輻輳, 機器類のバッファリングや送受信のスケジューリングによる影響を受けます. ベースとなるRTT計測は往路復路が同じであることを前提としていますが, これが常に満たされるとは限りません. クロックの維持も誤差要因となります. 原子時計と異なり一般的なx86の計算機に積まれたクロックはそれぞれに 一定の誤差を生じながら動くため, 時が進むにつれズレが発生します. この補正のためには頻繁な再計測・再同期を行う必要がありますが, あまりに同期対象や頻度が多い場合に時刻同期に帯域を取られてしまうといった問題があります.</p>

<h2>解決策</h2>

<p>この論文では時刻同期を Ethernet で直結された2台の計算機間において PHY レイヤで行うことで 前節の問題を解決しようとしています. キモはEthernet で接続された計算機間では「既にNIC同士のクロックが同期されている」という点です. Figure 2 にクロックドメインについての図が掲載されていますが, Ethernetのフレームを送受信するにあたって送信側と受信側は実質同じ回路になっており 送信側のクロックに併せて動作をしていると考えることができます.</p>

<p>このNICレベルでのクロック同期を, システムレベルでのクロック同期に利用するというのが 本論文で提示する手法になっています. この手法を用いたクロック同期として DTP (Datacenter Time Protocol) とそれを実装した 10Gbit Ethernet PHY を取り上げています.</p>

<h2>ポイント</h2>

<p>この論文で DTP の推しポイントとして主張されているのは以下の3点です.</p>

<ol>
<li>802.3プロトコルのハックによるオーバーヘッド実質0のプロトコル</li>
<li>ナノ秒レベルでの同期で誤差が予測可能</li>
<li>スイッチを用いたスケーラブルなクロック同期が可能</li>
</ol>


<h3>1. オーバーヘッド実質0のプロトコル</h3>

<p>NTPやPTPと同じく DTP も RTT の計測からの一方向遅延の算出を基本としています. 最終的なクロック合わせをオフセットの計算ではなく「一番速いやつに合わせる」 というアルゴリズムの違いはありますが, やっていることはあまり替わりません.</p>

<p>大きな違いは先にも述べたとおり DTP では Ethernet の PHY レイヤで伝送を行う点です. 具体的には PHY の PCS (Protocol Control Sublayer) のスクランブル/デスクランブル化の直前に, 処理を差し込むことでこのレイヤで伝送されているコントロールブロックに載せて DTPのデータを送受信します.</p>

<p>このレイヤでは実際のデータ(Ethernetフレーム)転送の間にリンク維持やエラー通知を目的とした コントロールブロックの送受信が行われています. このうちDTPが有効なリンクでは Idle キャラクタの部分に DTP のデータを載せ送受信することとしています. PCSの上位レイヤには Idle キャラクタを正しく戻してやることで, Ethernetのデータ転送の帯域を実質的に 使うこと無くDTPのやりとりを行うことが可能となっています.</p>

<p>この方法の利点として Ethernet の伝送を邪魔しないこと, 高頻度にクロック同期が可能であることが挙げられます. Idleキャラクタのコントロールブロックは Ethernet フレームが流れる時はその前後に, 何も流れていない時は継続的に差し込まれるため Ethernet の帯域を消費しません. いわゆる10GbE, 100GbEといった速度はこの制御系の通信を除いたものであるためです. このコントロールブロックは輻輳している場合でも 1280〜7680ns の間隔で挿入が可能です. ワーストケースでも数usの周期でクロック同期を回すことが可能であるため, 精度の維持</p>

<h3>2. ナノ秒レベルで誤差予測可能なクロック同期</h3>

<p>DTP では同期誤差が「4T」に決定的(deterministic)に収まるように設計されています. ここで T は最も速いクロックの周期であり, 10Gbit Ethernetの場合は T = 1 / f = 1 / 156.25MHz = 6.4 nsとなるため, 25.6ns内に収まることになります.</p>

<p>この誤差予測が可能なのは PHY レイヤで同期しているためソフトウェアスタックが介在しないこと, 直結されているため間に何も入らないことにより誤差導入要素が(ほぼ)無いためです. 遅延要因としてはケーブル上の伝搬遅延やエンドポイントでの処理遅延が存在しますが これらは動的には変化しないと仮定を置くことができ, 事前に予測が可能です 一部 Clock Domaing Crossing, 相手のTXに乗ったクロックと自分のTXのクロック間の 遅延を解決するのにランダム性のある誤差が生じますがこれもどちらか速いほうの1クロック内に 収まるということのようです.</p>

<p>複数のPHYを計算機に挿すことでPTPのBoundary Clockのようにネットワークを跨がって時刻を 同期することも可能です. この場合でも「4TD + 8T」に誤差が収まるとしています. ここで D はホップ数を挿します. スモールワールド現象に則って6ホップ経由すればデータセンターの 全ての計算機にリーチできると仮定すると, どの計算機の間でも 153.6ns 以内に誤差が収まる クロック同期が可能となります.</p>

<h3>3. スケーラブルな時刻同期</h3>

<p>DTP は Ethernet が直結された2台間で行うことが基本ですが, スイッチがDTPをサポートすることで 2台以上のクロック同期が可能となっています. 前提としてスイッチの全ポートが同じクロックを共有するスイッチチップにより制御されていることが 必須にはなりますが, これを基軸として全ポートと DTP のやりとりを行うことで現在の最速クロックに 合わせるという動作が可能です.</p>

<h2>評価</h2>

<p>有効性の評価としてこの論文では DTP が PTP と比べて非決定性を抑制できていることを確認しています. PTPでは負荷の状況をなし, 中度, 重度と変えたときに300ns程度内, 25us程度内, 100us程度内と 誤差が大きくなっていきまた定常的にもブレが大きいことが見て取れます. 一方の DTP ではMTU 1500バイトの通常のEthernetややジャンボフレームの場合に負荷を掛けても ワーストケースで 4T = 25.6 ns内に常に収まっていることが確認できます.</p>

<h2>まとめとおわりに</h2>

<p>ここでは Ethernet の PHY レイヤを用いたクロック同期手法 DTP (Datacenter Time Protocol) についての論文を取り上げました. 時刻同期というよりはクロック同期であり, PTPと比してさらにハードウェアのサポートが必要であること, 同期ピア間でケーブルの直結が必要であることなど制約がより強い手法ではあります. ただし誤差の予測がネットワークを跨いでも可能であり必ずしも局所的にしか使えないといったものでもないようです.</p>

<p>スイッチの実装はまだ構想段階のようなので論文中の前提がフィールドで適用できるかどうかや, DTP を実装する NIC PHY のコストや性能への実際の影響についてはより調査や実験が必要と感じました. 個人的には IEEE 802.11ae の PCS をある意味ハックしているのが面白く感じました. また REFERENCES に時刻同期関連の一通りが並んでいるので大変にありがたい文章です.</p>

<h2>後付け: 他の候補</h2>

<p>その他, 今回紹介しようと思った候補としては以下に挙げるものがありました.</p>

<ul>
<li>ACM SIGCOMM 2016: Inter-Technology Backscatter: Towards Internet Connectivity for Implanted Devices, Iyer et al (University of Washington)</li>
<li>ACM SIGCOMM 2016: Evolve or Die: High-Availability Design Principles Drawn from Google’s Network Infrastructure, Govindan et al (Google/USC)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SEIL で OPEN IPv6 DDNS for NGN を使う]]></title>
    <link href="http://enukane.github.io/blog/2016/09/20/open-ipv6-ddns-on-seil/"/>
    <updated>2016-09-20T21:16:46+09:00</updated>
    <id>http://enukane.github.io/blog/2016/09/20/open-ipv6-ddns-on-seil</id>
    <content type="html"><![CDATA[<p>また Qiita。</p>

<blockquote><p><a href="http://qiita.com/n_kane/items/f4d098d6332f44ce5f8e">SEIL で OPEN IPv6 DDNS for NGN の DDNS 機能だけを使う</a></p></blockquote>

<p>IPoE契約してるとお外から名前で引けるようになるの便利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[\"Fluent Dashboard + SDR デバイスで周囲の電波状況を可視化してみる\" 書いた]]></title>
    <link href="http://enukane.github.io/blog/2016/09/13/fluentdashboard-with-sdr/"/>
    <updated>2016-09-13T23:02:15+09:00</updated>
    <id>http://enukane.github.io/blog/2016/09/13/fluentdashboard-with-sdr</id>
    <content type="html"><![CDATA[<p>久々に Qiita に記事書いた。</p>

<blockquote><p><a href="http://qiita.com/n_kane/items/d9037c8744634053dbab">Fluentd Dashboard + SDR デバイスで周囲の電波状況を可視化してみる</a></p></blockquote>

<p>Google SpreadSheet は便利だけど、描画の遅延とかが半端ないんでお次は App Engine + BigQuery かな。
ElasticSearch + Kibana でいい感じに横並びなメトリックが掛けるならそれが一番なんだけど&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[バランを作る]]></title>
    <link href="http://enukane.github.io/blog/2016/09/13/balun/"/>
    <updated>2016-09-13T08:43:54+09:00</updated>
    <id>http://enukane.github.io/blog/2016/09/13/balun</id>
    <content type="html"><![CDATA[<p>特に必須ではないらしいけど、ワイヤーアンテナにはバランを噛ましましょうという記述
があったので試しに作ってみた。 無線機側の同軸ケーブルは外部導体が GND に落ちてい
る「不平衡」である一方、アンテナからの入力は 内部・外部導体ともに電気的に対称で
「平衡」なのでこれが必要なのだとか。</p>

<ol>
<li><a href="http://www.geocities.jp/gomafu_club/ham/wireant/wireant.html">バランから作るお手軽HFワイヤ・アンテナの製作</a></li>
<li><a href="http://mk1502.web.fc2.com/sokuteiki/barun.htm">簡単に作れる、バランの作り方</a></li>
<li><a href="http://mk1502.web.fc2.com/sokuteiki/barun.htm">パッチンコア(クランプコア)でバランを自作する</a></li>
<li><a href="http://www.geocities.jp/bfgyjl3284/Balun.htm">バランの製作</a></li>
<li><a href="http://www.ndxc.org/tech/horibapdf/000811-001.pdf">長波対応ロングワイヤ用バランの製作</a></li>
<li><a href="http://www.na.rim.or.jp/~ja3haw/NO58B.PDF">バランの製作</a></li>
</ol>


<p>基本的な作り方は1番目のエントリを丸々なぞった。FT-50-43なるトロイダルコアを使う
のが筋らしい。が見つからなかったので秋月のそれっぽいやつで代用した。5番目のエン
トリを見ると巻き数にきちんと計算が必要らしいのでてきとう極まりない。</p>

<p>巻いたトロイダルコアはこんな感じ。 なおどこのサイトの記述か忘れたが、撚り線を作
るには電動ドライバに束ねた線の端を噛ませて作ると良いらしいとのこと。 もう一方の
端を手かペンチで保持してゆっくりドライバを回すといい感じに撚れる。</p>

<p><img src="http://enukane.github.io/images/2016-09-13/bounded-toroidal-core.jpg" alt="束縛されるトロイダルコア" /></p>

<p>完成したバランはこんな感じ。赤黒のターミナルがアンテナ行き、SMAが無線機行き。</p>

<p><img src="http://enukane.github.io/images/2016-09-13/balun-0.jpg" alt="バラン試作0号" /></p>

<p>SWR計を持ってないんでどれほどきちんと作れてるのかは不明。</p>

<p>ところで手持ちの受信機で HF 帯まで受信できるの ALINCO の DJ-X7 しかない。早くア
ップコンバータが欲しい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DIY電波望遠鏡 - 部材検討]]></title>
    <link href="http://enukane.github.io/blog/2015/09/08/2015-09-08-radio-telescope/"/>
    <updated>2015-09-08T21:36:21+09:00</updated>
    <id>http://enukane.github.io/blog/2015/09/08/2015-09-08-radio-telescope</id>
    <content type="html"><![CDATA[<p>HackRF の遊び方を広げるための一手段として電波望遠鏡の実装に使えないかを考えてみる.</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.asj.or.jp/geppou/archive_open/2012_105_10/105_631.pdf">マイ・電波望遠鏡とExcelで電波地図を作る</a></li>
<li><a href="https://www.jarl.org/Japanese/1_Tanoshimo/1-3_Ham-Fair/2010/radio-observation.pdf">宇宙の電波をキャッチしてみよう</a></li>
<li><a href="http://tenkyo.net/kaiho/pdf/2009_05/2009-05-03.pdf">BSアンテナ電波望遠鏡で 7/22 部分日食を観察しよう</a></li>
<li><a href="http://www.nhao.jp/research/annual_report/docs/ar2011-2.pdf">ＢＳアンテナを用いた電波望遠鏡の教育利用</a></li>
<li><a href="http://ir.lib.osaka-kyoiku.ac.jp/dspace/bitstream/123456789/5789/1/KJ382300123.pdf">簡単なアンテナによる銀河電波の測定</a></li>
<li><a href="http://www.asj.or.jp/geppou/archive_open/1989/pdf/19890707.pdf">簡単な電波望遠鏡による低周波電波天文学</a></li>
<li><a href="http://www.asj.or.jp/geppou/archive_open/1993/pdf/19930402c.pdf">私の電波望遠鏡 - II</a></li>
<li><a href="http://www.rtl-sdr.com/tag/simple_ra/">RTL-SDR FOR BUDGET RADIO ASTRONOMY</a></li>
<li><a href="http://www.britastro.org/radio/projects/An_SDR_Radio_Telescope.pdf">Experiments with a Software Defined Radio Telescope</a></li>
</ul>


<h2>構成</h2>

<p><img src="http://enukane.github.io/images/2015-09-08/plan-diy-radio-telescope.png" alt="2015-09-08-diy-rt" /></p>

<ul>
<li>SDRデバイスはRaspiで操作</li>
<li><a href="https://github.com/patchvonbraun/simple_ra">simple_ra</a>を利用して観測・記録

<ul>
<li>場合によっては改造すること</li>
<li>要ソース読み</li>
</ul>
</li>
</ul>


<h2>必要な物品</h2>

<h3>既に持っているもの</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">部材</th>
<th style="text-align:center;">品目</th>
<th style="text-align:right;">値段</th>
<th style="text-align:center;">個数</th>
<th style="text-align:left;">用途</th>
<th style="text-align:left;">備考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">SDRデバイス</td>
<td style="text-align:center;"> DVB-T+DAB+FM USB チューナ</td>
<td style="text-align:right;"> 1,420 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> SDR用 </td>
<td style="text-align:left;"> BNC端子へのアダプタ必要, できればこっちを使う </td>
</tr>
<tr>
<td style="text-align:center;"></td>
<td style="text-align:center;"> HackRF One </td>
<td style="text-align:right;"> $300.00 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> SDR用 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">BNC-SMA コネクタ </td>
<td style="text-align:center;"> ??? </td>
<td style="text-align:right;"> ??? </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> DVB-T用 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">同軸ケーブル(SMA) </td>
<td style="text-align:center;"> ??? </td>
<td style="text-align:right;"> ??? </td>
<td style="text-align:center;"> 2 </td>
<td style="text-align:left;"> SDRデバイスへの接続用 </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h3>買うべき物</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">部材</th>
<th style="text-align:center;">品目(候補)</th>
<th style="text-align:right;">値段</th>
<th style="text-align:center;">個数</th>
<th style="text-align:left;">用途</th>
<th style="text-align:left;">備考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> BS/CSアンテナ </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B00XZX39EI">東芝 BCA-453A</a> </td>
<td style="text-align:right;"> 4,580 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> 受信用 </td>
<td style="text-align:left;"> 周波数範囲(11.7〜12.75GHz), ビックカメラの方が<a href="http://www.biccamera.com/bc/disp/CSfGoodsPage_001.jsp?GOODS_NO=3118307">安いかも</a> </td>
</tr>
<tr>
<td style="text-align:center;"> アンテナ取り付け金具 </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B006ZCFGH4">DXアンテナ VM321H</a> </td>
<td style="text-align:right;"> 3,730 (送料込み) </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> ベランダ取り付け用 </td>
<td style="text-align:left;"> 9cm幅, 7cm下がる様な金具 </td>
</tr>
<tr>
<td style="text-align:center;"> BS/CS ブースタ </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B000TW9D66">日本アンテナ CSB-C25-SP</a> </td>
<td style="text-align:right;"> 2,370 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> アンプ用 </td>
<td style="text-align:left;"> 電源供給が必要, 場合に依っては電源付きのブースタの方がいいかも </td>
</tr>
<tr>
<td style="text-align:center;"> パワーインサータ </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B008R6A3QK">プレクス PX-LNBADAPTOR</a> </td>
<td style="text-align:right;"> 1,980 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> アンテナへの電源供給(ラインブースタの場合) </td>
<td style="text-align:left;"> 分配器が必要 </td>
</tr>
<tr>
<td style="text-align:center;"> 分配器 </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B003WSYUNK">HORIC BCUV-971</a> </td>
<td style="text-align:right;"> 880 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> パワーインサータと入出力の結合 </td>
<td style="text-align:left;"> 40cmのケーブル x 2が付属 </td>
</tr>
<tr>
<td style="text-align:center;"> すき間ケーブル(F形) </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B005025U0I">SOLIDCABLE #3232E/0.3</a> </td>
<td style="text-align:right;"> 1080 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> 窓通す用 </td>
<td style="text-align:left;"> 30cm </td>
</tr>
<tr>
<td style="text-align:center;"> 同軸ケーブル(F形) </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B00IJ2H1Z8">S-4C-FB</a> </td>
<td style="text-align:right;"> 570 </td>
<td style="text-align:center;"> 2 </td>
<td style="text-align:left;"> 外用 + 中用 </td>
<td style="text-align:left;"> 1.5m </td>
</tr>
<tr>
<td style="text-align:center;"> F-SMA変換アダプタ </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B0057STB8W">F-SMAP 変換アダプタ</a> </td>
<td style="text-align:right;"> 563 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> SMA同軸ケーブルへの接続用 </td>
<td style="text-align:left;"> SMAJ-SMAJが必要 </td>
</tr>
</tbody>
</table>


<p>合計 17000円弱?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[イベント無線LANでのチャネル使用率調査]]></title>
    <link href="http://enukane.github.io/blog/2015/08/31/event-radio-utilization/"/>
    <updated>2015-08-31T18:20:55+09:00</updated>
    <id>http://enukane.github.io/blog/2015/08/31/event-radio-utilization</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<p>いつもやっている、イベント会場でのパケットキャプチャに加えてここ最近チャネルごとの使用率の収集も始めました。</p>

<h3>計測対象</h3>

<p>今回、計測対象にしたのは以下の4イベント(7回)。大抵、鞄の中にデバイスを入れて移動しつつパケットキャプチャを行っています。設置場所を確保できた場合、定点観測的に収集をしています。</p>

<table>
<thead>
<tr>
<th style="text-align:left;">イベント              </th>
<th style="text-align:left;">日             </th>
<th style="text-align:center;">場所                           </th>
<th style="text-align:center;"> 固定? </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">なにか                </td>
<td style="text-align:left;"> 2015/08/02    </td>
<td style="text-align:center;">どこか                         </td>
<td style="text-align:center;"> <strong>Y</strong> </td>
</tr>
<tr>
<td style="text-align:left;">コミケ (C88)          </td>
<td style="text-align:left;"> 2015/08/14    </td>
<td style="text-align:center;">東京ビッグサイト ホール(東、西)</td>
<td style="text-align:center;"> N     </td>
</tr>
<tr>
<td style="text-align:left;">                      </td>
<td style="text-align:left;"> 2015/08/15    </td>
<td style="text-align:center;">東京ビッグサイト ホール(東、西)</td>
<td style="text-align:center;"> N     </td>
</tr>
<tr>
<td style="text-align:left;">                      </td>
<td style="text-align:left;"> 2015/08/16    </td>
<td style="text-align:center;">東京ビッグサイト ホール(東)    </td>
<td style="text-align:center;"> <strong>Y</strong> </td>
</tr>
<tr>
<td style="text-align:left;">YAPC::Asia Tokyo 2015 </td>
<td style="text-align:left;"> 2015/08/14    </td>
<td style="text-align:center;">東京ビッグサイト 会議棟        </td>
<td style="text-align:center;"> N     </td>
</tr>
<tr>
<td style="text-align:left;">                      </td>
<td style="text-align:left;"> 2015/08/14    </td>
<td style="text-align:center;">東京ビッグサイト 会議棟        </td>
<td style="text-align:center;"> N     </td>
</tr>
<tr>
<td style="text-align:left;">コミティア113         </td>
<td style="text-align:left;"> 2015/08/30    </td>
<td style="text-align:center;">東京ビッグサイト ホール(2,3)   </td>
<td style="text-align:center;"> N     </td>
</tr>
</tbody>
</table>


<h2>チャネル利用率のヒートマップ</h2>

<p>5分毎に区切って、チャネルごとにヒートマップ化したものを並べてみる。</p>

<h3>2015/08/02 あたりのイベント</h3>

<p><img src="http://enukane.github.io/images/2015-08-31/ev0802-util.png" alt="2015-08-02-util" /></p>

<h3>コミケ (C88)</h3>

<p>コミケでは、1日目および2日目は一般参加、三日目のみサークル参加だったため東 P-18b にて定点観測を実施。
動的観測の場合、列に並んだあとに観測開始し買い物が終わってビッグサイトから出て国際展示場に行くまでの間のどこかで停止している。</p>

<ul>
<li>列に並んだ時間 (西)

<ul>
<li>1日目: 10:15頃</li>
<li>2日目: 10:10頃</li>
</ul>
</li>
<li>ビッグサイトを出た時間

<ul>
<li>1日目: 12:50頃</li>
<li>2日目: 11:10頃</li>
</ul>
</li>
<li>彷徨ったルート (覚えてる範囲で)

<ul>
<li>1日目: 西(入場) → 東123→東456→西(退場)</li>
<li>2日目: 西(入場) → 東123→東456→西(ホール)→西(退場)</li>
</ul>
</li>
</ul>


<h4>1日目 (2015/08/14)</h4>

<p><img src="http://enukane.github.io/images/2015-08-31/c88-d1.png" alt="2015-08-14-util" /></p>

<h4>2日目 (2015/08/15)</h4>

<p><img src="http://enukane.github.io/images/2015-08-31/c88-d2.png" alt="2015-08-15-util" /></p>

<h4>3日目 (2015/08/16)</h4>

<p><img src="http://enukane.github.io/images/2015-08-31/c88-d3.png" alt="2015-08-16-util" /></p>

<h3>YAPC::Asia Tokyo 2015</h3>

<p>こちらは CONBU チーム (いわゆる Wi-Fi 班)として参加したときのもの. 作業時に邪魔にならない場合、ショルダーバッグにデバイスを入れて彷徨うようにはしていました. が、バックヤードに起きっぱなしの時間も大分あったため有為なデータが取れていない可能性は多々ありそう。</p>

<h4>1日目 (2015/08/21)</h4>

<p><img src="http://enukane.github.io/images/2015-08-31/yapc2015-d1.png" alt="2015-08-21-util" /></p>

<h4>2日目 (2015/08/22)</h4>

<p><img src="http://enukane.github.io/images/2015-08-31/yapc2015-d2.png" alt="2015-08-22-util" /></p>

<h3>コミティア113 (2015/08/30)</h3>

<p><img src="http://enukane.github.io/images/2015-08-31/comitia113.png" alt="2015-08-22-util" /></p>

<h2>考察</h2>

<ul>
<li>何となく移動が見える

<ul>
<li>特にビッグサイト(ホール)

<ul>
<li>5GHz帯 36、48、64、100 chの濃淡

<ul>
<li>ホールから抜けたかどうかが判断できそう</li>
</ul>
</li>
<li>C88 1日目、2日目の移動に連動していそう?</li>
</ul>
</li>
<li>YAPCの結果を見ても、場所変化には連動している模様</li>
<li>Wi-Fiをオフされた時も同様の状況になりうるので一概に逆は言えないが&hellip;.</li>
</ul>
</li>
<li>2.4GHz帯側の分布具合

<ul>
<li>8/2 と YAPCのそれはだいぶ綺麗にみえる

<ul>
<li>1、6、11 chの中央とそれらの両隣が濃く出ている</li>
<li>これらのイベントでは、会場内無線LANのコントロールが提供側でそこそこなされていたため？</li>
<li>野良APまたはクライアントの絶対数の有無?</li>
</ul>
</li>
<li>&ldquo;人の密集度 == 2.4GHz帯側の濃度&rdquo; という仮説

<ul>
<li>C88 1日目、2日目の2.4GHz と 5GHz の比較より</li>
<li>ホールから出て 5GHz 帯側が明らかに薄くなっていて、2.4GHz帯側はそこまで落ちない時間がある

<ul>
<li>まだ列に並んでると思しき時間</li>
<li>ホール間移動と思しき時間</li>
<li>帰途についてビッグサイトを出たと思しき時間</li>
</ul>
</li>
<li>モバイルルータの影響？</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>実装</h2>

<p>以下、軽く実装についてメモ</p>

<h3>情報源として用いる情報</h3>

<p>チャネル利用率の算出には iw コマンドの以下のオプションを用いました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% iw wlan0 survey dump</span></code></pre></td></tr></table></div></figure>


<p>survey dumpでは以下の様にそのチャネルに移動してからのアクティブ時間(=移動後の経過時間)とビジーだった時間が得られます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Survey data from wlan0
</span><span class='line'>        frequency:                      2412 MHz [in use]
</span><span class='line'>        noise:                          -83 dBm
</span><span class='line'>        channel active time:            35900 ms
</span><span class='line'>        channel busy time:              24814 ms
</span><span class='line'>        channel transmit time:          0 ms</span></code></pre></td></tr></table></div></figure>


<p>今回用いたデバイス(WLP-UC-AG300, チップはRT2870)の場合、この値はソースコード上の以下の部分で計算しています。
<a href="https://github.com/torvalds/linux/blob/master/drivers/net/wireless/rt2x00/rt2800lib.c#L7984">https://github.com/torvalds/linux/blob/master/drivers/net/wireless/rt2x00/rt2800lib.c#L7984</a></p>

<p>なおここでの&#8221;ビジー&#8221;は、送受信またはノイズによりこれらがストップしていたチップの動作時間であり、以下の様な関係式がなりたちます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>channel busy time   = receive time + transmit time + other time
</span><span class='line'>channel active time = busy time + idle time</span></code></pre></td></tr></table></div></figure>


<p>チップによっては transmit time の他に receive time も個別に取り出せるので other つまり 802.11 以外の電波により送受信ができていなかった時間も取れるのですが今回は対象外としました。</p>

<h3>tochkad での記録</h3>

<p>このように取れるチャネル利用率を、パケットキャプチャデバイスの主観部分を担う <a href="https://github.com/enukane/tochka/">tochkad</a> のチャネル遷移部分で取得するようにしました。</p>

<ul>
<li><a href="https://github.com/enukane/tochka/blob/master/lib/tochka/athsurvey.rb">athsurvey.rb</a></li>
</ul>


<p>tochkadは0.5秒毎にチャネル遷移するので大分短い時間ではありますが、ログ上に以下の様に utilization (利用率)が載るようになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2015-08-02 15:20:43 +0900]     DEBUG: channel moved to 11 from 10 (dur=6510、size=481767780、walk=6062、utilization=59.68 uch=10)</span></code></pre></td></tr></table></div></figure>


<p>この利用率は tochka デバイスについている LCD ディスプレイ (tochka-miniui) にも出すようにしています (赤枠部分)</p>

<p><img src="http://enukane.github.io/images/2015-08-31/tochka-miniui.jpg" alt="tochka-miniui" /></p>
]]></content>
  </entry>
  
</feed>
