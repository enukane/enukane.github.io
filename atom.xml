<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[#error NO_MONEY]]></title>
  <link href="http://enukane.github.io/atom.xml" rel="self"/>
  <link href="http://enukane.github.io/"/>
  <updated>2017-05-04T01:55:22+09:00</updated>
  <id>http://enukane.github.io/</id>
  <author>
    <name><![CDATA[n_kane]]></name>
    <email><![CDATA[enukane@glenda9.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Got Aruba IAP-103-JP]]></title>
    <link href="http://enukane.github.io/blog/2017/05/03/iap103/"/>
    <updated>2017-05-03T23:42:11+09:00</updated>
    <id>http://enukane.github.io/blog/2017/05/03/iap103</id>
    <content type="html"><![CDATA[<p>どこからともなく予算が割り当たったことにしたので、Aruba IAP-103-JP が降ってきました。</p>

<ul>
<li><a href="http://www.arubanetworks.com/ja/products/networking/access-points/103-series/">Aruba 103 シリーズ</a></li>
</ul>


<p>機体筐体はこんな感じ。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-05-03/iap103.jpg" width="480"></p>

<p>裏側のネジ4つを外すと表カバー、裏カバー、基板の3つに綺麗に分かれる。分解はしやすい。</p>

<p>アンテナ(基板の表カバー側)はこんな感じ。いわゆる逆Fアンテナの模様。
見ての通りアンテナは2つだけで、2.4/5GHz帯共用らしい。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_ant.jpg" width="480"></p>

<p>チップ実装面はこんな感じ。シールドを一部外した状態。
右側のシールド内のチップはAtheros AR9582-AR1A。
左の黒いヒートシンクが付いているシールドからちらっと見えている石はAtheros AR9344-BC2AでこちらはSoC。
前者で5GHz帯、後者でCPU兼2.4GHz帯を捌いてる模様。
中央上部、ACアダプタソケットとEthernetソケットの間にピンヘッダが出ている。
細かく調べてはいないがシリアルコンソールが取れるのかもしれない。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_chip.png" width="480"></p>

<p>この子はIAPタイプなのでコントローラとしても動作する。ダッシュボードはこんな感じ。
1台だけだからかもしれないがCisco WLCと比べるとだいぶシンプル、というか設定できるところが少なめっぽい。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_db_ap.png" width="480"></p>

<p>AppRFを有効にしてると以下の様に通信内容の分析がAP/クライアントの単位でできるらしい。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_db_apprf.png" width="640"></p>

<p>今のところ自宅ではAP機能(アクセスモード)に用はないので、スペクトルもモニターモードで動作させている。
このモードだと「スペクトラム」メニューにて非802.11デバイス一覧や、全チャネルのチャネル使用率&amp;品質が見れるらしい。
なおアクセスモードだと動作中チャネルのそれに限定される。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_mon_gen.png" width="480">
<img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_mon_24g.png" width="480">
<img class="center" src="http://enukane.github.io/images/2017-05-03/iap103_mon_5g.png" width="480"></p>

<p>ところでIAPが一台あれば、Remote APモデルのもの仕入れて繋げて遊べたりするのかな？
AP105はヤフオクで1500〜2000円/台の価格で数多く出ており、簡単に中規模ネットワークは組めそう。
なお一部のAruba APは某用途向けにファーム/基板ごと特殊モデルと聞くので対象外になりそうではある。</p>

<p>軽くぐぐってみた限り、以下のスレッドにあるとおりクラスタのAP数上限というのはないらしい。
推奨値128とあるようだがここまで巨大なものを組む予定はないので遊ぶ分には困らなさそう。</p>

<ul>
<li><a href="https://community.arubanetworks.com/t5/Aruba-Instant-Cloud-Wi-Fi/IAP-MAX-AP-per-Cluster/td-p/214997">IAP MAX AP per Cluster</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fluent-plugin-sflow でっちあげた]]></title>
    <link href="http://enukane.github.io/blog/2017/03/24/fluent-plugin-sflow-release/"/>
    <updated>2017-03-24T19:13:10+09:00</updated>
    <id>http://enukane.github.io/blog/2017/03/24/fluent-plugin-sflow-release</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/enukane/fluent-plugin-sflow">fluent-plugin-sflow</a></p>

<p>JuniperやAlaxala, NEC製品などでサポートされているsFlowプロトコルのサンプルを受信するFluentdプラグインを書きました。</p>

<p>netflowプロトコルについては repeatedly さんが既に<a href="https://github.com/repeatedly/fluent-plugin-netflow">fluent-plugin-netflow</a>を公開されています。
今回NECのIXシリーズからフローデータを送りつけたいという要望が某所であったため、実装してみました。
とはいえsflowのプロトコルを捌く部分は別の方のパーサに頼っています。</p>

<h1>使い方</h1>

<p>fluent-gemやtd-agent-gemでインストールするだけです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% fluent-gem install fluent-plugin-sflow</span></code></pre></td></tr></table></div></figure>


<p>設定項目は以下の通りです。 待ち受けアドレス(bind)、待ち受けポート(port)そしてタグ名ぐらいしかありません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;source&gt;
</span><span class='line'>  @type sflow
</span><span class='line'>  tag sflow.example
</span><span class='line'>
</span><span class='line'>  bind 0.0.0.0
</span><span class='line'>  port 6343
</span><span class='line'>&lt;/source&gt;
</span><span class='line'>
</span><span class='line'>&lt;match sflow.example&gt;
</span><span class='line'>  @type stdout
</span><span class='line'>&lt;/match&gt;</span></code></pre></td></tr></table></div></figure>


<h1>host-sflow と組み合わせたテスト</h1>

<p>実際のテストにはスイッチやルータが必要ですが、手元で簡単に試すために <a href="http://www.sflow.net/">host-sflow</a> を導入します。
ここではMac OS X (MacBookPro)上に導入しWi-Fiのインタフェース(en0)のデータをサンプリング、先に挙げた設定で同一ホスト上で動作するfluentdに投げ込んでみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git clone https://github.com/sflow/host-sflow.git
</span><span class='line'>% cd host-sflow
</span><span class='line'>
</span><span class='line'>% make
</span><span class='line'>
</span><span class='line'># pcap のターゲットデバイスとして en0 を指定する
</span><span class='line'>% cat &gt; /tmp/test.conf
</span><span class='line'>sflow {
</span><span class='line'>  polling=10
</span><span class='line'>  collector { ip = 127.0.0.1 udpport=6343 }
</span><span class='line'>  pcap { dev=en0 }
</span><span class='line'>}
</span><span class='line'>^D
</span><span class='line'>
</span><span class='line'># host-sflowの起動(デバッグ目的で -dddd としている)
</span><span class='line'>% sudo ./src/Darwin/hsflowd -dddd -f /tmp/test.conf</span></code></pre></td></tr></table></div></figure>


<p>fluentdの標準出力をしばらく眺めていると、以下の様にフローサンプルが出力されます。この時は *.twttr.com (twitter) への通信がキャッチされたようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% fluentd -vv -c example/fluentd.conf
</span><span class='line'>(中略)
</span><span class='line'>2017-03-24 18:52:50.054347000 +0900 example.sflow: {"agent_address":null,"i_octets":0,"o_octets":0,"interface":6,"input_packets_error":0,"output_packets_error":0}
</span><span class='line'>2017-03-24 18:52:52.519715000 +0900 example.sflow: {"agent_address":null,"sampling_rate":"400","i_iface_value":0,"o_iface_value":0,"ipv4_src":"199.59.148.241","ipv4_dst":"192.168.10.17","udp_src_port":1900,"udp_dst_port":57347,"frame_length":1486,"frame_length_multiplied":594400,"tcp_src_port":443,"tcp_dst_port":58076}
</span><span class='line'>2017-03-24 18:53:01.984184000 +0900 example.sflow: {"agent_address":null}
</span><span class='line'>2017-03-24 18:53:09.934539000 +0900 example.sflow: {"agent_address":null,"i_octets":0,"o_octets":0,"interface":6,"input_packets_error":0,"output_packets_error":0}
</span><span class='line'>(中略)</span></code></pre></td></tr></table></div></figure>


<p>ネットワーク機器にてよく見られるカウンタサンプルとフローサンプル以外にも、host-sflowはOSやアプリケーションの各種メトリックを集めsFlowプロトコルに載せて送信します。
現状の fluent-plugin-sflow ではカウンタ/フローサンプルのパースしかサポートしていないため、それらのメトリックは空扱いになります(上記5行目)。</p>

<h1>ToDo</h1>

<ul>
<li>bindata 1.8.1以上への対応

<ul>
<li>現状 Sflow5rawpacketdataVLAN の type メンバが BinData::Record あたりで定義されてる名前と被ってるらしく怒られるので、1.8.1にしている</li>
<li><a href="https://github.com/repeatedly/fluent-plugin-netflow">fluent-plugin-netflow</a>は2.5.3ベースであり、こちらと揃えたい</li>
<li>名前の変更にはおそらく次の項目をクリアする必要がある</li>
</ul>
</li>
<li>パーサーの取り込み

<ul>
<li>現状、<a href="https://github.com/NETWAYS/sflow/">NETWAYS/sflow</a>のパーサをリポジトリごと丸っと使っている</li>
<li>ライセンスとオリジナルを明記した上でパーサとモデルの部分だけコピーしてくる</li>
<li>または全部1から書き直す</li>
</ul>
</li>
<li>IPv6対応</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[レベル 30 にあがった]]></title>
    <link href="http://enukane.github.io/blog/2017/03/20/level30/"/>
    <updated>2017-03-20T00:21:36+09:00</updated>
    <id>http://enukane.github.io/blog/2017/03/20/level30</id>
    <content type="html"><![CDATA[<p>2017/03/19 でレベル30になった。不毛の20代が終わり、そして不毛の30代が始まった。
節目でもあるのでざっくりとここ10年を振り返って思い出せることをつらつらと書いてみる。</p>

<ul>
<li>2007

<ul>
<li>大学生3年生</li>
<li>サークルに入らず毎日自宅と大学とを行き来する量子的な大学生生活。大学に知り合い？知らない子ですね。</li>
<li>週3で入れてたリサイクルショップのバイトでのみわずかに人間的なコミュニケーションを行う</li>
<li>一年前に出来たつくばエクスプレスがなければしんでいた</li>
<li>念願のEl Camino de Santiago 巡礼で2週間歩き通す旅にでた。300km超。帰ってきても体重は変わらなかった。自分探しの無意味さを知る。</li>
</ul>
</li>
<li>2008

<ul>
<li>大学生4年生</li>
<li>OS系を志望して、やわらか研究室に配属される。</li>
<li>OSやりたくて入ったけど分散システム系のネタをやることになる</li>
<li>今もつきあいのある頭のおかしい人たちを知る(syonboriさん, ozaさん, hirakuさん, yoshinabuさん, goさん e.t.c)</li>
<li>はじめてのコミケ一般参加＠冬(go先生のガイド、しかも始発組だった気がする&hellip;)</li>
</ul>
</li>
<li>Before Twitter と Anno Twitter の境目</li>
<li>2009

<ul>
<li>大学4年、卒業。良く分からないけど卒業に際して学類長賞もらう。一言とはいえ友達も知り合いも0なのに前で所感をしゃべるの拷問。</li>
<li>モラトリアム延長のため大学院に入院する。研究室に住むという道を選ぶ。</li>
<li>後輩にさらに頭のおかしいのが入ってきて一般人層として肩身が狭くなる (えむばさん、frsyukiさん、athlonzさん, kdmnさん e.t.c)</li>
<li>7月、syonboriさんその他に触発されてtwitterに手を染める(<a href="https://twitter.com/n_kane/status/2477877389">初Tweet</a>)</li>
<li>お外に出ていた先輩・後輩経由で外の頭のおかしい人たちを知る。世の中は広大だわ。</li>
<li>はじめてのコミケサークル参加おてつだい＠yoshinabuさん &amp; goさん&#8217;sスペースでサークル参加の楽しさを知る</li>
<li>沼津の方にインターンに行く。Linux系の怖い人たちを知る。</li>
<li><a href="http://d.hatena.ne.jp/syuu1228/20090820/1250748541">はじめてのハッカソン</a></li>
<li>Plan 9への傾倒、グレンダのぬいぐるみ製造の外注に着手する</li>
</ul>
</li>
<li>2010

<ul>
<li>はじめての勉強会発表。いろいろとひどかった(主催者の方ごめんなさい)けど、いろいろ学びをえた。</li>
<li>グレンダぬいぐるみが降臨、信仰が始まる</li>
<li>修士2年生、研究室の机の下の住居環境の充実化が一層進む。研究は進まない。</li>
<li>グレンダのオリジナル作者さんからグレンダぬいぐるみについて<a href="https://twitter.com/reneefrench/status/9174639444">問い合わせ</a>が来る</li>
<li>就活、なんとか滑り込む。</li>
<li>はじめてのコミケサークル参加、修論ほっぽって原稿書く。直前まで仕上がらず大量のカフェインドーピングの結果、カフェ中の恐ろしさをカラダで学ぶ。</li>
</ul>
</li>
<li>2011

<ul>
<li>震災当日、風邪を言い訳にゼミサボって寝てたら頭上から大量のガジェットが降り注ぐ。</li>
<li>震災を言い訳に研究の引き継ぎをろくにやらずに逃亡そして修了。研究成果のOSS化ェ&hellip;.</li>
<li>某社で社畜はじめた。スーツ生活つらい。同期の面白い連中を知る(akiray03先生, hizumiさん, suu_gさん, smison先生 e.t.c)</li>
<li>配属告知の当日に夢で、まったく希望してない部署を告げられ13Fの窓から飛び降りるところで目が覚める。</li>
<li>分散システムっぽい研究の反動で、OSとかネットワークスタック開発っぽいことやるお仕事をすることになった。</li>
<li>おちんぎんでお寿司を食べる快楽に目覚める</li>
</ul>
</li>
<li>2012

<ul>
<li>社畜2年目</li>
<li>身近に識者がいない無線LANのお仕事が降ってきて、無線沼に嵌まり始める。</li>
<li>新製品開発でふぃーばーしはじめる</li>
<li>そのせいで気が狂ったのか、生ハムの原木を買ってしまう。もう二度と買わない。</li>
<li>お仕事で温泉ハッカソンに行く</li>
</ul>
</li>
<li>2013

<ul>
<li>新製品リリース判定前日、お仕事で初めて徹夜仕事をキメる。作業中意識を失ってお花畑でスキップする白昼夢を見、ｱﾊﾊﾊﾊと笑ってるところで目が覚め我に帰る。</li>
<li>結局解決せず、自分の担当分のトラブルでリリース延期をやらかしかけるも、帰って寝てる間に妖精さん(先輩)が問題箇所見つけてくれたおかげでGOサインがでる。</li>
<li>学生の卒業旅行に混じって奥日光に行く</li>
<li>社畜3年目、研究室の先輩と同期が後輩になる</li>
<li>某BSD系のハッカソンに参加＠トロントするも特に成果がないままおめおめ帰ってくる</li>
<li>反省してヒゲを伸ばし始める</li>
</ul>
</li>
<li>2014

<ul>
<li>社畜4年目、飯田橋へのマイグレーション</li>
<li>先輩の導きで「イベント無線LAN構築・運用」というアートと快楽を教え込まれる。が、その先輩はすぐに旅立ってしまった。</li>
<li>無線LANパケットキャプチャ沼に嵌まる</li>
<li>2回のイベント無線LAN(2014年内)</li>
</ul>
</li>
<li>2015

<ul>
<li>社怪人5年目、職場に新しい無線LANフレンズができる</li>
<li>CONBUにプロジェクトメンバとして初参加する＠YAPC::Asia 2015</li>
<li>唆されてハムやら陸特やらの勉強を始める</li>
<li>CONBUコアメンバにhiringされる。テレカンでもF2Fでも沈黙を貫く仕事をしないコアメンバになる。</li>
<li>葉巻と西洋剃刀にハマる</li>
<li>先輩後輩知り合い同期が大量に旅立ってなんとなく焦り始める。でも焦っても特に何もないことに気づいて落ち着きを取り戻す。</li>
<li>8回のイベント無線LAN構築・運用(2015年内)</li>
</ul>
</li>
<li>2016

<ul>
<li>初めての3週間連続勤務、残業3桁</li>
<li>社壊人6年目、新製品開発で燃え尽き気味になり以降やりたいことをやりたいようにやりはじめる。</li>
<li>はじめてのJANOGと沖縄、まさかの懇親会申し込みておくれ</li>
<li>夏C90で、はじめての印刷所利用(オンデマンド印刷)</li>
<li>先輩後輩知り合いが大量に結婚しはじめてなんとなく焦り始める。でも焦っても特に(同上)。</li>
<li>冬C91で、コミケサークル参加たぶん10回目、10冊目の薄い本</li>
<li>20代最後の年が漫然と流れゆく。「而立〜さよなら20代〜」のそれぞれの曲がさらに心に突き刺さる。</li>
<li>8回のイベント無線LAN(2016年内)</li>
</ul>
</li>
<li>2017

<ul>
<li>自分が何のエンジニアなのか悩み始める。でも悩んでも特に(同上)。</li>
<li>3/19 ああ、もう戻れない</li>
</ul>
</li>
</ul>


<p>三十路初心者を慰めてやろうという心ある方々の援助を募集しております＞ <a href="http://amzn.asia/3Ck9iQ8">ほしいものリスト</a></p>

<p>まだ20代の人はこれを聴くといいよ＞ <a href="http://goodbye-twenties.com/">而立〜さよなら20代〜</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コミケ91 1日目の無線LAN模様]]></title>
    <link href="http://enukane.github.io/blog/2017/01/11/c91-wifi/"/>
    <updated>2017-01-11T23:59:31+09:00</updated>
    <id>http://enukane.github.io/blog/2017/01/11/c91-wifi</id>
    <content type="html"><![CDATA[<p>だんだんと自分にしか意味のない指標&amp;グラフが増えすぎてて大変に読みづらいものになったけど、
いつものやつ書きました。「C91 Wi-Fi 〜ららら、(無線的に)素敵なComiket Space〜」。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/70907756 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>

<p>今回は、また自スペースが西1に戻ってきました。
そのため<a href="http://www.slideshare.net/enukane/c90-wifi-comiket-space">前回のC90 (西3だった)</a>とはまた様子が異なっています。
比較のために、次はできれば東に割り当てられたいですね。</p>

<p>今回は新要素として以下を追加しています。</p>

<ul>
<li>&ldquo;18.1 AP滞在時間のヒストグラム(10分以上のみ抽出)&rdquo;

<ul>
<li>APが見えていた時間をプロット</li>
<li>大半がヒットアンドランで0秒付近に張り付く傾向があるので、一定時間以上に絞って長期傾向を見る</li>
</ul>
</li>
<li>&ldquo;19.1 端末の滞在時間ヒストグラム(10分以上のみ抽出)&rdquo;

<ul>
<li>同上</li>
</ul>
</li>
<li>&ldquo;20. Data &amp; BlockAckフレームの収集数/s&rdquo;

<ul>
<li>&ldquo;14. 正常フレームの収集数/s&rdquo; のうち、さらに Dataフレームと Block Ackフレームに絞り込み</li>
<li>サンプリングが妥当であれば、このFPSがデータ送信の活発さの指標になりうる</li>
<li>ただし長さは考慮されない</li>
<li>ただし高レートすぎて見えないフレームは Block Ack でしか考慮されない

<ul>
<li>Block Ack またはその他の要素から、これらのフレームを復元する方法が必要</li>
</ul>
</li>
</ul>
</li>
<li>&ldquo;21. FCS OKフレームの時間的占有率&rdquo;

<ul>
<li>毎回1秒キャプチャしてた間に見つけたFCS good なフレームの Duration (秒) と 1秒内の割合の推移をプロット</li>
<li>「13. チャネル使用率」のうち、どれくらいが有効に使われていたかを判断できるはず

<ul>
<li>正確な一致には FCS bad なフレームの考慮による検証が必要 (TODO)</li>
</ul>
</li>
<li>チャネル使用率との差分が、無駄になった時間

<ul>
<li>このDurationのうち、データフレームに使えた時間と長さを考慮してチャネル使用率との対比を取ると、有効に使えた度合いが取れる？</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>FCS badなフレームのDurationがどれくらい正確なのかは今後要検証。
これが正確にとれており、Durationの合計がチャネル使用率と合致するならサンプリング精度が良いという指標になりそう。</p>

<p>また、FCS badなデュレーションと
これと、プリアンブルだけの情報が上手く取れると高レートなフレームの流れが</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017-01-11 コミケ91で、ハニーポット無線LANアクセスポイント立てたお話]]></title>
    <link href="http://enukane.github.io/blog/2017/01/11/hap/"/>
    <updated>2017-01-11T09:35:12+09:00</updated>
    <id>http://enukane.github.io/blog/2017/01/11/hap</id>
    <content type="html"><![CDATA[<p>{:TOC}</p>

<h1>概要</h1>

<p>今冬のコミックマーケット91にて、1日目 西1 み-18a &ldquo;glenda9&rdquo; で出展するにあたって
自スペースにハニーポット無線LANアクセスポイント(以下 ハニポAP)を立てました。
ここではその提供方法、構成および結果について記述します。</p>

<p>この手のイベントでは「応仁のLAN」といった面白SSIDを告知する遊びをする人がいます。
これに倣って自分のスペース名をSSIDで告知というのも可能ですが、
せっかくAPを立てるからにはもうすこし遊びを入れたいところです。</p>

<p>もうちょっと真面目な目的としては各種プラットフォームが備えているキャプティブポータル検知の実装を見てみたい、
この手のイベントでいかにもセキュリティの甘そうなAPをおいておくと
どれくらいの人が引っかかるのか見てみたいといったモチベーションがありました。</p>

<p>ここではAPとキャプティブポータルを組み合わせてイベント環境にデプロイし、
クライアントの通信を特定コンテンツにねじ曲げて以下の様なページを強制表示するようにしつつ各種ログを収集しました。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/captive-webui.png" width="350"></p>

<!---
# 目的

- APを用いた宣伝、お客さんを釣る
- どれくらいの人がハニポAPに引っかかるかをみる
- キャプティブポータル検知の仕組みを実際に引っかけて調べる

先にも述べたように単純にSSIDを「み-18a glenda9」などとして宣伝する方法もあります。
が、一般的なハニーポットとしては"Free Wi-Fi"といったそれらしいSSIDをつけておきたいところです。
威力業務妨害扱いにもなりそうなので、今回はやりませんでしたが他のFree Wi-Fiで用いている
SSIDをつけるという案もあります。
コミケの環境では、PCというよりスマホ・タブレットが主として用いられると思われ
またさらにいえばWi-Fiよりは3G/LTEを用いるであろうと思われるためあまり引っかかる人はいなさそうです。
しかし、無線LANがデフォルト有効かつ暗号化なしSSIDに自動的に接続しに行くデバイスや、
テザリング接続時にたまたまフリーっぽいSSIDを見つけて手動接続するユーザはいると思われます。
これらをターゲットとしてSSIDを告知します。

各種プラットフォームではそれぞれ [HOW AUTOMATIC DETECTION OF CAPTIVE PORTAL WORKS](https://success.tanaza.com/s/article/How-Automatic-Detection-of-Captive-Portal-works)にあるようなキャプティブポータル検知の仕組みを導入しています。
これを実際に調べるとともに、この際に発生する接続からアドレス取得、名前解決からHTTPアクセスまでの
一連の流れから読み取れることを探ってみます。

-->


<h1>ハニーポットAPの見え方</h1>

<p>ハニポAPのSSIDとして「  Not Free Wi-Fi」を告知するようにしました。
SSIDの先頭に半角スペースを2つ入れることで、
「0000」で始まるものやアンダースコアから始まるSSIDよりも上位に出現するようにしています。
2.4GHz帯と5GHz帯でSSIDを分けており、
下記の様に2.4GHz帯側には&#8221;-g&#8221;とのサフィクスをつけました。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/not-free-wifi-ssid_hide.png" width="300"></p>

<!--- 引っかかると --->


<p>このSSIDに接続すると、
大抵のプラットフォームに入っているキャプティブポータル検知の仕組みによりスプラッシュページが表示されます。
Androidのスマホで見ると、ハニーポットAPのSSIDを選択後しばらくすると以下の画面がポップアップします。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/sp-captive.jpg" width="300"></p>

<h1>ハニーポットAPの機材について</h1>

<h2>AP本体</h2>

<p>ハニーポットAPには、Buffalo WZR-HP-AG300H に OpenWRT を載せたものを用いました。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/hap.png" width="300"></p>

<p>C90で同様の試みをしたときは Raspberry Pi と USB Wi-Fi アダプタを用いていました(以下)。
その際は、混雑している2.4GHz帯でしか運用せず出力も弱めであったため、
あまり接続数を稼げませんでした。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/old-hap.png" width="300"></p>

<p>WZR-HP-AG300H は家庭用APとしてそれなりにきちんとしたアンテナを備え、
2.4GHz/5GHz帯の同時運用も可能です。
OpenWRT を導入できカスタマイズ性も高いため今回はこれを用いてハニーポットAPを実装しました。</p>

<h2>APへの電源供給</h2>

<p>WZR-HP-AG300Hの消費電力は最大13.2Wであり、付属のACアダプタは定格 12V/2.0A となっています。
通常のUSBモバイルバッテリーではここまでの電圧は出せないため、
簡単にやるにはACが取れる電源などの大きめのバッテリーを用意する必要があります。
これらは価格も高い上にでかいし重いしで大変に邪魔なので、
ここでは以下のページに従ってQuickCharge 2.0対応のバッテリー(今回は AUKEY PB-T4 を利用)から12Vを引き出すようにしました。</p>

<ul>
<li><a href="https://lowreal.net/2015/12/07/3">Quick Charge 2.0 電源から 12V とる</a></li>
</ul>


<p>なお上記ページのコードでは上手く動かなかったため、
挿入するディレイの長さを変更して運用しています。コードは下記をご参照ください。</p>

<ul>
<li><a href="https://gist.github.com/enukane/26f3af8938ed2a775296f472b1c71168">https://gist.github.com/enukane/26f3af8938ed2a775296f472b1c71168</a></li>
</ul>


<p>後述するとおり 10000mAh のバッテリーで6時間程度は運用できました。
基板に起こすのは間に合わなかったので Arduino そのままとブレッドボードで動かしていました。
たまに結線が外れてリブートしてたり。。。。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/hap-power.jpg" width="350"></p>

<h2>簡易キャプティブポータル on OpenWRT</h2>

<p>簡易キャプティブポータル実現のため、以下の細工を入れています。</p>

<ul>
<li>管理用WebUIはWAN側インタフェースでのみ受付</li>
<li>LAN から WAN への通信を全て遮断</li>
<li>DHCPで配布するDNSサーバを自身(10.0.0.1)に設定</li>
<li>DNSサーバにて全てのAレコードのクエリに対して自身のアドレスで応答</li>
<li>LAN側(キャプティブポータル提供側)では Apache で HTTP アクセスを待ち受け

<ul>
<li>全てのHTTPアクセスを /index.html に置き換え</li>
</ul>
</li>
</ul>


<p>dnsmasqのレコード上書き機能を用いて全てのホスト名に対して自分のアドレスを返すことで、
アクセスを自身にねじ曲げます。
現状 /etc/init.d/dnsmasq にて dnsmasq コマンドの引数に以下を
加えてこれを実現しています。本来的には /etc/config/dhcp に list address の
行を追加すれば動くはずですが、上手く動作しないようでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--address='/#/10.0.0.1'</span></code></pre></td></tr></table></div></figure>


<p>キャプティブポータルとして HTTP アクセスを受け付ける側には Apache を用います。
上記 DNS の細工により、HTTP アクセスはこちらに向きますがパスは不定のためリダイレクト等が必要です。
OpenWRT デフォルトの apache では mod_rewrite が使えないため、
AliasMatch でこれを実現します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AliasMatch ^/.+$ /root/www/index.html
</span><span class='line'>&lt;Directory "/root/www"&gt;
</span><span class='line'>  Options Indexes FollowSymLinks SymLinksIfOwnerMatch
</span><span class='line'>  AllowOverride None
</span><span class='line'>  Order allow,deny
</span><span class='line'>  Allow from all
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<p>これにより全てのHTTP アクセスに対して /index.html の中見を返すようになります。
このHTMLファイル中に、先に挙げたWebページを詰め込んでおきます。</p>

<h2>設置場所</h2>

<p>ハニーポットAP は コミックマーケット91 1日目 (2016/12/29) の西ホール1、
み-18a の机の上に設置しました。西ホールのだいたい赤丸の位置に自スペースがあります。</p>

<p><img class="center" src="http://enukane.github.io/images/2017-01-11/map.png" width="200"></p>

<p><img src="http://enukane.github.io/images/2017-01-11/my-space_cap.png"></p>

<p>机の上の可能な限り高いところに、
設置しましたができればポスタースタンドなどにくくりつけてより高さを稼ぎたいところではあります。</p>

<h1>提供結果</h1>

<p>ハニーポットAPの提供は 12/29 09:05:29 から 15:09:15 までの期間、6時間3分46秒に渡って実施しました。</p>

<h2>無線LAN</h2>

<p>接続しにきたユニーククライアント数は 62 台でした。
この値は、ログ中の接続(Authentication)イベントに紐付くMACアドレスのユニークアドレス数を計上したものです。
なお、いくつかの端末は Authentication Response に対してACKを返せていないため実際にAssociationまで至ったクライアントは
56 台です。</p>

<p>MACアドレスのOUIからベンダ名を引き、分布を図示した物が以下になります。
全体でベンダは10種類でした。コミケという利用環境上、大半がスマートフォンであると推測できます。
この中でも大半が Apple (おそらくiPhone/iPad) と Huawei で占められています。
&ldquo;IEEE Registration Authority&#8221;という名前になっているものがありますが、
一部のスマホでは自社のベンダ名を登録していないためこうなっているようです。</p>

<p><img src="http://enukane.github.io/images/2017-01-11/sta_oui_histogram.png" alt="sta-oui-histogram" /></p>

<p>ハニーポットAPでは2.4/5GHz帯でそれぞれ別のSSIDを告知しています。
以下は帯域毎のユニーク接続クライアント数の分布です。
2.4GHz帯は18端末、5GHz帯は42端末と後者に寄っています。
接続イベント数上も2.4GHz帯は 33回、5GHz帯は 63回となっており、
5GHz帯側に接続しにくることが多かったようです。</p>

<p><img src="http://enukane.github.io/images/2017-01-11/sta_per_band.png" alt="sta-per-band" /></p>

<p>以下は端末の接続持続時間のヒストグラムです。端末が接続してから切断するまでの期間(秒)と発生回数をプロットしています。
10秒単位で丸めています。大半は1分以内ですが、最長で1030秒(17分程度)の場合もあったようです。
300秒にて山がありますが、これは5分毎に走るGTKの更新失敗やらのタイムアウトに起因するものと推測しています。
移動が激しいコミケのような環境では、接続後そのまま明示的に切断せずにクライアントが離脱することが多いため、
このような傾向があるものと考えています。</p>

<p><img src="http://enukane.github.io/images/2017-01-11/sta_dur_histogram.png" alt="sta-dur-histogram" /></p>

<h2>DHCP</h2>

<p>DHCPサーバがアドレスを割り当てた端末は 50 台でした。
先に述べたとおり、Assocした端末数は56端末であるため6台はDHCPによるアドレス取得まで至らなかったようです。</p>

<p>割り当てたアドレスは10.0.0.0/8から 45 アドレス分でした。
dnsmasqは比較的割り当てアドレスをばらけさせる傾向にありますが、うち5アドレスは重複して配布しています。
デフォルトでは DHCP Lease Time が 1h であるため再利用されたようです。</p>

<p>DHCPクライアントは DHCP Requestのオプションとしてホスト名を付与する場合があります。
このホスト名のユニーク数は今回 39 種でした。
ホスト名文字列として何が付与されるかは端末により異なります。
iOS系だと<strong>〜のiPhone</strong>といった形式、
androidだと<strong>android-XXXXXXXX</strong>といった乱数要素を含んだ文字列を用いる場合があります。
詳細は伏せますが、今回は以下の様な文字列が検出されました。</p>

<ul>
<li>iPhone/iPod Touchと推測されるもの(&ldquo;iphone&rdquo;, &ldquo;ipod&#8221;が含まれる): 14 個</li>
<li>iPadと推測されるもの(&ldquo;ipad&#8221;が含まれる): 5 個</li>
<li>androidと推測されるもの

<ul>
<li>&ldquo;android-XXXXX&rdquo; の形式: 12 個</li>
<li>機種名: 4 個</li>
</ul>
</li>
<li>不明(端末を推測可能な文字列を含まない): 4 個</li>
</ul>


<p>上記に挙げたとおり android にてホスト名に機種名を用いている例が4つありました。
以下の通り全てHuawei製品であり、このベンダでは一律このポリシーを採っているのかもしれません。</p>

<ul>
<li>HUAWEI_P9</li>
<li>HUAWEI_P9_lite</li>
<li>HUAWEI_Mate_9</li>
<li>Honor_8</li>
</ul>


<h2>DNS クエリ</h2>

<p>ハニポAPで動作しているDNSサーバでは期間中に合計556回 DNS クエリを受け取っており、
この対象レコードの内訳は以下の通りです。</p>

<ul>
<li>Aレコード: 504回</li>
<li>AAAAレコード: 50回</li>
<li>PTRレコード: 2回</li>
</ul>


<p>合計 123 個の名前にたいしてクエリを受信しました。
以下はその中で回数の多いほうからトップ10をプロットしたグラフです。
<em>connectivitycheck.gstatic.com</em> や <em>captive.apple.com</em>
のようにキャプティブポータル検知に用いられるホストが多く現れています。
またプッシュ通知を司るホスト向けの通信が多いことも伺えます。</p>

<p><img src="http://enukane.github.io/images/2017-01-11/query_top10.png" alt="query-top10" /></p>

<p>AAAA レコードへのクエリのみを抽出すると、以下の5ホストに対してのクエリを受信していました。
IPv6はサポートしていないため、一律NODATAを返しています。</p>

<ul>
<li>connectivitycheck.gstatic.com</li>
<li>clients3.google.com</li>
<li>mobile.pipe.aria.microsoft.com</li>
<li>a.config.skype.com</li>
<li>b.config.skype.com</li>
</ul>


<h2>キャプティブポータル</h2>

<p>名前でねじ曲げられた先のキャプティブポータルに対するアクセスは以下のようになっています。</p>

<ul>
<li>HTTPアクセス回数: 246 回</li>
<li>HTTPアクセスのユニーク送信元アドレス数: 43 個

<ul>
<li>うち5つのアドレスは重複割り当ての可能性あり</li>
</ul>
</li>
<li>HTTPアクセス対象ホストのユニーク数: 21 ホスト

<ul>
<li>先のクエリ対象ホストが123だったのに比べるとだいぶ少なめ</li>
<li>HTTPのみ対象のため？</li>
</ul>
</li>
</ul>


<p>以下はアクセス数の多いほうから、ホスト名のトップ10をプロットしたグラフです。
やはりキャプティブポータル検知用ホストへのアクセスが多めです。</p>

<p><img src="http://enukane.github.io/images/2017-01-11/http_host_histogram.png" alt="http-host-histogram" /></p>

<p>アクセス数のヒストグラムをURL全体に拡張し、そのトップ10を並べたものを以下に記載します。
全体では31個のURLに対するアクセスを記録しています。</p>

<p><img src="http://enukane.github.io/images/2017-01-11/http_url_histogram.png" alt="http-url-histogram" /></p>

<p>通常のWebアクセスらしきものや、Simejiの通信なども見えますが
大多数はキャプティブポータル検知用のURLに対するアクセスです。</p>

<ul>
<li>Apple系

<ul>
<li><a href="http://captive.apple.com/hotspot-detect.html">http://captive.apple.com/hotspot-detect.html</a></li>
<li><a href="http://captive.apple.com/XXXXXXXXXX/YYYYYYYYYYY/ZZZZZZZZZZZZZZZZZZZZZ.html">http://captive.apple.com/XXXXXXXXXX/YYYYYYYYYYY/ZZZZZZZZZZZZZZZZZZZZZ.html</a>

<ul>
<li>captive.apple.com はどのパスでも固定の応答が返る模様</li>
</ul>
</li>
</ul>
</li>
<li>Android系

<ul>
<li><a href="http://connectivitycheck.gstatic.com/generate_204">http://connectivitycheck.gstatic.com/generate_204</a></li>
<li><a href="http://clients3.google.com/generate_204">http://clients3.google.com/generate_204</a></li>
<li><a href="http://connectivitycheck.android.com/generate_204">http://connectivitycheck.android.com/generate_204</a></li>
<li><a href="http://10.0.0.1/generate_204">http://10.0.0.1/generate_204</a></li>
</ul>
</li>
</ul>


<p>今回検出したアクセス時のUser-Agentは大別すると以下の4種類に分けられそれぞれ一定の役割のもと
用いられているようです。</p>

<ul>
<li>CaptiveNetworkSupport系</li>
<li>Dalvik系</li>
<li>WebKit系</li>
<li>その他</li>
</ul>


<p>CaptivePortalSupportは主に captive.apple.com 向けの通信に使われていました。
ただしこれだけ、と言うわけではなく以下の様に CaptiveNetworkSupport系とMozilla系のUser-Agentを交互に利用しているようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10.0.0.73 GET /hotspot-detect.html FryingPan.lan captive.apple.com "CaptiveNetworkSupport-325.10.1 wispr" 200
</span><span class='line'>10.0.0.73 GET /hotspot-detect.html FryingPan.lan captive.apple.com "Mozilla/5.0 (iPhone; CPU iPhone OS 9_3_3 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13G34" 200</span></code></pre></td></tr></table></div></figure>


<p>CaptiveNetworkSupportを含むUser-Agent文字列には以下のパターンが存在していました。
WISPrの仕様上、User-Agent文字列は &ldquo;WISPR!任意の文字列&rdquo; ということになっているので
CaptiveNetworkSupportの文字列の出典および後続する数値列の意味は不明です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CaptiveNetworkSupport-346 wispr
</span><span class='line'>CaptiveNetworkSupport-325.10.1 wispr
</span><span class='line'>CaptiveNetworkSupport-277.10.5 wispr
</span><span class='line'>CaptiveNetworkSupport-306.20.1 wispr</span></code></pre></td></tr></table></div></figure>


<p>Android向けであると推測される connectivitycheck.gstatic.com等へのアクセスは主に Dalvik系 User-Agent から
なされています。が、Apple系とおなじくMozilla系Uer-Agentでのアクセスも確認されています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10.0.0.13 GET /generate_204 FryingPan.lan connectivitycheck.gstatic.com "Dalvik/2.1.0 (Linux; U; Android 7.0; Nexus 6 Build/NBD91P)" 200
</span><span class='line'>10.0.0.13 GET /generate_204 FryingPan.lan connectivitycheck.gstatic.com "Mozilla/5.0 (Linux; Android 7.0; Nexus 6 Build/NBD91P; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36" 200</span></code></pre></td></tr></table></div></figure>




<!---

- "KT/6.0.1 An/4.4.2 ko"
  - アプリ内の広告表示アクセスっぽい
- なし
  - simejiっぽい
- "iPad5,3/9.3.3 (13G34)"
  - iOSのPush通知関連？
- "dianxinos-user-agent"
  - Baidu系っぽい
- "LINE/2016.1114.1637 CFNetwork/758.5.3 Darwin/15.6.0"
  - LINE?
- "DXCoreService"
- "com.baidujp.Simeji.SimejiKB/243 CFNetwork/758.5.3 Darwin/15.6.0"
  - Simeji
- "Alamofire"
  - Simejiっぽい

--->


<h1>まとめ</h1>

<ul>
<li>コミケ91 1日目にてハニーポットAPを動かしてみた</li>
<li>62人のお客さんが釣れた

<ul>
<li>うち43人程度にはキャプティブWebページを見てもらえた模様</li>
<li>前回 (C90, 10人程度) に比べてだいぶアクセスしてもらえた</li>
</ul>
</li>
<li>キャプティブポータル検知をしてるらしい動きが見れた

<ul>
<li>iphone &amp; android がメイン?</li>
<li>PC系は今回はほぼいないのもあって確認できず</li>
<li>1台だけ Ubuntu マシンがいたが、キャプティブ検知っぽい動作はしていなかった</li>
</ul>
</li>
</ul>


<h1>Future Work</h1>

<p>お次やるとしたらこう工夫しようというToDoリスト</p>

<ul>
<li>DHCP リースタイムの延長

<ul>
<li>1日程度の方が良さそう</li>
</ul>
</li>
<li>運用時の可視化方法

<ul>
<li>本当は ruby 動かして管理用 WebUI が見れるはずだったけど、上手く動かなかった</li>
</ul>
</li>
<li>自律的な時刻同期

<ul>
<li>会期中一回落ちて時刻がおかしくなった</li>
<li>3G/LTE で NTP ?</li>
</ul>
</li>
<li>電源モジュールの基板化

<ul>
<li>ブレッドボードはつらい</li>
</ul>
</li>
<li>DHCP Fingerprinting で遊びたい</li>
<li>別の場所での運用

<ul>
<li>PC が多そうな環境で見てみたい</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今年やりたいこと＠2017]]></title>
    <link href="http://enukane.github.io/blog/2017/01/01/2017-01-01-hofu/"/>
    <updated>2017-01-01T00:06:53+09:00</updated>
    <id>http://enukane.github.io/blog/2017/01/01/2017-01-01-hofu</id>
    <content type="html"><![CDATA[<h2>2016年やれたこと</h2>

<ul>
<li>新年初日からておくれた(初日の出号のチケットが無駄に…)</li>
<li>メガネっ漢はじめました。本格的に目がだめだ。</li>
<li>生まれ年のウィスキー買った(グレンタレット 1986, 27年物)</li>
<li>同人誌2冊新刊だせた(Plan9 と 802.11それぞれ)

<ul>
<li>頒布同人誌、昨年比で併せて2.5倍ぐらいの数刷った、個人的にはかなり冒険な数だけどなんとか捌けた。感謝。</li>
<li>念願の、印刷所に印刷お願いした同人誌だせた。仕上がりとっても綺麗。</li>
</ul>
</li>
<li>一陸特とった。4.9Ghz帯で遊ぶためだったのにデバイスはまだない。</li>
<li>ジョギングはじめた(頻度は低い)</li>
<li>イベント向け無線LAN構築: 8件

<ul>
<li>主担当1件、お手伝い7件。基本的に無線LANの運用監視中心。</li>
</ul>
</li>
<li>はじめてのJANOG参加と沖縄</li>
<li>島

<ul>
<li>八丈島と沖縄いった</li>
</ul>
</li>
<li>葉巻始めました</li>
<li>西洋剃刀で髭剃る趣味始めました</li>
</ul>


<h2>2017年にやりたいこと</h2>

<p>追記中</p>

<ul>
<li>厳かに而立を迎える＠3月</li>
<li>言語系

<ul>
<li>仏検(2017/06, 4or3級)とる</li>
<li>独検(2017/06/25, 4or3級)とる</li>
<li>漢語水平考試(12/03, 2級)とる</li>
<li>アイスランド語勉強する</li>
<li>仏語で「Le Mythe de Sisyphe」読み切る</li>
</ul>
</li>
<li>一陸技(秋)とる</li>
<li>CCNA WIFUNDとる、たぶんCCENTが事前に必要っぽい</li>
<li>IEEE WCETうけたい(一陸技が必要で、受験料55k、つらい)</li>
<li>無線LAN利用状況監視の新しい方向性を作る</li>
<li>作る物の半分をgolangにしてみる (from ruby)</li>
<li>CAD覚える

<ul>
<li>3DプリンタでPiZero版キャプチャ箱のケースつくってみる</li>
<li>基板を起こしてみる(quickcharge用)</li>
</ul>
</li>
<li>ネットワークアナライザの使い方を覚える</li>
<li>FPGAとRFフロントエンドでなにかやりたい(ぼくの考えたさいきょーのキャプチャ箱とか)</li>
<li>IndesignまたはScribusへのｳｽｲﾎﾝ作成環境の移行(vivliostyleでもいいかも): acrobat proからの脱却</li>
<li>HarveyOS入門まとめる。今までの内容盛り込みつつ。</li>
<li>今年こそ「Plan9のブートプロセスを見る」の同人誌を作る</li>
<li>オペラ「ニーベルングの指環」第三夜見にいく@三月</li>
<li>片方の系の財政健全化</li>
<li>原付免許とる</li>
<li>船舶免許取りたい(2級?)</li>
<li>生活用の和服一式ほしい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[システム系論文紹介 Advent Calendar 2016 - 時刻同期話]]></title>
    <link href="http://enukane.github.io/blog/2016/12/04/2016-system-paper-adv-calendar/"/>
    <updated>2016-12-04T10:58:41+09:00</updated>
    <id>http://enukane.github.io/blog/2016/12/04/2016-system-paper-adv-calendar</id>
    <content type="html"><![CDATA[<h1>論文紹介: “Globally Synchronized Time via Datacenter Networks”</h1>

<p>本記事は システム系論文紹介 Advent Calendar 2016の4日目, 12/04 のための記事です.</p>

<h2>はじめに</h2>

<p>4日目 n_kane の担当分では今年の ACM SIGCOMM 2016 より時刻同期話ということで以下の論文を取り上げます.</p>

<ul>
<li>タイトル: Globally Synchronized Time via Datacenter Networks

<ul>
<li>著者 Ki Suh Lee et al. (Cornell University)</li>
<li>出展: ACM SIGCOMM 2016, Session 5, Datacenters 1</li>
<li><a href="http://dl.acm.org/authorize?N19282">論文へのリンク</a></li>
<li><a href="http://conferences.sigcomm.org/sigcomm/2016/files/program/sigcomm/Session05-Paper01-Global-Ki.pdf">スライド資料へのリンク</a></li>
</ul>
</li>
</ul>


<p>セッション自体の括りはデータセンター, 内容としても DC 環境での分散システム向けの時刻同期をターゲットにしています. このあたりは個人的な興味ではなかったのですが, 最近時刻同期関連(GPS, NTP, PTP 等等)を勉強しようと思っておりました. その矢先にこの論文を見つけたため今回取り上げることにしました.</p>

<h2>対象としている問題</h2>

<p>NTPやPTPをベースにした時刻同期はもはや無くてはならないプロトコルですが, ナノ秒レベルでの時刻同期が必要な場合, 精度に非決定性があるというのが本論文で取り上げ解決策を提示している問題です.</p>

<p>NTPはマイクロ〜ミリ秒, PTPはサブナノ秒の精度で時刻(クロック)同期が可能なプロトコルです. これらのプロトコルでは細かい差異はあるにせよ共に, 2台の計算機の間でRTTを測定し これをもとに一方向遅延(OWD One Way Delay)と相互のクロックの差(Offset)を算出, 時刻やクロックを合わせ, クロック発振器がそれを維持し定期的に再計測を行うという方法で 同期を行います.</p>

<p>この流れの RTT 計測, クロックの維持, 再計測に非決定的な誤差を生む要因がある, と本論文では主張しています. NTP, PTPはともに UDP ベースのプロトコルでありネットワーク帯域を消費しているため 間の経路の経路, 輻輳, 機器類のバッファリングや送受信のスケジューリングによる影響を受けます. ベースとなるRTT計測は往路復路が同じであることを前提としていますが, これが常に満たされるとは限りません. クロックの維持も誤差要因となります. 原子時計と異なり一般的なx86の計算機に積まれたクロックはそれぞれに 一定の誤差を生じながら動くため, 時が進むにつれズレが発生します. この補正のためには頻繁な再計測・再同期を行う必要がありますが, あまりに同期対象や頻度が多い場合に時刻同期に帯域を取られてしまうといった問題があります.</p>

<h2>解決策</h2>

<p>この論文では時刻同期を Ethernet で直結された2台の計算機間において PHY レイヤで行うことで 前節の問題を解決しようとしています. キモはEthernet で接続された計算機間では「既にNIC同士のクロックが同期されている」という点です. Figure 2 にクロックドメインについての図が掲載されていますが, Ethernetのフレームを送受信するにあたって送信側と受信側は実質同じ回路になっており 送信側のクロックに併せて動作をしていると考えることができます.</p>

<p>このNICレベルでのクロック同期を, システムレベルでのクロック同期に利用するというのが 本論文で提示する手法になっています. この手法を用いたクロック同期として DTP (Datacenter Time Protocol) とそれを実装した 10Gbit Ethernet PHY を取り上げています.</p>

<h2>ポイント</h2>

<p>この論文で DTP の推しポイントとして主張されているのは以下の3点です.</p>

<ol>
<li>802.3プロトコルのハックによるオーバーヘッド実質0のプロトコル</li>
<li>ナノ秒レベルでの同期で誤差が予測可能</li>
<li>スイッチを用いたスケーラブルなクロック同期が可能</li>
</ol>


<h3>1. オーバーヘッド実質0のプロトコル</h3>

<p>NTPやPTPと同じく DTP も RTT の計測からの一方向遅延の算出を基本としています. 最終的なクロック合わせをオフセットの計算ではなく「一番速いやつに合わせる」 というアルゴリズムの違いはありますが, やっていることはあまり替わりません.</p>

<p>大きな違いは先にも述べたとおり DTP では Ethernet の PHY レイヤで伝送を行う点です. 具体的には PHY の PCS (Protocol Control Sublayer) のスクランブル/デスクランブル化の直前に, 処理を差し込むことでこのレイヤで伝送されているコントロールブロックに載せて DTPのデータを送受信します.</p>

<p>このレイヤでは実際のデータ(Ethernetフレーム)転送の間にリンク維持やエラー通知を目的とした コントロールブロックの送受信が行われています. このうちDTPが有効なリンクでは Idle キャラクタの部分に DTP のデータを載せ送受信することとしています. PCSの上位レイヤには Idle キャラクタを正しく戻してやることで, Ethernetのデータ転送の帯域を実質的に 使うこと無くDTPのやりとりを行うことが可能となっています.</p>

<p>この方法の利点として Ethernet の伝送を邪魔しないこと, 高頻度にクロック同期が可能であることが挙げられます. Idleキャラクタのコントロールブロックは Ethernet フレームが流れる時はその前後に, 何も流れていない時は継続的に差し込まれるため Ethernet の帯域を消費しません. いわゆる10GbE, 100GbEといった速度はこの制御系の通信を除いたものであるためです. このコントロールブロックは輻輳している場合でも 1280〜7680ns の間隔で挿入が可能です. ワーストケースでも数usの周期でクロック同期を回すことが可能であるため, 精度の維持</p>

<h3>2. ナノ秒レベルで誤差予測可能なクロック同期</h3>

<p>DTP では同期誤差が「4T」に決定的(deterministic)に収まるように設計されています. ここで T は最も速いクロックの周期であり, 10Gbit Ethernetの場合は T = 1 / f = 1 / 156.25MHz = 6.4 nsとなるため, 25.6ns内に収まることになります.</p>

<p>この誤差予測が可能なのは PHY レイヤで同期しているためソフトウェアスタックが介在しないこと, 直結されているため間に何も入らないことにより誤差導入要素が(ほぼ)無いためです. 遅延要因としてはケーブル上の伝搬遅延やエンドポイントでの処理遅延が存在しますが これらは動的には変化しないと仮定を置くことができ, 事前に予測が可能です 一部 Clock Domaing Crossing, 相手のTXに乗ったクロックと自分のTXのクロック間の 遅延を解決するのにランダム性のある誤差が生じますがこれもどちらか速いほうの1クロック内に 収まるということのようです.</p>

<p>複数のPHYを計算機に挿すことでPTPのBoundary Clockのようにネットワークを跨がって時刻を 同期することも可能です. この場合でも「4TD + 8T」に誤差が収まるとしています. ここで D はホップ数を挿します. スモールワールド現象に則って6ホップ経由すればデータセンターの 全ての計算機にリーチできると仮定すると, どの計算機の間でも 153.6ns 以内に誤差が収まる クロック同期が可能となります.</p>

<h3>3. スケーラブルな時刻同期</h3>

<p>DTP は Ethernet が直結された2台間で行うことが基本ですが, スイッチがDTPをサポートすることで 2台以上のクロック同期が可能となっています. 前提としてスイッチの全ポートが同じクロックを共有するスイッチチップにより制御されていることが 必須にはなりますが, これを基軸として全ポートと DTP のやりとりを行うことで現在の最速クロックに 合わせるという動作が可能です.</p>

<h2>評価</h2>

<p>有効性の評価としてこの論文では DTP が PTP と比べて非決定性を抑制できていることを確認しています. PTPでは負荷の状況をなし, 中度, 重度と変えたときに300ns程度内, 25us程度内, 100us程度内と 誤差が大きくなっていきまた定常的にもブレが大きいことが見て取れます. 一方の DTP ではMTU 1500バイトの通常のEthernetややジャンボフレームの場合に負荷を掛けても ワーストケースで 4T = 25.6 ns内に常に収まっていることが確認できます.</p>

<h2>まとめとおわりに</h2>

<p>ここでは Ethernet の PHY レイヤを用いたクロック同期手法 DTP (Datacenter Time Protocol) についての論文を取り上げました. 時刻同期というよりはクロック同期であり, PTPと比してさらにハードウェアのサポートが必要であること, 同期ピア間でケーブルの直結が必要であることなど制約がより強い手法ではあります. ただし誤差の予測がネットワークを跨いでも可能であり必ずしも局所的にしか使えないといったものでもないようです.</p>

<p>スイッチの実装はまだ構想段階のようなので論文中の前提がフィールドで適用できるかどうかや, DTP を実装する NIC PHY のコストや性能への実際の影響についてはより調査や実験が必要と感じました. 個人的には IEEE 802.11ae の PCS をある意味ハックしているのが面白く感じました. また REFERENCES に時刻同期関連の一通りが並んでいるので大変にありがたい文章です.</p>

<h2>後付け: 他の候補</h2>

<p>その他, 今回紹介しようと思った候補としては以下に挙げるものがありました.</p>

<ul>
<li>ACM SIGCOMM 2016: Inter-Technology Backscatter: Towards Internet Connectivity for Implanted Devices, Iyer et al (University of Washington)</li>
<li>ACM SIGCOMM 2016: Evolve or Die: High-Availability Design Principles Drawn from Google’s Network Infrastructure, Govindan et al (Google/USC)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SEIL で OPEN IPv6 DDNS for NGN を使う]]></title>
    <link href="http://enukane.github.io/blog/2016/09/20/open-ipv6-ddns-on-seil/"/>
    <updated>2016-09-20T21:16:46+09:00</updated>
    <id>http://enukane.github.io/blog/2016/09/20/open-ipv6-ddns-on-seil</id>
    <content type="html"><![CDATA[<p>また Qiita。</p>

<blockquote><p><a href="http://qiita.com/n_kane/items/f4d098d6332f44ce5f8e">SEIL で OPEN IPv6 DDNS for NGN の DDNS 機能だけを使う</a></p></blockquote>

<p>IPoE契約してるとお外から名前で引けるようになるの便利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[\"Fluent Dashboard + SDR デバイスで周囲の電波状況を可視化してみる\" 書いた]]></title>
    <link href="http://enukane.github.io/blog/2016/09/13/fluentdashboard-with-sdr/"/>
    <updated>2016-09-13T23:02:15+09:00</updated>
    <id>http://enukane.github.io/blog/2016/09/13/fluentdashboard-with-sdr</id>
    <content type="html"><![CDATA[<p>久々に Qiita に記事書いた。</p>

<blockquote><p><a href="http://qiita.com/n_kane/items/d9037c8744634053dbab">Fluentd Dashboard + SDR デバイスで周囲の電波状況を可視化してみる</a></p></blockquote>

<p>Google SpreadSheet は便利だけど、描画の遅延とかが半端ないんでお次は App Engine + BigQuery かな。
ElasticSearch + Kibana でいい感じに横並びなメトリックが掛けるならそれが一番なんだけど&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[バランを作る]]></title>
    <link href="http://enukane.github.io/blog/2016/09/13/balun/"/>
    <updated>2016-09-13T08:43:54+09:00</updated>
    <id>http://enukane.github.io/blog/2016/09/13/balun</id>
    <content type="html"><![CDATA[<p>特に必須ではないらしいけど、ワイヤーアンテナにはバランを噛ましましょうという記述
があったので試しに作ってみた。 無線機側の同軸ケーブルは外部導体が GND に落ちてい
る「不平衡」である一方、アンテナからの入力は 内部・外部導体ともに電気的に対称で
「平衡」なのでこれが必要なのだとか。</p>

<ol>
<li><a href="http://www.geocities.jp/gomafu_club/ham/wireant/wireant.html">バランから作るお手軽HFワイヤ・アンテナの製作</a></li>
<li><a href="http://mk1502.web.fc2.com/sokuteiki/barun.htm">簡単に作れる、バランの作り方</a></li>
<li><a href="http://mk1502.web.fc2.com/sokuteiki/barun.htm">パッチンコア(クランプコア)でバランを自作する</a></li>
<li><a href="http://www.geocities.jp/bfgyjl3284/Balun.htm">バランの製作</a></li>
<li><a href="http://www.ndxc.org/tech/horibapdf/000811-001.pdf">長波対応ロングワイヤ用バランの製作</a></li>
<li><a href="http://www.na.rim.or.jp/~ja3haw/NO58B.PDF">バランの製作</a></li>
</ol>


<p>基本的な作り方は1番目のエントリを丸々なぞった。FT-50-43なるトロイダルコアを使う
のが筋らしい。が見つからなかったので秋月のそれっぽいやつで代用した。5番目のエン
トリを見ると巻き数にきちんと計算が必要らしいのでてきとう極まりない。</p>

<p>巻いたトロイダルコアはこんな感じ。 なおどこのサイトの記述か忘れたが、撚り線を作
るには電動ドライバに束ねた線の端を噛ませて作ると良いらしいとのこと。 もう一方の
端を手かペンチで保持してゆっくりドライバを回すといい感じに撚れる。</p>

<p><img src="http://enukane.github.io/images/2016-09-13/bounded-toroidal-core.jpg" alt="束縛されるトロイダルコア" /></p>

<p>完成したバランはこんな感じ。赤黒のターミナルがアンテナ行き、SMAが無線機行き。</p>

<p><img src="http://enukane.github.io/images/2016-09-13/balun-0.jpg" alt="バラン試作0号" /></p>

<p>SWR計を持ってないんでどれほどきちんと作れてるのかは不明。</p>

<p>ところで手持ちの受信機で HF 帯まで受信できるの ALINCO の DJ-X7 しかない。早くア
ップコンバータが欲しい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DIY電波望遠鏡 - 部材検討]]></title>
    <link href="http://enukane.github.io/blog/2015/09/08/2015-09-08-radio-telescope/"/>
    <updated>2015-09-08T21:36:21+09:00</updated>
    <id>http://enukane.github.io/blog/2015/09/08/2015-09-08-radio-telescope</id>
    <content type="html"><![CDATA[<p>HackRF の遊び方を広げるための一手段として電波望遠鏡の実装に使えないかを考えてみる.</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.asj.or.jp/geppou/archive_open/2012_105_10/105_631.pdf">マイ・電波望遠鏡とExcelで電波地図を作る</a></li>
<li><a href="https://www.jarl.org/Japanese/1_Tanoshimo/1-3_Ham-Fair/2010/radio-observation.pdf">宇宙の電波をキャッチしてみよう</a></li>
<li><a href="http://tenkyo.net/kaiho/pdf/2009_05/2009-05-03.pdf">BSアンテナ電波望遠鏡で 7/22 部分日食を観察しよう</a></li>
<li><a href="http://www.nhao.jp/research/annual_report/docs/ar2011-2.pdf">ＢＳアンテナを用いた電波望遠鏡の教育利用</a></li>
<li><a href="http://ir.lib.osaka-kyoiku.ac.jp/dspace/bitstream/123456789/5789/1/KJ382300123.pdf">簡単なアンテナによる銀河電波の測定</a></li>
<li><a href="http://www.asj.or.jp/geppou/archive_open/1989/pdf/19890707.pdf">簡単な電波望遠鏡による低周波電波天文学</a></li>
<li><a href="http://www.asj.or.jp/geppou/archive_open/1993/pdf/19930402c.pdf">私の電波望遠鏡 - II</a></li>
<li><a href="http://www.rtl-sdr.com/tag/simple_ra/">RTL-SDR FOR BUDGET RADIO ASTRONOMY</a></li>
<li><a href="http://www.britastro.org/radio/projects/An_SDR_Radio_Telescope.pdf">Experiments with a Software Defined Radio Telescope</a></li>
</ul>


<h2>構成</h2>

<p><img src="http://enukane.github.io/images/2015-09-08/plan-diy-radio-telescope.png" alt="2015-09-08-diy-rt" /></p>

<ul>
<li>SDRデバイスはRaspiで操作</li>
<li><a href="https://github.com/patchvonbraun/simple_ra">simple_ra</a>を利用して観測・記録

<ul>
<li>場合によっては改造すること</li>
<li>要ソース読み</li>
</ul>
</li>
</ul>


<h2>必要な物品</h2>

<h3>既に持っているもの</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">部材</th>
<th style="text-align:center;">品目</th>
<th style="text-align:right;">値段</th>
<th style="text-align:center;">個数</th>
<th style="text-align:left;">用途</th>
<th style="text-align:left;">備考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">SDRデバイス</td>
<td style="text-align:center;"> DVB-T+DAB+FM USB チューナ</td>
<td style="text-align:right;"> 1,420 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> SDR用 </td>
<td style="text-align:left;"> BNC端子へのアダプタ必要, できればこっちを使う </td>
</tr>
<tr>
<td style="text-align:center;"></td>
<td style="text-align:center;"> HackRF One </td>
<td style="text-align:right;"> $300.00 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> SDR用 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">BNC-SMA コネクタ </td>
<td style="text-align:center;"> ??? </td>
<td style="text-align:right;"> ??? </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> DVB-T用 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">同軸ケーブル(SMA) </td>
<td style="text-align:center;"> ??? </td>
<td style="text-align:right;"> ??? </td>
<td style="text-align:center;"> 2 </td>
<td style="text-align:left;"> SDRデバイスへの接続用 </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h3>買うべき物</h3>

<table>
<thead>
<tr>
<th style="text-align:center;">部材</th>
<th style="text-align:center;">品目(候補)</th>
<th style="text-align:right;">値段</th>
<th style="text-align:center;">個数</th>
<th style="text-align:left;">用途</th>
<th style="text-align:left;">備考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> BS/CSアンテナ </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B00XZX39EI">東芝 BCA-453A</a> </td>
<td style="text-align:right;"> 4,580 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> 受信用 </td>
<td style="text-align:left;"> 周波数範囲(11.7〜12.75GHz), ビックカメラの方が<a href="http://www.biccamera.com/bc/disp/CSfGoodsPage_001.jsp?GOODS_NO=3118307">安いかも</a> </td>
</tr>
<tr>
<td style="text-align:center;"> アンテナ取り付け金具 </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B006ZCFGH4">DXアンテナ VM321H</a> </td>
<td style="text-align:right;"> 3,730 (送料込み) </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> ベランダ取り付け用 </td>
<td style="text-align:left;"> 9cm幅, 7cm下がる様な金具 </td>
</tr>
<tr>
<td style="text-align:center;"> BS/CS ブースタ </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B000TW9D66">日本アンテナ CSB-C25-SP</a> </td>
<td style="text-align:right;"> 2,370 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> アンプ用 </td>
<td style="text-align:left;"> 電源供給が必要, 場合に依っては電源付きのブースタの方がいいかも </td>
</tr>
<tr>
<td style="text-align:center;"> パワーインサータ </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B008R6A3QK">プレクス PX-LNBADAPTOR</a> </td>
<td style="text-align:right;"> 1,980 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> アンテナへの電源供給(ラインブースタの場合) </td>
<td style="text-align:left;"> 分配器が必要 </td>
</tr>
<tr>
<td style="text-align:center;"> 分配器 </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B003WSYUNK">HORIC BCUV-971</a> </td>
<td style="text-align:right;"> 880 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> パワーインサータと入出力の結合 </td>
<td style="text-align:left;"> 40cmのケーブル x 2が付属 </td>
</tr>
<tr>
<td style="text-align:center;"> すき間ケーブル(F形) </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B005025U0I">SOLIDCABLE #3232E/0.3</a> </td>
<td style="text-align:right;"> 1080 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> 窓通す用 </td>
<td style="text-align:left;"> 30cm </td>
</tr>
<tr>
<td style="text-align:center;"> 同軸ケーブル(F形) </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B00IJ2H1Z8">S-4C-FB</a> </td>
<td style="text-align:right;"> 570 </td>
<td style="text-align:center;"> 2 </td>
<td style="text-align:left;"> 外用 + 中用 </td>
<td style="text-align:left;"> 1.5m </td>
</tr>
<tr>
<td style="text-align:center;"> F-SMA変換アダプタ </td>
<td style="text-align:center;"> <a href="http://www.amazon.co.jp/dp/B0057STB8W">F-SMAP 変換アダプタ</a> </td>
<td style="text-align:right;"> 563 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:left;"> SMA同軸ケーブルへの接続用 </td>
<td style="text-align:left;"> SMAJ-SMAJが必要 </td>
</tr>
</tbody>
</table>


<p>合計 17000円弱?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[イベント無線LANでのチャネル使用率調査]]></title>
    <link href="http://enukane.github.io/blog/2015/08/31/event-radio-utilization/"/>
    <updated>2015-08-31T18:20:55+09:00</updated>
    <id>http://enukane.github.io/blog/2015/08/31/event-radio-utilization</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<p>いつもやっている、イベント会場でのパケットキャプチャに加えてここ最近チャネルごとの使用率の収集も始めました。</p>

<h3>計測対象</h3>

<p>今回、計測対象にしたのは以下の4イベント(7回)。大抵、鞄の中にデバイスを入れて移動しつつパケットキャプチャを行っています。設置場所を確保できた場合、定点観測的に収集をしています。</p>

<table>
<thead>
<tr>
<th style="text-align:left;">イベント              </th>
<th style="text-align:left;">日             </th>
<th style="text-align:center;">場所                           </th>
<th style="text-align:center;"> 固定? </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">なにか                </td>
<td style="text-align:left;"> 2015/08/02    </td>
<td style="text-align:center;">どこか                         </td>
<td style="text-align:center;"> <strong>Y</strong> </td>
</tr>
<tr>
<td style="text-align:left;">コミケ (C88)          </td>
<td style="text-align:left;"> 2015/08/14    </td>
<td style="text-align:center;">東京ビッグサイト ホール(東、西)</td>
<td style="text-align:center;"> N     </td>
</tr>
<tr>
<td style="text-align:left;">                      </td>
<td style="text-align:left;"> 2015/08/15    </td>
<td style="text-align:center;">東京ビッグサイト ホール(東、西)</td>
<td style="text-align:center;"> N     </td>
</tr>
<tr>
<td style="text-align:left;">                      </td>
<td style="text-align:left;"> 2015/08/16    </td>
<td style="text-align:center;">東京ビッグサイト ホール(東)    </td>
<td style="text-align:center;"> <strong>Y</strong> </td>
</tr>
<tr>
<td style="text-align:left;">YAPC::Asia Tokyo 2015 </td>
<td style="text-align:left;"> 2015/08/14    </td>
<td style="text-align:center;">東京ビッグサイト 会議棟        </td>
<td style="text-align:center;"> N     </td>
</tr>
<tr>
<td style="text-align:left;">                      </td>
<td style="text-align:left;"> 2015/08/14    </td>
<td style="text-align:center;">東京ビッグサイト 会議棟        </td>
<td style="text-align:center;"> N     </td>
</tr>
<tr>
<td style="text-align:left;">コミティア113         </td>
<td style="text-align:left;"> 2015/08/30    </td>
<td style="text-align:center;">東京ビッグサイト ホール(2,3)   </td>
<td style="text-align:center;"> N     </td>
</tr>
</tbody>
</table>


<h2>チャネル利用率のヒートマップ</h2>

<p>5分毎に区切って、チャネルごとにヒートマップ化したものを並べてみる。</p>

<h3>2015/08/02 あたりのイベント</h3>

<p><img src="http://enukane.github.io/images/2015-08-31/ev0802-util.png" alt="2015-08-02-util" /></p>

<h3>コミケ (C88)</h3>

<p>コミケでは、1日目および2日目は一般参加、三日目のみサークル参加だったため東 P-18b にて定点観測を実施。
動的観測の場合、列に並んだあとに観測開始し買い物が終わってビッグサイトから出て国際展示場に行くまでの間のどこかで停止している。</p>

<ul>
<li>列に並んだ時間 (西)

<ul>
<li>1日目: 10:15頃</li>
<li>2日目: 10:10頃</li>
</ul>
</li>
<li>ビッグサイトを出た時間

<ul>
<li>1日目: 12:50頃</li>
<li>2日目: 11:10頃</li>
</ul>
</li>
<li>彷徨ったルート (覚えてる範囲で)

<ul>
<li>1日目: 西(入場) → 東123→東456→西(退場)</li>
<li>2日目: 西(入場) → 東123→東456→西(ホール)→西(退場)</li>
</ul>
</li>
</ul>


<h4>1日目 (2015/08/14)</h4>

<p><img src="http://enukane.github.io/images/2015-08-31/c88-d1.png" alt="2015-08-14-util" /></p>

<h4>2日目 (2015/08/15)</h4>

<p><img src="http://enukane.github.io/images/2015-08-31/c88-d2.png" alt="2015-08-15-util" /></p>

<h4>3日目 (2015/08/16)</h4>

<p><img src="http://enukane.github.io/images/2015-08-31/c88-d3.png" alt="2015-08-16-util" /></p>

<h3>YAPC::Asia Tokyo 2015</h3>

<p>こちらは CONBU チーム (いわゆる Wi-Fi 班)として参加したときのもの. 作業時に邪魔にならない場合、ショルダーバッグにデバイスを入れて彷徨うようにはしていました. が、バックヤードに起きっぱなしの時間も大分あったため有為なデータが取れていない可能性は多々ありそう。</p>

<h4>1日目 (2015/08/21)</h4>

<p><img src="http://enukane.github.io/images/2015-08-31/yapc2015-d1.png" alt="2015-08-21-util" /></p>

<h4>2日目 (2015/08/22)</h4>

<p><img src="http://enukane.github.io/images/2015-08-31/yapc2015-d2.png" alt="2015-08-22-util" /></p>

<h3>コミティア113 (2015/08/30)</h3>

<p><img src="http://enukane.github.io/images/2015-08-31/comitia113.png" alt="2015-08-22-util" /></p>

<h2>考察</h2>

<ul>
<li>何となく移動が見える

<ul>
<li>特にビッグサイト(ホール)

<ul>
<li>5GHz帯 36、48、64、100 chの濃淡

<ul>
<li>ホールから抜けたかどうかが判断できそう</li>
</ul>
</li>
<li>C88 1日目、2日目の移動に連動していそう?</li>
</ul>
</li>
<li>YAPCの結果を見ても、場所変化には連動している模様</li>
<li>Wi-Fiをオフされた時も同様の状況になりうるので一概に逆は言えないが&hellip;.</li>
</ul>
</li>
<li>2.4GHz帯側の分布具合

<ul>
<li>8/2 と YAPCのそれはだいぶ綺麗にみえる

<ul>
<li>1、6、11 chの中央とそれらの両隣が濃く出ている</li>
<li>これらのイベントでは、会場内無線LANのコントロールが提供側でそこそこなされていたため？</li>
<li>野良APまたはクライアントの絶対数の有無?</li>
</ul>
</li>
<li>&ldquo;人の密集度 == 2.4GHz帯側の濃度&rdquo; という仮説

<ul>
<li>C88 1日目、2日目の2.4GHz と 5GHz の比較より</li>
<li>ホールから出て 5GHz 帯側が明らかに薄くなっていて、2.4GHz帯側はそこまで落ちない時間がある

<ul>
<li>まだ列に並んでると思しき時間</li>
<li>ホール間移動と思しき時間</li>
<li>帰途についてビッグサイトを出たと思しき時間</li>
</ul>
</li>
<li>モバイルルータの影響？</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>実装</h2>

<p>以下、軽く実装についてメモ</p>

<h3>情報源として用いる情報</h3>

<p>チャネル利用率の算出には iw コマンドの以下のオプションを用いました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% iw wlan0 survey dump</span></code></pre></td></tr></table></div></figure>


<p>survey dumpでは以下の様にそのチャネルに移動してからのアクティブ時間(=移動後の経過時間)とビジーだった時間が得られます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Survey data from wlan0
</span><span class='line'>        frequency:                      2412 MHz [in use]
</span><span class='line'>        noise:                          -83 dBm
</span><span class='line'>        channel active time:            35900 ms
</span><span class='line'>        channel busy time:              24814 ms
</span><span class='line'>        channel transmit time:          0 ms</span></code></pre></td></tr></table></div></figure>


<p>今回用いたデバイス(WLP-UC-AG300, チップはRT2870)の場合、この値はソースコード上の以下の部分で計算しています。
<a href="https://github.com/torvalds/linux/blob/master/drivers/net/wireless/rt2x00/rt2800lib.c#L7984">https://github.com/torvalds/linux/blob/master/drivers/net/wireless/rt2x00/rt2800lib.c#L7984</a></p>

<p>なおここでの&#8221;ビジー&#8221;は、送受信またはノイズによりこれらがストップしていたチップの動作時間であり、以下の様な関係式がなりたちます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>channel busy time   = receive time + transmit time + other time
</span><span class='line'>channel active time = busy time + idle time</span></code></pre></td></tr></table></div></figure>


<p>チップによっては transmit time の他に receive time も個別に取り出せるので other つまり 802.11 以外の電波により送受信ができていなかった時間も取れるのですが今回は対象外としました。</p>

<h3>tochkad での記録</h3>

<p>このように取れるチャネル利用率を、パケットキャプチャデバイスの主観部分を担う <a href="https://github.com/enukane/tochka/">tochkad</a> のチャネル遷移部分で取得するようにしました。</p>

<ul>
<li><a href="https://github.com/enukane/tochka/blob/master/lib/tochka/athsurvey.rb">athsurvey.rb</a></li>
</ul>


<p>tochkadは0.5秒毎にチャネル遷移するので大分短い時間ではありますが、ログ上に以下の様に utilization (利用率)が載るようになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2015-08-02 15:20:43 +0900]     DEBUG: channel moved to 11 from 10 (dur=6510、size=481767780、walk=6062、utilization=59.68 uch=10)</span></code></pre></td></tr></table></div></figure>


<p>この利用率は tochka デバイスについている LCD ディスプレイ (tochka-miniui) にも出すようにしています (赤枠部分)</p>

<p><img src="http://enukane.github.io/images/2015-08-31/tochka-miniui.jpg" alt="tochka-miniui" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SIGCOMM2015: Large-scale Measurements of Wireless Network Behavior を読む]]></title>
    <link href="http://enukane.github.io/blog/2015/08/28/sigcomm2015-large-scale-wlan-net/"/>
    <updated>2015-08-28T09:10:56+09:00</updated>
    <id>http://enukane.github.io/blog/2015/08/28/sigcomm2015-large-scale-wlan-net</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<p>リンク: <a href="http://conferences.sigcomm.org/sigcomm/2015/pdf/papers/p153.pdf">http://conferences.sigcomm.org/sigcomm/2015/pdf/papers/p153.pdf</a></p>

<ul>
<li>SIGCOMM &lsquo;15で発表された論文。Cisco Merakiの人たちが著者。</li>
<li>Merakiはいわゆるクラウド型無線LANコントローラとAPのセットのサービス。</li>
<li>自社のサービスを展開している中で収集されたデータのオーバービュー的な文章。</li>
</ul>


<h3>読んだモチベーション</h3>

<ul>
<li>Wireless Network という題に惹かれて</li>
<li>お仕事で似た様なことやってるため</li>
</ul>


<h2>内容</h2>

<p><a href="http://lafrenze.hatenablog.com/entry/2015/08/04/120205">落合先生フォーマット</a>に従って並べてみる</p>

<h3>どんなもの？</h3>

<ul>
<li>Merakiのサービスを提供するに当たって収集したデータの分析を行った

<ul>
<li>2万台のMeraki AP, 2万個のネットワーク, 5百万クライアント/week の規模</li>
<li>これらのネットワークにぶら下がる数百万のデバイスの様々な情報が自社のDBに溜まっている

<ul>
<li>ネットワークに所属するデバイスたち: AP, クライアント端末(ノートPC, スマホ e.t.c), スイッチ, ルータ など</li>
<li>情報: 接続断のイベント, 通信先 など</li>
<li>Meraki(のサービス側)は, いわゆる無線LANコントローラなのでこれらの情報を常にpolling/収集している</li>
</ul>
</li>
</ul>
</li>
<li>これだけ規模が大きく, 期間も長いと&#8221;無線LANネットワークのトレンド&#8221;的なものが見えてくる

<ul>
<li>電波的な傾向

<ul>
<li>他のAP or 802.11以外の干渉</li>
</ul>
</li>
<li>規格上の傾向

<ul>
<li>2.4 or 5GHz帯への偏り</li>
<li>802.11g, a, n, acの偏り(利用率の変化)</li>
<li>チャネル幅の遷移</li>
<li>ストリーム数の遷移</li>
</ul>
</li>
<li>クライアントの傾向

<ul>
<li>OSのバリエーション</li>
<li>信号強度</li>
</ul>
</li>
<li>ネットワークの傾向

<ul>
<li>いわゆる普通のトラフィック分析</li>
<li>アプリケーション利用率</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>先行研究と比べて何がすごい？何が違う？</h3>

<ul>
<li>まず数

<ul>
<li>Gemberら(当該研究者が所属する大学ネットワークや施設のネットワークが対象)、Rodrigら(カンファレンスネットワークが対象)等、干渉の計測やネットワークトラフィックの分析を行った研究は存在する。この論文では、さらに大規模なユーザベースでの分析を行っている。</li>
<li>Hotspotを対象にそこそこの規模で行った例としては Ghoshら(243000デバイス)、Google (500AP, 30000クライアント)等があるがこれらはあくまでHotspot向けであり、この論文(およびMerakiのサービス)が対象としているオフィス/キャンパスユースではない</li>
</ul>
</li>
<li>計測期間の長さ (とそこから来るデータ量)

<ul>
<li>おもに他の研究ではショットないし1年内程度のスパンで行ったものが主

<ul>
<li>短いスパンであれば、個々の技術・計測に関する分析を行った既存研究は多種存在する</li>
<li>干渉の定性的分析や規格の技術的妥当性の検証という観点で</li>
</ul>
</li>
<li>この論文では5年程度のスパンで見ている

<ul>
<li>&ldquo;トレンド&#8221;という点に着目できる内容になっている</li>
<li>さらに取得した、サービスの継続にあたって重要な無線LANインフラ(!=無線LAN only)の情報を分析対象としている</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>技術の手法とかキモはどこ？</h3>

<ul>
<li>サービスのプロダクション環境に当該情報収集系を組み込んだところ

<ul>
<li>いわゆる&#8221;実用&#8221;の場でのデータが取れる</li>
<li>お客さんのバリエーション == &ldquo;実用”の度合い に直結する</li>
</ul>
</li>
<li>観点として「サービスの継続性」のための情報収集に特化しているところ

<ul>
<li>個々の規格・技術の妥当性検証というよりは、その現れ方・利用され方の観測が主</li>
</ul>
</li>
</ul>


<h3>どうやって有効だと検証した？</h3>

<ul>
<li>Evaluationとして有効性を示す文章はない</li>
<li>強いて言えば実環境でこんな感じのデータが取れたぜ！という報告に近い?</li>
</ul>


<h3>議論はある？</h3>

<ul>
<li>(TBD)</li>
</ul>


<h3>次に読むべき論文は？</h3>

<ul>
<li>GamberらのとGoogleのやつ？

<ul>
<li><ol type="a">
<li>Gember, A. Anand, and A. Akella. A comparative study of handheld and non-handheld traffic in campus wi-fi networks.</li>
</ol>
</li>
<li><ol type="a">
<li>Afanasyev, T. Chen, G. M. Voelker, and A. C. Snoeren. Usage patterns in an urban wifi network</li>
</ol>
</li>
</ul>
</li>
<li>Senらの&#8221;Cspy: finding the best quality channel without probing&#8221;も気になる

<ul>
<li><ol type="a">
<li>Sen, B. Radunovic, J. Lee, and K.-H. Kim. Cspy: finding the best quality channel without probing.</li>
</ol>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC2015 に CONBU プロジェクトメンバとして参加してきました]]></title>
    <link href="http://enukane.github.io/blog/2015/08/26/yapc2015/"/>
    <updated>2015-08-26T13:57:56+09:00</updated>
    <id>http://enukane.github.io/blog/2015/08/26/yapc2015</id>
    <content type="html"><![CDATA[<p>掲題の通り YAPC::Asia Tokyo 2015 に CONBU スタッフ (いわゆる Wi-Fi 班)として参加してきました.
今年で最後の yapcasia だそうですが, 今回が初参加なので最初で最後になってしまいました.
なおずっとpingの結果と, スペアナの画面だけ見ていたので内容まできちんと聞き入ってたセッションがありません&hellip;.</p>

<p>CONBUの華々しい活動については, 以下をご覧頂くと良いかと思います.</p>

<ul>
<li><a href="http://tsuchinoko.dmmlabs.com/?p=2122">YAPC::Asia Tokyo2015 の会場ネットワークをCONBUが構築しました</a></li>
<li><a href="http://togetter.com/li/864607">CONBUの記録 (YAPC::Asia Tokyo 2015編)</a></li>
</ul>


<h3>感想</h3>

<p>正直なところ, ネットワーク周りに首ったけになっていた結果 Perl のカンファレンスに参加したというよりお祭りに参加してネットワーク敷設のお手伝いしてきた, という印象の方が強かったです. Perl は10年ぐらいまえに CGI で遊んでた頃に書いたっきり全く触ってなかったので perl mongers に取り囲まれてぼっこぼこにされるんじゃないかと震えてたのですが, ruby やら go やら思ったより多様性に溢れていたのが印象的でした. なおちらっと Larry Wall の実物は見ることができました.</p>

<h3>YAPCらしきことをつぶやいてたログ</h3>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">なおこんな感じのアロハ <a href="http://t.co/f1VfP6BJZW">pic.twitter.com/f1VfP6BJZW</a></p>&mdash; えぬかね@C88ありがとうございました (@n_kane) <a href="https://twitter.com/n_kane/status/634266022900400128">2015, 8月 20</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">コミケ6日目 (@ 東京国際展示場 (東京ビッグサイト/Tokyo Big Sight) - <a href="https://twitter.com/T_Bigsight">@t_bigsight</a> in Koto, 東京都) <a href="https://t.co/9s894TJKVj">https://t.co/9s894TJKVj</a> <a href="http://t.co/lHRKGaVziW">pic.twitter.com/lHRKGaVziW</a></p>&mdash; えぬかね@C88ありがとうございました (@n_kane) <a href="https://twitter.com/n_kane/status/634876158719361024">2015, 8月 21</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>どこまでベラベラしゃべって良いのか判断ついてなかったので, あんまりないね&hellip;</p>

<h3>聞いてたセッション</h3>

<p>かろうじて片耳で聞いてたセッションの一覧はこんな感じ</p>

<ul>
<li><a href="http://yapcasia.org/2015/talk/show/cc0ec485-1879-11e5-aca1-525412004261">TBD</a> by Matz

<ul>
<li>streemのお話からセッションに潜入.</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2015/talk/show/523b9508-0d77-11e5-8174-67dc7d574c3a">うっかりをなくす技術</a> by karupanerura</li>
<li><a href="http://yapcasia.org/2015/talk/show/39a15ad4-0ff5-11e5-a984-d7f07d574c3a">Discover the Microsoft Azure </a> by Tatsuro Hisamori

<ul>
<li><a href="https://docs.com/hisamori-tatsur/1104">1日140円から始めるIoTデータ分析・可視化</a> はちょっと読んでおきたい</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2015/talk/show/dd8ce20e-fad2-11e4-b6e7-8ab37d574c3a">データ分析基盤を支える技術</a>  by repeatedly

<ul>
<li>ちょうど後述する「パケット集め」で集めたデータどうするかーという段階だったので一番気になるセッションではありました</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2015/talk/show/81342dae-1351-11e5-ab94-d9f87d574c3a">カンファレンスネットワークの作り方</a> by CONBU

<ul>
<li>みんな聞きにきたよね?</li>
</ul>
</li>
</ul>


<p>Wi-Fi的にはD, Eが激戦区だったのでそのあたりには居たのですがセッションの内容まで覚えてるのはこの辺りの模様&hellip;</p>

<h3>なぜか CONBU は LT で設営デモもやりました</h3>

<p>どこかに映ってる, ヒゲダルマを探そう.</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">CONBUの設営、すばらしい！ <a href="https://twitter.com/hashtag/yapcasia?src=hash">#yapcasia</a> <a href="http://t.co/NNn4sRdc4a">pic.twitter.com/NNn4sRdc4a</a></p>&mdash; 馮　富久/FUON Tomihisa (@tomihisa) <a href="https://twitter.com/tomihisa/status/635003905504481280">2015, 8月 22</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">突然目の前に無線APが生えてきた <a href="https://twitter.com/hashtag/yapcasia?src=hash">#yapcasia</a> <a href="http://t.co/UWcSzvRv08">pic.twitter.com/UWcSzvRv08</a></p>&mdash; ぷりんたいは求職中です、 (@spacepro_be) <a href="https://twitter.com/spacepro_be/status/635004222291902464">2015, 8月 22</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/n_kane">@n_kane</a> <a href="https://twitter.com/kichi_robo">@kichi_robo</a> 未公開シーンです、ご査収ください <a href="http://t.co/mcF5xBafUJ">pic.twitter.com/mcF5xBafUJ</a></p>&mdash; ぷりんたいは求職中です、 (@spacepro_be) <a href="https://twitter.com/spacepro_be/status/635038626984816640">2015, 8月 22</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h3>パケット集め</h3>

<p>一週間前にあったコミケでも持ち込んだ下記のデバイスを YAPC でも持ち込んで, バッグのなかに入れつつうろうろしてました.
(下記はコミケの時の写真)</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">あとスペースの裏側で、今日も今日とて無線LAN(802.11)のパケットキャプチャしてます。今回書きたかった&amp;次回書きたい、キャプチャデバイス→embulk→DB→解析系の一連の流れ、に食わせる最初の一歩の子になります。 <a href="http://t.co/TeMvyv3whl">pic.twitter.com/TeMvyv3whl</a></p>&mdash; えぬかね@C88ありがとうございました (@n_kane) <a href="https://twitter.com/n_kane/status/632757086124838912">2015, 8月 16</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>最終的に, 単純なpcapngのデータサイズとしては 3GBほど, フレーム数にして 10M フレーム, となかなか良い感じにあつまりました.
会場Wi-Fi, 日中は定常的に 100Mbps ほど出ていたとのことでフレーム飛び交いまくってたはずなのでやっぱり集まりが良いようです.</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">朝方postgreにぶち込み終わってたはずのC88とYAPC2015で集めたフレームたちのヘッダデータ、良い感じの分量だ。さすがにYAPCでは通信が盛んだったのか二日分の割にコミケのそれより倍多い。 <a href="http://t.co/9wvHk3nrDV">pic.twitter.com/9wvHk3nrDV</a></p>&mdash; えぬかね@C88ありがとうございました (@n_kane) <a href="https://twitter.com/n_kane/status/636094941878292480">2015, 8月 25</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h3>終わりに</h3>

<p>最初で最後の YAPC::Asia Tokyo にネットワークスタッフとして参加, そしてそっちに夢中になっててあんまり本編を聞いていないとかどういうこっちゃという感じではありますが, それはそうとしてそれなりに楽しまさせていただきました. 関係者の皆様ありがとうございました.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[貧乏人でもスペアナがしたい!]]></title>
    <link href="http://enukane.github.io/blog/2015/05/01/bimbo-spectrum-analyzer/"/>
    <updated>2015-05-01T12:51:00+09:00</updated>
    <id>http://enukane.github.io/blog/2015/05/01/bimbo-spectrum-analyzer</id>
    <content type="html"><![CDATA[<h2>貧乏人でもスペアナがしたい!(掲題ママ)</h2>

<p>新品を買うと, 数十万〜数百万だし, ヤフオク等の中古品でも明らかなジャンク品でないものに限ったとしても十〜数十万ぐらいは行ってしまう.</p>

<p>やりたいことができて, こわしても気落ちしない程度のモノが欲しいので探してみたメモ.</p>

<p>やりたいことベースでのおおよその要件は以下の通り
(貧乏人にしては盛りすぎだ!生意気だ!等のコメントはNO)</p>

<ul>
<li>(MUST) 無線LANの周波数帯がカバーできること

<ul>
<li>2.4 &amp; 5GHz帯</li>
</ul>
</li>
<li>(MUST) PCと連携できること

<ul>
<li>(SHOULD) 外部のスクリプト等で扱える形式でデータがエクスポートできること</li>
<li>(MAY) あるいは, 独自形式でもかまわないが仕様が公開されていること</li>
</ul>
</li>
<li>(MUST) 数十万円後半は絶対にNO

<ul>
<li>10〜20万ぐらいが限度</li>
</ul>
</li>
<li>(MAY) RBW と sweeptimeの両立がそこそこ成り立つこと

<ul>
<li>(MAY) できれば20/40MHzスパンに対して200〜300kHzのRBWで数百ms程度が望ましい (秒はかからない程度であれば)</li>
</ul>
</li>
<li>(MAY) できれば普通のスペアナと同じような汎用性

<ul>
<li>スペアナのお勉強用に使えること</li>
</ul>
</li>
<li>(MAY) Mac向けのアプリがあること

<ul>
<li>(MAY) あるいはUNIX系からアクセス可能なインタフェース(ライブラリ/API etc)が用意されていること</li>
</ul>
</li>
<li>(MAY) USBバスパワーで動くこと</li>
<li>(MAY) 携帯可能な電源仕様, 形状, 重さであること</li>
</ul>


<p>おおよそ2つの側面があって, きちんとしたスペアナ買ってお勉強したいというのと, 今までやってきている無線LANキャプチャに織り交ぜたいという2つの方向からの要求が混ざっている. 分けた方がいいような気はする.</p>

<h2>候補になりそうな人たち</h2>

<p>中古のスペアナをヤフオクで探すのは継続するとして, ハンディに使えそうな子達.</p>

<ul>
<li>Giga ST</li>
<li>RF Explorer 6G Combo</li>
<li>Aaronia AG

<ul>
<li>SPECTRAN HF-6060V4</li>
<li>SPECTRAN HF-6060V4 X</li>
</ul>
</li>
<li>Metageek WiSpy DBx</li>
<li>Signal Hound

<ul>
<li>USB-SA124B</li>
<li>BB60C</li>
</ul>
</li>
<li>Tektronix RSA306</li>
</ul>


<table>
<thead>
<tr>
<th style="text-align:left;">機種</th>
<th style="text-align:right;">お値段</th>
<th style="text-align:center;">周波数レンジ</th>
<th style="text-align:left;">RBW</th>
<th>スイープ時間</th>
<th>アプリ対応OS</th>
<th> export可? </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">GigaSt v5c</td>
<td style="text-align:right;">29,000 (税, 送料込み)</td>
<td style="text-align:center;">3 - 12000MHz</td>
<td style="text-align:left;">15/30/180 KHz</td>
<td>500ms? (SPAN:100MHz, RBW:180KHz)</td>
<td>Windows</td>
<td> 形式不明 </td>
</tr>
<tr>
<td style="text-align:left;">RF Explorer 6G Combo</td>
<td style="text-align:right;">43,800 (税込み)</td>
<td style="text-align:center;">15 - 2700MHz, 4850 - 6100 MHz</td>
<td style="text-align:left;"> 2.6 - 812 kHz </td>
<td> 200ms? (Span: 60MHz, 600KHz) </td>
<td>Windows, Mac(?) </td>
<td> XML/CSV </td>
</tr>
<tr>
<td style="text-align:left;">SPECTRAN HF-6060V4</td>
<td style="text-align:right;"> €999.95 (129,384) </td>
<td style="text-align:center;"> 10MHz - 6GHz </td>
<td style="text-align:left;"> 3kHz - 50MHz </td>
<td> 200ms (Span: 20MHz, RBW: 300kHz) </td>
<td> Windows, Linux, Mac </td>
<td> CSV </td>
</tr>
<tr>
<td style="text-align:left;">SPECTRAN HF-6060V4 X</td>
<td style="text-align:right;"> €999.95 (129,384) </td>
<td style="text-align:center;"> 10MHz - 6GHz </td>
<td style="text-align:left;"> 3kHz - 50MHz </td>
<td> 200ms (Span: 20MHz, RBW: 300kHz) </td>
<td> Windows, Linux, Mac </td>
<td> CSV </td>
</tr>
<tr>
<td style="text-align:left;">WiSpy DBx</td>
<td style="text-align:right;"> $1,149 (136,834) </td>
<td style="text-align:center;"> 2.4GHz帯, 5GHz帯 </td>
<td style="text-align:left;"> 500ms (Span: 95MHz, RBW: 333KHz) </td>
<td> 500ms or 1s ? </td>
<td>Windows, Mac </td>
<td> sqlite DB </td>
</tr>
<tr>
<td style="text-align:left;">USB-SA124B</td>
<td style="text-align:right;"> $1,995 (238,386) </td>
<td style="text-align:center;"> 100kHz - 12.4GHz </td>
<td style="text-align:left;"> 100Hz - 250KHz, 6MHz </td>
<td> </td>
<td> Windows </td>
<td> ? </td>
</tr>
<tr>
<td style="text-align:left;">BB60C</td>
<td style="text-align:right;"> $2,879 (342,860) </td>
<td style="text-align:center;"> 9kHz - 6GHz </td>
<td style="text-align:left;"> 10khz </td>
<td> 24GHz/sec </td>
<td> Windows </td>
<td> ? </td>
</tr>
<tr>
<td style="text-align:left;">RSA306</td>
<td style="text-align:right;">434,000</td>
<td style="text-align:center;">9kHz - 6.2GHz</td>
<td style="text-align:left;"> 10Hz - 10MHz </td>
<td> 100us (Span: 400MHz, RBW: 300KHz) </td>
<td> Windows </td>
<td> CSV </td>
</tr>
</tbody>
</table>


<h3>諸々の前提</h3>

<ul>
<li>とりあえず無線LANターゲットなので, スパンとして20/40/80/160MHzがありうる

<ul>
<li>OFDMの各キャリアは312.5KHz間隔</li>
</ul>
</li>
<li>RBWと掃引時間の関係: sweeptime [s] = (k * span [Hz]) / (RBW [Hz])<sup>2</sup>

<ul>
<li>掃引時間はRBWの二乗に反比例</li>
<li>掃引時間は周波数スパンに比例</li>
</ul>
</li>
</ul>


<h2>候補</h2>

<h3>GigaSt v5c</h3>

<ul>
<li><p>参考</p>

<ul>
<li><a href="http://www.wa.commufa.jp/gigast/GigaSt5/GigaSt-v5.html">http://www.wa.commufa.jp/gigast/GigaSt5/GigaSt-v5.html</a></li>
<li><a href="https://www.youtube.com/watch?v=3vLZrA0e8EY">https://www.youtube.com/watch?v=3vLZrA0e8EY</a></li>
</ul>
</li>
<li><p>Pros</p>

<ul>
<li>安い! (送料込みで3万円以下)</li>
<li>USBバスパワー駆動</li>
<li>内部的にはシリアル(VCP) &amp; コントロール等々のドキュメントはそろってるので他OSでも触るのは簡単そう</li>
</ul>
</li>
<li>Cons

<ul>
<li>ケースはないので自分で用意</li>
<li>「グラフデータ保存機能」でどんな形式がサポートされてるか</li>
<li>注文ウィンドウがよく分からない (受付してない時期がある?)</li>
</ul>
</li>
</ul>


<h2>RF Explorer 6G Combo / WiFi Combo</h2>

<ul>
<li><p>参考</p>

<ul>
<li><a href="http://rfexplorer.com/combo-specs/">http://rfexplorer.com/combo-specs/</a></li>
<li><a href="https://www.youtube.com/watch?v=3ZhdcUJanCI">https://www.youtube.com/watch?v=3ZhdcUJanCI</a></li>
</ul>
</li>
<li><p>Pros</p>

<ul>
<li>コンパクト</li>
<li>そこそこお安い(5万内)</li>
<li>千石電商でも売っているので手には入れやすい</li>
<li>デバイスにLCDがついてる</li>
<li>バッテリー付き(16時間+ぐらいは動くらしい)</li>
<li>こちらも内部的にはシリアルっぽいのでコマンド叩けばいろいろ遊べる (<a href="https://code.google.com/p/rfexplorer/">rfexplorer</a>)</li>
</ul>
</li>
<li>Cons

<ul>
<li>2700MHz〜4850MHzの間は計測不可

<ul>
<li>とはいっても今のところ使い道はない</li>
</ul>
</li>
<li>基本となるアプリ(<a href="http://rfexplorer.com/touchstone/">touchstone</a>)は無料だけど, 一部のアプリが有料 ($49)

<ul>
<li>有料版(PRO)でないとxml/csvへのエクスポート機能がない</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Aaronia SPECTRAN HF-6060V4 / HF-6060V4 X</h2>

<ul>
<li>参考

<ul>
<li><a href="http://www.aaronia.com/products/spectrum-analyzers/HF-6060-V4-RF-Spectrum-Analyzer/">SPECTRAN HF-6060 V4</a></li>
<li><a href="http://www.aaronia.com/products/spectrum-analyzers/HF-6060-V4-X-USB-remote-Analyzer/">SPECTRAN HF-6060 V4 X</a></li>
</ul>
</li>
</ul>


<p>V4はいわゆるハンドヘルド版で, V4 Xがデスクトップ向け.</p>

<ul>
<li>Pros

<ul>
<li><a href="http://www.aaronia.com/products/software/">MCS</a>なるアプリが無料, Win/Mac/Linuxをそれぞれサポートしてる</li>
<li>V4ハンドヘルド版は単体で動作可能</li>
<li>サポートしてる周波数帯は基本的に連続 (どこかで途切れてる可能性はあるが)</li>
<li>悪くない価格 (11万程度)</li>
</ul>
</li>
<li>Cons

<ul>
<li>V4 XがUSBバスパワーだけでは動かない. 動いたら完璧だったのに&hellip;

<ul>
<li>モバイルバッテリーでは無理だろうが, DCなバッテリー + 電源ケーブル調達でなんとかなりそうではある</li>
</ul>
</li>
<li>V4ハンドヘルド版の動作時間は?</li>
<li>V4とV4 Xの機能面での差は?

<ul>
<li>LCD, ジョグダイヤルの有無</li>
<li>付属アンテナ:</li>
<li>HyperLOG EMC directional LogPer antenna: 7060 vs なし</li>
<li>OmniLOG 90200 radial isotropic antenna: なし vs あり</li>
<li>Xのみ: マーカの数unlimited, 複数デバイス操作可, スイープポイント無限等々

<ul>
<li>Xの方にだけPRO版ソフト?とやらが付いてくるらしいが?</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>WiSpy DBx</h2>

<ul>
<li>参考

<ul>
<li><a href="http://www.metageek.com/products/wi-spy/">WiSpy</a></li>
</ul>
</li>
</ul>


<p>「無線LAN &amp; スペアナ」でググると一番最初に出てくるデファクトスタンダード品みたいなもの.</p>

<ul>
<li>Pros

<ul>
<li>無線LANに特化

<ul>
<li>AP(SSID)一覧との紐付けが標準で存在している</li>
<li>「チャネル:周波数」の変換</li>
</ul>
</li>
<li>Macのアプリがある (Channalyzer)</li>
<li>kismetが出してる<a href="https://www.kismetwireless.net/spectools/">spectools</a>を使えばLinuxでも動きそう</li>
</ul>
</li>
<li>Cons

<ul>
<li>スペアナと見たときに, 細かいことがあまりできない

<ul>
<li>細かいパラメータがいじれない</li>
<li>無線LAN以外にはあまり使えなさそう

<ul>
<li>無線LAN特化のスペアナという立ち位置</li>
<li>現状無線LAN以外に使う予定はないが, 勉強用なので諸々のパラメータは弄りたい</li>
</ul>
</li>
<li>5GHz帯は細かくチャネルごとに見れない

<ul>
<li>2.4GHz帯はチャネル毎に見れる</li>
</ul>
</li>
</ul>
</li>
<li>その割には値段が高い (13万ぐらい)</li>
</ul>
</li>
</ul>


<p>スイープの性能については以下の通り. 見てる幅により固定になっている.</p>

<ul>
<li>2.4GHz 全体

<ul>
<li>Span: 95.310MHz ( 2400 - 2495 MHz )</li>
<li>RBW: 333.3 KHz</li>
<li>スイープ時間: 500ms?</li>
</ul>
</li>
<li>2.4GHz各チャネル (例としてチャネル 1)

<ul>
<li>Span: 424MHz ( 2400 - 2424 MHz )</li>
<li>RBW: 100kHz</li>
<li>スイープ時間: 500ms?</li>
</ul>
</li>
<li>5GHz

<ul>
<li>Span: 676.7 MHz ( 5160 - 5836 MHz )</li>
<li>RBW: 150.0 KHz</li>
<li>スイープ時間: 1s?</li>
</ul>
</li>
</ul>


<h2>Signal Hound USB-SA124B / BB60C</h2>

<ul>
<li><p>参考</p>

<ul>
<li><a href="https://signalhound.com/products/bb60c/">BB60C</a></li>
<li><a href="https://signalhound.com/products/usb-sa124b/">USB-SA124B</a></li>
<li><a href="https://www.youtube.com/watch?v=OWrp4M-T2r0">BBC60 Demo and Remote</a></li>
<li><a href="https://www.youtube.com/playlist?list=PL3IOktxB0nG5baFmDHwiZrb284akt6n9K">SA-Series Videos</a></li>
</ul>
</li>
<li><p>Pros</p>

<ul>
<li>スぺアナというよりはHackRFとかUSRPみたいなSDRデバイス + スペアナができるアプリという感じ</li>
<li>BB60Cに至っては24GHz/sec sweep speed (>= 10kHz RBW)</li>
</ul>
</li>
<li>Cons

<ul>
<li>お値段は微妙 (RSA306に手が届きそうな値段)</li>
<li>スペアナというよりSDR. これかうならHackRF買った方がよさそうな気はする.</li>
</ul>
</li>
</ul>


<h2>Tektronix RSA306</h2>

<ul>
<li><a href="http://jp.tek.com/spectrum-analyzer/rsa306-0">RSA306型USBスペクトラム・アナライザ</a></li>
</ul>


<p>Tektronixが出した「USBリアルタイムスペクトラムアナライザ」</p>

<ul>
<li>Pros

<ul>
<li>反応めっちゃはやい

<ul>
<li>40MHz幅内ならRBW 120KHzぐらいまでならだいぶぬるぬる表示する</li>
</ul>
</li>
<li>ソフトはタダ (基本部分は, という条件付きだが)</li>
<li>USB3.0ポート一つで制御・電源供給</li>
</ul>
</li>
<li>Cons

<ul>
<li>お値段

<ul>
<li>とはいえこの性能比で考えれば破格. 単純に予算の問題</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chokaigi 2015 Wi-Fiみてきた]]></title>
    <link href="http://enukane.github.io/blog/2015/04/28/chokaigi2015-wifi/"/>
    <updated>2015-04-28T17:31:09+09:00</updated>
    <id>http://enukane.github.io/blog/2015/04/28/chokaigi2015-wifi</id>
    <content type="html"><![CDATA[<p>ニコニコ超会議2015で Free Wi-Fi が提供されている、とのことだったので
どんな感じなのか偵察に行くついでにいつもの如くパケットあつめて
データをまとめてみた.</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/47427093 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015-02-23 Released embulk-input-pcapng-files 0.1.0]]></title>
    <link href="http://enukane.github.io/blog/2015/02/24/2015-02-23-embulk-input-pcapng-files/"/>
    <updated>2015-02-24T09:07:52+09:00</updated>
    <id>http://enukane.github.io/blog/2015/02/24/2015-02-23-embulk-input-pcapng-files</id>
    <content type="html"><![CDATA[<p>pcapngファイルを読み込むembulk inputプラグインの新しいのをリリースしました.</p>

<ul>
<li><a href="https://rubygems.org/gems/embulk-input-pcapng-files">embulk-input-pcapng-files</a></li>
<li><a href="https://github.com/enukane/embulk-input-pcapng-files">enukane/embulk-input-pcapng-files</a></li>
</ul>


<p>embulk 0.4.X系ではプラグイン体系が0.3.X系のそれとは異なっているため,
これまで晒していた<a href="https://rubygems.org/gems/embulk-plugin-input-pcapng-files">embulk-plugin-input-pcapng-files</a>
が動作しません. これを修正したものが上記になります.</p>

<p>使い方自体は変わらず, 以下の様なconfig.ymlを書いて実行すると&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exec: {}
</span><span class='line'>in:
</span><span class='line'>  type: pcapng_files
</span><span class='line'>  paths: [ /Users/enukane/Desktop/emtestpcap/ ]
</span><span class='line'>  threads: 2
</span><span class='line'>  schema:
</span><span class='line'>    - { name: frame.number,                 type: long }
</span><span class='line'>    - { name: frame.time_epoch,             type: long }
</span><span class='line'>    - { name: frame.len,                    type: long }
</span><span class='line'>    - { name: radiotap.length,              type: long }
</span><span class='line'>    - { name: radiotap.mactime,             type: long }
</span><span class='line'>    - { name: radiotap.flags.preamble,      type: long }
</span><span class='line'>    - { name: radiotap.flags.wep,           type: long }
</span><span class='line'>    - { name: radiotap.flags.fcs,           type: long }
</span><span class='line'>    - { name: radiotap.flags.shortgi,       type: long }
</span><span class='line'>    - { name: radiotap.datarate,            type: long }
</span><span class='line'>    - { name: radiotap.channel.freq,        type: long }
</span><span class='line'>    - { name: radiotap.channel.type.ofdm,   type: long }
</span><span class='line'>    - { name: radiotap.dbm_antsignal,       type: long }
</span><span class='line'>    - { name: radiotap.dbm_antnoise,        type: long }
</span><span class='line'>    - { name: radiotap.xchannel,            type: long }
</span><span class='line'>    - { name: radiotap.xchannel.freq,       type: long }
</span><span class='line'>    - { name: radiotap.xchannel.type.ofdm,  type: long }
</span><span class='line'>    - { name: radiotap.mcs.gi,              type: long }
</span><span class='line'>    - { name: radiotap.mcs.bw,              type: long }
</span><span class='line'>    - { name: radiotap.mcs.index,           type: long }
</span><span class='line'>    - { name: wlan.fc.type_subtype,         type: long }
</span><span class='line'>    - { name: wlan.ta,                      type: string }
</span><span class='line'>    - { name: wlan.ra,                      type: string }
</span><span class='line'>    - { name: wlan.sa,                      type: string }
</span><span class='line'>    - { name: wlan.da,                      type: string }
</span><span class='line'>out:
</span><span class='line'>  type: mysql
</span><span class='line'>  host: localhost
</span><span class='line'>  user: testuser
</span><span class='line'>  password: testpassword
</span><span class='line'>  database: testdb
</span><span class='line'>  table: testtb
</span><span class='line'>  mode: insert
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じにoutput先 (今回の場合はMySQL) にデータをはき出してくれます.</p>

<p><img src="http://enukane.github.io/images/2015-02-23-pcapngmysql.png" alt="pcapng-mysql" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015-02-12 DS-Liteいれてみた]]></title>
    <link href="http://enukane.github.io/blog/2015/02/12/2015-02-12-dslite/"/>
    <updated>2015-02-12T23:50:42+09:00</updated>
    <id>http://enukane.github.io/blog/2015/02/12/2015-02-12-dslite</id>
    <content type="html"><![CDATA[<h2>追記</h2>

<ul>
<li>2015/02/13 「速度計測その2」を追加</li>
<li>2015/02/16 「速度計測その3」を追加</li>
</ul>


<h2>はじめに</h2>

<p>新居でのフレッツv6オプションおよび IIJmio FiberAccess/NF の準備ができたので
<a href="https://www.iijmio.jp/guide/outline/ipv6/ipv6_access/dslite/">DS-Lite</a>で
IPv4での疎通性を確保してみた.
が, ちょいと速度面で問題?があったのでメモ.</p>

<h2>設定</h2>

<p>設定は以下を参照. フィルタ周りの設定やIPv4 PPPoe周りを継ぎ足してほぼそのままで導入.</p>

<ul>
<li><a href="http://www.seil.jp/blog/ds-lite">SEIL/x86でDS-Lite</a></li>
</ul>


<h2>動作確認</h2>

<p>tracerouteを取ってみるとこんな感じに transix.jp を通って
IPv4インターネットに出て行けてることが確認できたら完了.
<img src="http://enukane.github.io/images/traceroute-dslite.png" alt="traceroute-dslite" /></p>

<p>なお普通にIPv4 PPPoE経由でいくとこんな感じになる.
<img src="http://enukane.github.io/images/traceroute-iijmio.png" alt="traceroute-iijmio" /></p>

<h2>速度計測</h2>

<p>問題は速度で, 以下の様な三者間で速度を測ってみるとどうにも DS-Lite 経由の iperf の結果が芳しくない.</p>

<p><img src="http://enukane.github.io/images/dslitevspppoe.png" alt="dslitevspppoe" /></p>

<table>
<thead>
<tr>
<th style="text-align:left;">経由       </th>
<th style="text-align:left;">ISPまたは事業者    </th>
<th style="text-align:center;">対戦表</th>
<th style="text-align:right;">速度(Mbps)</th>
<th style="text-align:left;">備考             </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">???        </td>
<td style="text-align:left;"> sakura internet?  </td>
<td style="text-align:center;">1     </td>
<td style="text-align:right;">87.2      </td>
<td style="text-align:left;">VPS側の速度計測用</td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">2     </td>
<td style="text-align:right;">46.5      </td>
<td style="text-align:left;">                 </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">3     </td>
<td style="text-align:right;">43.5      </td>
<td style="text-align:left;">                 </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">2     </td>
<td style="text-align:right;">87.9      </td>
<td style="text-align:left;">                 </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">3     </td>
<td style="text-align:right;">73.7      </td>
<td style="text-align:left;">                 </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> Interlink         </td>
<td style="text-align:center;">2     </td>
<td style="text-align:right;">88.6      </td>
<td style="text-align:left;">                 </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> Interlink         </td>
<td style="text-align:center;">3     </td>
<td style="text-align:right;">69.4      </td>
<td style="text-align:left;">                 </td>
</tr>
</tbody>
</table>


<ul>
<li>なお上流はフレッツ光マンションタイプ・ミニ(VDSL方式)なので,最大100Mbps</li>
<li>ルータにはSEIL/X1を利用</li>
<li>常にsakura VPS側がiperf server

<ul>
<li>1の場合は, 東京第二側をserverに</li>
</ul>
</li>
<li>めんどうなので一発勝負. 5回平均や最大値採取はせず</li>
</ul>


<p>おおよそIIJmio側もInterlink側も70〜80Mbps程度は出ているように見受けられる.
一方, DS-Liteを通すとなぜか40〜50Mbpsに下がる模様.</p>

<p>さて, なんででしょう.</p>

<h2>速度計測その2</h2>

<p>上記速度計測では, LAN内からはiperf clientとしてしか通信していなかったので,
ここではiperf3 (ver 3.0.11)のReverseモードを使って, 上り下り両方を測ってみる.
なお, 上記速度計測とは以下の違いがある.</p>

<ul>
<li>今度は MacBookAir + Thunderbolt Ethernet Adapterをiperf clientとして利用

<ul>
<li>若干速くなってる</li>
</ul>
</li>
<li>IIJmioとinterlinkには速度差はあまりないのでinterlink側経由の速度は省略</li>
</ul>


<table>
<thead>
<tr>
<th style="text-align:left;">経由       </th>
<th style="text-align:left;">ISPまたは事業者    </th>
<th style="text-align:center;">対戦表</th>
<th style="text-align:center;">向き      </th>
<th style="text-align:right;">速度(Mbps): sender</th>
<th style="text-align:right;">速度(Mbps): receiver</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">2     </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;"><strong>51.5</strong>          </td>
<td style="text-align:right;"><strong>51.2</strong>            </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">2     </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">90.4              </td>
<td style="text-align:right;">89.9                </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">3     </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;"><strong>53.5</strong>          </td>
<td style="text-align:right;"><strong>53.1</strong>            </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">3     </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">90.9              </td>
<td style="text-align:right;">90.4                </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">2     </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;">93.8              </td>
<td style="text-align:right;">93.8                </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">2     </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">94.1              </td>
<td style="text-align:right;">93.4                </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">3     </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;">87.3              </td>
<td style="text-align:right;">86.3                </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">3     </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">88.6              </td>
<td style="text-align:right;">87.5                </td>
</tr>
</tbody>
</table>


<ul>
<li>iperf3はクライアント側からサーバ側に向けてトラフィックを出す</li>
<li>&ldquo;-R&#8221;オプションで逆方向になる</li>
<li>このため, &ldquo;-R&#8221;なしがUP, &rdquo;-R&#8221;ありがDOWN</li>
</ul>


<p>DS-LiteのUP方向が妙に抑えられているようだ. DOWN方向は普通に速度が出ている.</p>

<h2>速度計測その3</h2>

<p>&ldquo;option ipv6 avoid-path-mtu-discovery on|off&#8221;を切り替えてみる.
対戦表は2のみ.</p>

<table>
<thead>
<tr>
<th style="text-align:left;">経由       </th>
<th style="text-align:left;">ISPまたは事業者    </th>
<th style="text-align:center;">avoid-path-mtu-discovery</th>
<th style="text-align:center;">向き      </th>
<th style="text-align:right;">速度(Mbps): sender</th>
<th style="text-align:right;">速度(Mbps): receiver</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">default                 </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;"><strong>50.4</strong>          </td>
<td style="text-align:right;"><strong>50.2</strong>            </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">default                 </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">90.2              </td>
<td style="text-align:right;">89.8                </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">off                     </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;"><strong>75.0</strong>          </td>
<td style="text-align:right;"><strong>74.9</strong>            </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">off                     </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">90.5              </td>
<td style="text-align:right;">90.0                </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">on                      </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;"><strong>52.0</strong>          </td>
<td style="text-align:right;"><strong>51.7</strong>            </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">on                      </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">90.7              </td>
<td style="text-align:right;">90.4                </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">X                       </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;">93.7              </td>
<td style="text-align:right;">93.7                </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">X                       </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">93.4              </td>
<td style="text-align:right;">92.5                </td>
</tr>
</tbody>
</table>


<p>offにすると少し良くなるようだ.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015-01-28 embulk-plugin-input-pcapng-files書いた]]></title>
    <link href="http://enukane.github.io/blog/2015/01/29/2015-01-28-embulk-playground/"/>
    <updated>2015-01-29T00:03:51+09:00</updated>
    <id>http://enukane.github.io/blog/2015/01/29/2015-01-28-embulk-playground</id>
    <content type="html"><![CDATA[<h3>追記 (2015/01/29 20:03)</h3>

<p>ver 0.0.2切った. ファイルのソート周りはまだ直してない.</p>

<p><a href="https://rubygems.org/gems/embulk-plugin-input-pcapng-files">https://rubygems.org/gems/embulk-plugin-input-pcapng-files</a></p>

<h3>追記 (2015/01/29 19:49)</h3>

<p>手元で動作確認してたらいつの間にか次のバージョンのembulkがリリースされてた.
おかしいぞ&hellip;さっきのpullreqで入れてもらったワークアラウンド試し始めたばっかりなのに&hellip;(もう不要になった)</p>

<p><a href="https://twitter.com/frsyuki/status/560750747608817665">https://twitter.com/frsyuki/status/560750747608817665</a></p>

<h3>追記 (2015/01/29 19:38)</h3>

<p>frsyuki先生から後ろ方のてきとーなメモに対する, 大変丁寧なコメントを頂けた. なるほどなるほど.</p>

<p><a href="https://gist.github.com/frsyuki/dcfb30690fd453542f45">https://gist.github.com/frsyuki/dcfb30690fd453542f45</a></p>

<p>ついでにいろいろと手直しして頂いて感謝感謝</p>

<ul>
<li><a href="https://github.com/enukane/embulk-plugin-input-pcapng-files/pull/1">https://github.com/enukane/embulk-plugin-input-pcapng-files/pull/1</a></li>
<li><a href="https://github.com/enukane/embulk-plugin-input-pcapng-files/pull/2">https://github.com/enukane/embulk-plugin-input-pcapng-files/pull/2</a></li>
</ul>


<h2>はじめに</h2>

<p>前々からやっているコミケその他イベントでの無線LAN解析(※)に良い感じに使えそうなので
pcapngファイルからの入力を取れる &ldquo;embulk-plugin-input-pcapng-files&rdquo; なるプラグインを書いてみました.</p>

<ul>
<li><a href="https://github.com/enukane/embulk-plugin-input-pcapng-files">enukane/embulk-plugin-input-pcapng-files</a></li>
<li><p><a href="https://rubygems.org/gems/embulk-plugin-input-pcapng-files">rubygems - embulk-plugin-input-pcapng-files</a></p></li>
<li><p>※</p>

<ul>
<li><a href="http://www.slideshare.net/enukane/comiket-space-29723016">http://www.slideshare.net/enukane/comiket-space-29723016</a></li>
<li><a href="http://www.slideshare.net/enukane/comiket-space-c86">http://www.slideshare.net/enukane/comiket-space-c86</a></li>
<li><a href="http://www.slideshare.net/enukane/c87-wifi-comiket-space">http://www.slideshare.net/enukane/c87-wifi-comiket-space</a></li>
</ul>
</li>
</ul>


<p>中身はまんまtshark呼んでるだけですが, 抽出条件をコンフィグに書けたり出力先を柔軟に変更可能だったりと
embulkのよさげなところを活かせそうなのが良い感じです.</p>

<p>今までは集めた多量のpcapngファイルを, ひとつひとつ真心()込めてスクリプトに食わせてたので
これを期に自動化の流れが造れるとベター.
またそこまで行かなくともこれまでに溜め込んだpcapngファイルの再掘り起こしが容易になるので
それだけでも良い感じです.</p>

<p>正直pcapngをこんな感じに触りたい人いない気がするので, 誰にも使ってもらえない感&hellip;</p>

<h3>使い方</h3>

<p>コンフィグファイルはこんな感じになります.
いわゆるguessはできないので手打ちで全部書く必要があります.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exec: {}
</span><span class='line'>in:
</span><span class='line'>  type: pcapng_files
</span><span class='line'>  paths: [/Users/enukane/Desktop/emtestpcap/, /tmp]
</span><span class='line'>  threads: 3
</span><span class='line'>  schema:
</span><span class='line'>    - { name: frame.time_epoch, type: long }
</span><span class='line'>    - { name: frame.len, type: long }
</span><span class='line'>    - { name: wlan.ta, type: string }
</span><span class='line'>    - { name: wlan.ra, type: string }
</span><span class='line'>out: {type: stdout}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>typeにはpcapng_filesを指定します</li>
<li>pathsには, 処理したいpcapngファイルが入ったディレクトリを配列で指定します</li>
<li>threadsは, 並列度を指定します

<ul>
<li>上記paths内で見つかったpcapngファイルたちをこのthreadsの数に分配して並行に処理がなされる, はず</li>
<li>ちゃんと動いてるかは未確認&hellip;</li>
</ul>
</li>
<li>schemaにはpcapng中の抽出したいフィールド名(name)と変換先の型(type)を指定します

<ul>
<li>フィールド名は, wireshark/tsharkで -e オプションのfilterとして使っている名前が指定できます</li>
<li>型は今のところstringかlongのみ</li>
</ul>
</li>
</ul>


<p>これをpreviewコマンドで指定してみるとこんな感じ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>enukane@glenda-lairなう（´・ω・｀）つ ~/Sources/embulk-test % java -jar embulk.jar preview config.yml
</span><span class='line'>+-------------------------------------------------+-----------------------+----------------+-------------------+-------------------+
</span><span class='line'>|                                     path:string | frame.time_epoch:long | frame.len:long |    wlan.ta:string |    wlan.ra:string |
</span><span class='line'>+-------------------------------------------------+-----------------------+----------------+-------------------+-------------------+
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             45 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             39 |                   | c4:7d:4f:56:e5:19 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             57 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             45 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             39 |                   | 20:c9:d0:d8:37:31 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |            146 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             57 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |            151 | c4:7d:4f:56:e5:1c | 33:33:00:01:00:03 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |            131 | c4:7d:4f:56:e5:1c | 01:00:5e:00:00:fc |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |            283 | c4:7d:4f:56:e5:18 | ff:ff:ff:ff:ff:ff |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             45 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             39 |                   | c4:7d:4f:56:e5:19 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |            146 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             57 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             45 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             39 |                   | c4:7d:4f:56:e5:19 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             57 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             45 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             39 |                   | 20:c9:d0:d8:37:31 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |            146 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             57 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |            151 | c4:7d:4f:56:e5:1c | 33:33:00:01:00:03 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |            131 | c4:7d:4f:56:e5:1c | 01:00:5e:00:00:fc |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |            283 | c4:7d:4f:56:e5:18 | ff:ff:ff:ff:ff:ff |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             45 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             39 |                   | c4:7d:4f:56:e5:19 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |            146 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
</span><span class='line'>| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             57 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
</span><span class='line'>+-------------------------------------------------+-----------------------+----------------+-------------------+-------------------+</span></code></pre></td></tr></table></div></figure>


<ul>
<li>previewでは部分的なタスクしか実行されません (ここではtask5.pcapngがぬけている)

<ul>
<li>runコマンドで出力される, &ldquo;次の状態のコンフィグ&#8221;も出力されません</li>
</ul>
</li>
<li>ただし上記のように良い感じに表っぽい出力がなされます</li>
</ul>


<p>実際にrunコマンドで走らせると以下の様になります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>enukane@glenda-lairなう（´・ω・｀）つ ~/Sources/embulk-test % java -jar embulk.jar run config.yml -o config.yml
</span><span class='line'>2015-01-29 11:29:44,264 [INFO]: main:org.embulk.exec.LocalExecutor: Running 3 tasks using 8 local threads
</span><span class='line'>2015-01-29 11:29:44,265 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  0 / 3, running: 0}
</span><span class='line'>/Users/enukane/Desktop/emtestpcap//test5.pcapng,1413615217,45,28:cf:e9:4d:bb:91,c4:7d:4f:56:e5:1d
</span><span class='line'>/Users/enukane/Desktop/emtestpcap//test5.pcapng,1413615217,39,,28:cf:e9:4d:bb:91
</span><span class='line'>/Users/enukane/Desktop/emtestpcap//test5.pcapng,1413615217,155,28:cf:e9:4d:bb:91,c4:7d:4f:56:e5:1d
</span><span class='line'>(中略)
</span><span class='line'>/Users/enukane/Desktop/emtestpcap//test1.pcapng,1413615217,283,c4:7d:4f:56:e5:18,ff:ff:ff:ff:ff:ff
</span><span class='line'>/Users/enukane/Desktop/emtestpcap//test1.pcapng,1413615217,146,c4:7d:4f:56:e5:19,20:c9:d0:d8:37:31
</span><span class='line'>/Users/enukane/Desktop/emtestpcap//test1.pcapng,1413615217,57,20:c9:d0:d8:37:31,c4:7d:4f:56:e5:19
</span><span class='line'>/Users/enukane/Desktop/emtestpcap//test2.pcapng,1413615217,45,c4:7d:4f:56:e5:19,20:c9:d0:d8:37:31
</span><span class='line'>/Users/enukane/Desktop/emtestpcap//test2.pcapng,1413615217,39,,c4:7d:4f:56:e5:19
</span><span class='line'>(中略)
</span><span class='line'>2015-01-29 11:29:47,517 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  3 / 3, running: 0}
</span><span class='line'>2015-01-29 11:29:47,517 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  3 / 3, running: 0}
</span><span class='line'>2015-01-29 11:29:47,517 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  3 / 3, running: 0}
</span><span class='line'>2015-01-29 11:29:47,535 [INFO]: main:org.embulk.command.Runner: next config: {"type":"pcapng_files","paths":["/Users/enukane/Desktop/emtestpcap/","/tmp"],"threads":3,"schema":[{"name":"frame.time_epoch","type":"long"},{"name":"frame.len","type":"long"},{"name":"wlan.ta","
</span><span class='line'>type":"string"},{"name":"wlan.ra","type":"string"}],"done":["/Users/enukane/Desktop/emtestpcap//test1.pcapng","/Users/enukane/Desktop/emtestpcap//test2.pcapng","/Users/enukane/Desktop/emtestpcap//test5.pcapng"]}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>-oオプションで実行中のコンフィグと同じパスを指定してやると, 元のコンフィグに「今処理したファイルリスト」を付け加えます

<ul>
<li>既にdoneが合った場合とか考慮してない等々で今はきちんと動いてない模様&hellip; (to be fixed)</li>
<li>いわゆるcommit reportとして, 次回に重複処理しないように考慮 (したかった)</li>
</ul>
</li>
<li>outがstdoutになっているので, previewの様な表ではなくcsv形式で出力.</li>
</ul>


<h3>embulk弄ってたときのメモ</h3>

<ul>
<li>embulkの<a href="https://github.com/embulk/embulk">README</a>をよめばだいたいどうにかなる。</li>
<li>bundleコマンドで作成したディレクトリ以下でプラグインの新規追加・名前変更等したときは, 再度bundleコマンド発行すること</li>
<li>本来的にはinputプラグインではなくFile input内のparser/decoderプラグインとして造るべきでは？

<ul>
<li>処理対象のファイル一覧→スレッドへの分配あたりを再開発してる感</li>
<li>input/output以外のプラグインがどの程度rubyで差し込みできるのかよく見えない. 要調査.

<ul>
<li>file inputのメインのロジックはJava側で書かれてるようなのでbundle側からのインタラクション次第か?</li>
</ul>
</li>
</ul>
</li>
<li>task to threadsのベストプラクティスが欲しい&hellip;</li>
<li>transactionとrunの間のデータ受け渡し, これでいいのかな感

<ul>
<li>引数でスレッドローカルなオブジェクト渡すものだと思ってたけど&hellip;</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015-01-25 Softbank から IIJmio にかえた]]></title>
    <link href="http://enukane.github.io/blog/2015/01/25/2015-01-25-iijmiosim/"/>
    <updated>2015-01-25T11:38:08+09:00</updated>
    <id>http://enukane.github.io/blog/2015/01/25/2015-01-25-iijmiosim</id>
    <content type="html"><![CDATA[<p><a href="http://enukane.github.io/blog/2015/01/16/simfreeornot/">前回</a>の検討の続き。結局乗り換えた。
ファミリーシェアプラン(7GB)で, 音声SIM 1枚(MicroSIM)とデータ専用SIM 1枚(NanoSIM).</p>

<p><img src="http://enukane.github.io/images/P_20150125_120530.jpg" alt="sim" /></p>

<p>転出・転入の手続き周りでかかった費用は以下の通り.</p>

<ul>
<li>MNP転出側 (Softbank)

<ul>
<li>解約手数料: 0円

<ul>
<li>2年1ヶ月目ちょうどだったので</li>
</ul>
</li>
<li>MNP転出手数料: 3000円</li>
</ul>
</li>
<li>MNP転入側 (IIJmio)

<ul>
<li>初期費用: 0円

<ul>
<li>後述するASUSのキャンペーン</li>
</ul>
</li>
</ul>
</li>
<li>その他:

<ul>
<li>端末購入費用: 28940円

<ul>
<li>ASUS ZenFone 5 A500KL-RD16</li>
<li>IIJmio音声通話パックと同時購入でパッケージ費用 3000円がタダになるキャンペーンやってた</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>月額費用はこんな感じになるはず (予定)</p>

<ul>
<li>合計: 3520円 (税込)

<ul>
<li>月額費用: 2560円

<ul>
<li>ファミリーシェアプラン 7GB</li>
</ul>
</li>
<li>音声通話機能付帯料: 700円</li>
</ul>
</li>
</ul>


<p>&ldquo;@t.vodafone.ne.jp&#8221;なメアドが消滅したので, 何人かとのリンクが消滅したことになる.
数年来連絡とってないひとばっかりなので問題にはならないでしょう, きっと.</p>
]]></content>
  </entry>
  
</feed>
