<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | #error NO_MONEY]]></title>
  <link href="http://enukane.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://enukane.github.io/"/>
  <updated>2017-03-20T13:08:45+09:00</updated>
  <id>http://enukane.github.io/</id>
  <author>
    <name><![CDATA[n_kane]]></name>
    <email><![CDATA[enukane@glenda9.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[コミケ91 1日目の無線LAN模様]]></title>
    <link href="http://enukane.github.io/blog/2017/01/11/c91-wifi/"/>
    <updated>2017-01-11T23:59:31+09:00</updated>
    <id>http://enukane.github.io/blog/2017/01/11/c91-wifi</id>
    <content type="html"><![CDATA[<p>だんだんと自分にしか意味のない指標&amp;グラフが増えすぎてて大変に読みづらいものになったけど、
いつものやつ書きました。「C91 Wi-Fi 〜ららら、(無線的に)素敵なComiket Space〜」。</p>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/70907756 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> </p>

<p>今回は、また自スペースが西1に戻ってきました。
そのため<a href="http://www.slideshare.net/enukane/c90-wifi-comiket-space">前回のC90 (西3だった)</a>とはまた様子が異なっています。
比較のために、次はできれば東に割り当てられたいですね。</p>

<p>今回は新要素として以下を追加しています。</p>

<ul>
<li>&ldquo;18.1 AP滞在時間のヒストグラム(10分以上のみ抽出)&rdquo;

<ul>
<li>APが見えていた時間をプロット</li>
<li>大半がヒットアンドランで0秒付近に張り付く傾向があるので、一定時間以上に絞って長期傾向を見る</li>
</ul>
</li>
<li>&ldquo;19.1 端末の滞在時間ヒストグラム(10分以上のみ抽出)&rdquo;

<ul>
<li>同上</li>
</ul>
</li>
<li>&ldquo;20. Data &amp; BlockAckフレームの収集数/s&rdquo;

<ul>
<li>&ldquo;14. 正常フレームの収集数/s&rdquo; のうち、さらに Dataフレームと Block Ackフレームに絞り込み</li>
<li>サンプリングが妥当であれば、このFPSがデータ送信の活発さの指標になりうる</li>
<li>ただし長さは考慮されない</li>
<li>ただし高レートすぎて見えないフレームは Block Ack でしか考慮されない

<ul>
<li>Block Ack またはその他の要素から、これらのフレームを復元する方法が必要</li>
</ul>
</li>
</ul>
</li>
<li>&ldquo;21. FCS OKフレームの時間的占有率&rdquo;

<ul>
<li>毎回1秒キャプチャしてた間に見つけたFCS good なフレームの Duration (秒) と 1秒内の割合の推移をプロット</li>
<li>「13. チャネル使用率」のうち、どれくらいが有効に使われていたかを判断できるはず

<ul>
<li>正確な一致には FCS bad なフレームの考慮による検証が必要 (TODO)</li>
</ul>
</li>
<li>チャネル使用率との差分が、無駄になった時間

<ul>
<li>このDurationのうち、データフレームに使えた時間と長さを考慮してチャネル使用率との対比を取ると、有効に使えた度合いが取れる？</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>FCS badなフレームのDurationがどれくらい正確なのかは今後要検証。
これが正確にとれており、Durationの合計がチャネル使用率と合致するならサンプリング精度が良いという指標になりそう。</p>

<p>また、FCS badなデュレーションと
これと、プリアンブルだけの情報が上手く取れると高レートなフレームの流れが</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017-01-11 コミケ91で、ハニーポット無線LANアクセスポイント立てたお話]]></title>
    <link href="http://enukane.github.io/blog/2017/01/11/hap/"/>
    <updated>2017-01-11T09:35:12+09:00</updated>
    <id>http://enukane.github.io/blog/2017/01/11/hap</id>
    <content type="html"><![CDATA[<p>{:TOC}</p>

<h1>概要</h1>

<p>今冬のコミックマーケット91にて、1日目 西1 み-18a &ldquo;glenda9&rdquo; で出展するにあたって
自スペースにハニーポット無線LANアクセスポイント(以下 ハニポAP)を立てました。
ここではその提供方法、構成および結果について記述します。</p>

<p>この手のイベントでは「応仁のLAN」といった面白SSIDを告知する遊びをする人がいます。
これに倣って自分のスペース名をSSIDで告知というのも可能ですが、
せっかくAPを立てるからにはもうすこし遊びを入れたいところです。</p>

<p>もうちょっと真面目な目的としては各種プラットフォームが備えているキャプティブポータル検知の実装を見てみたい、
この手のイベントでいかにもセキュリティの甘そうなAPをおいておくと
どれくらいの人が引っかかるのか見てみたいといったモチベーションがありました。</p>

<p>ここではAPとキャプティブポータルを組み合わせてイベント環境にデプロイし、
クライアントの通信を特定コンテンツにねじ曲げて以下の様なページを強制表示するようにしつつ各種ログを収集しました。</p>

<p><img class="center" src="/images/2017-01-11/captive-webui.png" width="350"></p>

<!---
# 目的

- APを用いた宣伝、お客さんを釣る
- どれくらいの人がハニポAPに引っかかるかをみる
- キャプティブポータル検知の仕組みを実際に引っかけて調べる

先にも述べたように単純にSSIDを「み-18a glenda9」などとして宣伝する方法もあります。
が、一般的なハニーポットとしては"Free Wi-Fi"といったそれらしいSSIDをつけておきたいところです。
威力業務妨害扱いにもなりそうなので、今回はやりませんでしたが他のFree Wi-Fiで用いている
SSIDをつけるという案もあります。
コミケの環境では、PCというよりスマホ・タブレットが主として用いられると思われ
またさらにいえばWi-Fiよりは3G/LTEを用いるであろうと思われるためあまり引っかかる人はいなさそうです。
しかし、無線LANがデフォルト有効かつ暗号化なしSSIDに自動的に接続しに行くデバイスや、
テザリング接続時にたまたまフリーっぽいSSIDを見つけて手動接続するユーザはいると思われます。
これらをターゲットとしてSSIDを告知します。

各種プラットフォームではそれぞれ [HOW AUTOMATIC DETECTION OF CAPTIVE PORTAL WORKS](https://success.tanaza.com/s/article/How-Automatic-Detection-of-Captive-Portal-works)にあるようなキャプティブポータル検知の仕組みを導入しています。
これを実際に調べるとともに、この際に発生する接続からアドレス取得、名前解決からHTTPアクセスまでの
一連の流れから読み取れることを探ってみます。

-->


<h1>ハニーポットAPの見え方</h1>

<p>ハニポAPのSSIDとして「  Not Free Wi-Fi」を告知するようにしました。
SSIDの先頭に半角スペースを2つ入れることで、
「0000」で始まるものやアンダースコアから始まるSSIDよりも上位に出現するようにしています。
2.4GHz帯と5GHz帯でSSIDを分けており、
下記の様に2.4GHz帯側には&#8221;-g&#8221;とのサフィクスをつけました。</p>

<p><img class="center" src="/images/2017-01-11/not-free-wifi-ssid_hide.png" width="300"></p>

<!--- 引っかかると --->


<p>このSSIDに接続すると、
大抵のプラットフォームに入っているキャプティブポータル検知の仕組みによりスプラッシュページが表示されます。
Androidのスマホで見ると、ハニーポットAPのSSIDを選択後しばらくすると以下の画面がポップアップします。</p>

<p><img class="center" src="/images/2017-01-11/sp-captive.jpg" width="300"></p>

<h1>ハニーポットAPの機材について</h1>

<h2>AP本体</h2>

<p>ハニーポットAPには、Buffalo WZR-HP-AG300H に OpenWRT を載せたものを用いました。</p>

<p><img class="center" src="/images/2017-01-11/hap.png" width="300"></p>

<p>C90で同様の試みをしたときは Raspberry Pi と USB Wi-Fi アダプタを用いていました(以下)。
その際は、混雑している2.4GHz帯でしか運用せず出力も弱めであったため、
あまり接続数を稼げませんでした。</p>

<p><img class="center" src="/images/2017-01-11/old-hap.png" width="300"></p>

<p>WZR-HP-AG300H は家庭用APとしてそれなりにきちんとしたアンテナを備え、
2.4GHz/5GHz帯の同時運用も可能です。
OpenWRT を導入できカスタマイズ性も高いため今回はこれを用いてハニーポットAPを実装しました。</p>

<h2>APへの電源供給</h2>

<p>WZR-HP-AG300Hの消費電力は最大13.2Wであり、付属のACアダプタは定格 12V/2.0A となっています。
通常のUSBモバイルバッテリーではここまでの電圧は出せないため、
簡単にやるにはACが取れる電源などの大きめのバッテリーを用意する必要があります。
これらは価格も高い上にでかいし重いしで大変に邪魔なので、
ここでは以下のページに従ってQuickCharge 2.0対応のバッテリー(今回は AUKEY PB-T4 を利用)から12Vを引き出すようにしました。</p>

<ul>
<li><a href="https://lowreal.net/2015/12/07/3">Quick Charge 2.0 電源から 12V とる</a></li>
</ul>


<p>なお上記ページのコードでは上手く動かなかったため、
挿入するディレイの長さを変更して運用しています。コードは下記をご参照ください。</p>

<ul>
<li><a href="https://gist.github.com/enukane/26f3af8938ed2a775296f472b1c71168">https://gist.github.com/enukane/26f3af8938ed2a775296f472b1c71168</a></li>
</ul>


<p>後述するとおり 10000mAh のバッテリーで6時間程度は運用できました。
基板に起こすのは間に合わなかったので Arduino そのままとブレッドボードで動かしていました。
たまに結線が外れてリブートしてたり。。。。</p>

<p><img class="center" src="/images/2017-01-11/hap-power.jpg" width="350"></p>

<h2>簡易キャプティブポータル on OpenWRT</h2>

<p>簡易キャプティブポータル実現のため、以下の細工を入れています。</p>

<ul>
<li>管理用WebUIはWAN側インタフェースでのみ受付</li>
<li>LAN から WAN への通信を全て遮断</li>
<li>DHCPで配布するDNSサーバを自身(10.0.0.1)に設定</li>
<li>DNSサーバにて全てのAレコードのクエリに対して自身のアドレスで応答</li>
<li>LAN側(キャプティブポータル提供側)では Apache で HTTP アクセスを待ち受け

<ul>
<li>全てのHTTPアクセスを /index.html に置き換え</li>
</ul>
</li>
</ul>


<p>dnsmasqのレコード上書き機能を用いて全てのホスト名に対して自分のアドレスを返すことで、
アクセスを自身にねじ曲げます。
現状 /etc/init.d/dnsmasq にて dnsmasq コマンドの引数に以下を
加えてこれを実現しています。本来的には /etc/config/dhcp に list address の
行を追加すれば動くはずですが、上手く動作しないようでした。</p>

<pre><code>--address='/#/10.0.0.1'
</code></pre>

<p>キャプティブポータルとして HTTP アクセスを受け付ける側には Apache を用います。
上記 DNS の細工により、HTTP アクセスはこちらに向きますがパスは不定のためリダイレクト等が必要です。
OpenWRT デフォルトの apache では mod_rewrite が使えないため、
AliasMatch でこれを実現します。</p>

<pre><code>AliasMatch ^/.+$ /root/www/index.html
&lt;Directory "/root/www"&gt;
    Options Indexes FollowSymLinks SymLinksIfOwnerMatch
    AllowOverride None
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
</code></pre>

<p>これにより全てのHTTP アクセスに対して /index.html の中見を返すようになります。
このHTMLファイル中に、先に挙げたWebページを詰め込んでおきます。</p>

<h2>設置場所</h2>

<p>ハニーポットAP は コミックマーケット91 1日目 (2016/12/29) の西ホール1、
み-18a の机の上に設置しました。西ホールのだいたい赤丸の位置に自スペースがあります。</p>

<p><img class="center" src="/images/2017-01-11/map.png" width="200"></p>

<p><img src="/images/2017-01-11/my-space_cap.png"></p>

<p>机の上の可能な限り高いところに、
設置しましたができればポスタースタンドなどにくくりつけてより高さを稼ぎたいところではあります。</p>

<h1>提供結果</h1>

<p>ハニーポットAPの提供は 12/29 09:05:29 から 15:09:15 までの期間、6時間3分46秒に渡って実施しました。</p>

<h2>無線LAN</h2>

<p>接続しにきたユニーククライアント数は 62 台でした。
この値は、ログ中の接続(Authentication)イベントに紐付くMACアドレスのユニークアドレス数を計上したものです。
なお、いくつかの端末は Authentication Response に対してACKを返せていないため実際にAssociationまで至ったクライアントは
56 台です。</p>

<p>MACアドレスのOUIからベンダ名を引き、分布を図示した物が以下になります。
全体でベンダは10種類でした。コミケという利用環境上、大半がスマートフォンであると推測できます。
この中でも大半が Apple (おそらくiPhone/iPad) と Huawei で占められています。
&ldquo;IEEE Registration Authority&#8221;という名前になっているものがありますが、
一部のスマホでは自社のベンダ名を登録していないためこうなっているようです。</p>

<p><img src="/images/2017-01-11/sta_oui_histogram.png" alt="sta-oui-histogram" /></p>

<p>ハニーポットAPでは2.4/5GHz帯でそれぞれ別のSSIDを告知しています。
以下は帯域毎のユニーク接続クライアント数の分布です。
2.4GHz帯は18端末、5GHz帯は42端末と後者に寄っています。
接続イベント数上も2.4GHz帯は 33回、5GHz帯は 63回となっており、
5GHz帯側に接続しにくることが多かったようです。</p>

<p><img src="/images/2017-01-11/sta_per_band.png" alt="sta-per-band" /></p>

<p>以下は端末の接続持続時間のヒストグラムです。端末が接続してから切断するまでの期間(秒)と発生回数をプロットしています。
10秒単位で丸めています。大半は1分以内ですが、最長で1030秒(17分程度)の場合もあったようです。
300秒にて山がありますが、これは5分毎に走るGTKの更新失敗やらのタイムアウトに起因するものと推測しています。
移動が激しいコミケのような環境では、接続後そのまま明示的に切断せずにクライアントが離脱することが多いため、
このような傾向があるものと考えています。</p>

<p><img src="/images/2017-01-11/sta_dur_histogram.png" alt="sta-dur-histogram" /></p>

<h2>DHCP</h2>

<p>DHCPサーバがアドレスを割り当てた端末は 50 台でした。
先に述べたとおり、Assocした端末数は56端末であるため6台はDHCPによるアドレス取得まで至らなかったようです。</p>

<p>割り当てたアドレスは10.0.0.0/8から 45 アドレス分でした。
dnsmasqは比較的割り当てアドレスをばらけさせる傾向にありますが、うち5アドレスは重複して配布しています。
デフォルトでは DHCP Lease Time が 1h であるため再利用されたようです。</p>

<p>DHCPクライアントは DHCP Requestのオプションとしてホスト名を付与する場合があります。
このホスト名のユニーク数は今回 39 種でした。
ホスト名文字列として何が付与されるかは端末により異なります。
iOS系だと<strong>〜のiPhone</strong>といった形式、
androidだと<strong>android-XXXXXXXX</strong>といった乱数要素を含んだ文字列を用いる場合があります。
詳細は伏せますが、今回は以下の様な文字列が検出されました。</p>

<ul>
<li>iPhone/iPod Touchと推測されるもの(&ldquo;iphone&rdquo;, &ldquo;ipod&#8221;が含まれる): 14 個</li>
<li>iPadと推測されるもの(&ldquo;ipad&#8221;が含まれる): 5 個</li>
<li>androidと推測されるもの

<ul>
<li>&ldquo;android-XXXXX&rdquo; の形式: 12 個</li>
<li>機種名: 4 個</li>
</ul>
</li>
<li>不明(端末を推測可能な文字列を含まない): 4 個</li>
</ul>


<p>上記に挙げたとおり android にてホスト名に機種名を用いている例が4つありました。
以下の通り全てHuawei製品であり、このベンダでは一律このポリシーを採っているのかもしれません。</p>

<ul>
<li>HUAWEI_P9</li>
<li>HUAWEI_P9_lite</li>
<li>HUAWEI_Mate_9</li>
<li>Honor_8</li>
</ul>


<h2>DNS クエリ</h2>

<p>ハニポAPで動作しているDNSサーバでは期間中に合計556回 DNS クエリを受け取っており、
この対象レコードの内訳は以下の通りです。</p>

<ul>
<li>Aレコード: 504回</li>
<li>AAAAレコード: 50回</li>
<li>PTRレコード: 2回</li>
</ul>


<p>合計 123 個の名前にたいしてクエリを受信しました。
以下はその中で回数の多いほうからトップ10をプロットしたグラフです。
<em>connectivitycheck.gstatic.com</em> や <em>captive.apple.com</em>
のようにキャプティブポータル検知に用いられるホストが多く現れています。
またプッシュ通知を司るホスト向けの通信が多いことも伺えます。</p>

<p><img src="/images/2017-01-11/query_top10.png" alt="query-top10" /></p>

<p>AAAA レコードへのクエリのみを抽出すると、以下の5ホストに対してのクエリを受信していました。
IPv6はサポートしていないため、一律NODATAを返しています。</p>

<ul>
<li>connectivitycheck.gstatic.com</li>
<li>clients3.google.com</li>
<li>mobile.pipe.aria.microsoft.com</li>
<li>a.config.skype.com</li>
<li>b.config.skype.com</li>
</ul>


<h2>キャプティブポータル</h2>

<p>名前でねじ曲げられた先のキャプティブポータルに対するアクセスは以下のようになっています。</p>

<ul>
<li>HTTPアクセス回数: 246 回</li>
<li>HTTPアクセスのユニーク送信元アドレス数: 43 個

<ul>
<li>うち5つのアドレスは重複割り当ての可能性あり</li>
</ul>
</li>
<li>HTTPアクセス対象ホストのユニーク数: 21 ホスト

<ul>
<li>先のクエリ対象ホストが123だったのに比べるとだいぶ少なめ</li>
<li>HTTPのみ対象のため？</li>
</ul>
</li>
</ul>


<p>以下はアクセス数の多いほうから、ホスト名のトップ10をプロットしたグラフです。
やはりキャプティブポータル検知用ホストへのアクセスが多めです。</p>

<p><img src="/images/2017-01-11/http_host_histogram.png" alt="http-host-histogram" /></p>

<p>アクセス数のヒストグラムをURL全体に拡張し、そのトップ10を並べたものを以下に記載します。
全体では31個のURLに対するアクセスを記録しています。</p>

<p><img src="/images/2017-01-11/http_url_histogram.png" alt="http-url-histogram" /></p>

<p>通常のWebアクセスらしきものや、Simejiの通信なども見えますが
大多数はキャプティブポータル検知用のURLに対するアクセスです。</p>

<ul>
<li>Apple系

<ul>
<li><a href="http://captive.apple.com/hotspot-detect.html">http://captive.apple.com/hotspot-detect.html</a></li>
<li><a href="http://captive.apple.com/XXXXXXXXXX/YYYYYYYYYYY/ZZZZZZZZZZZZZZZZZZZZZ.html">http://captive.apple.com/XXXXXXXXXX/YYYYYYYYYYY/ZZZZZZZZZZZZZZZZZZZZZ.html</a>

<ul>
<li>captive.apple.com はどのパスでも固定の応答が返る模様</li>
</ul>
</li>
</ul>
</li>
<li>Android系

<ul>
<li><a href="http://connectivitycheck.gstatic.com/generate_204">http://connectivitycheck.gstatic.com/generate_204</a></li>
<li><a href="http://clients3.google.com/generate_204">http://clients3.google.com/generate_204</a></li>
<li><a href="http://connectivitycheck.android.com/generate_204">http://connectivitycheck.android.com/generate_204</a></li>
<li><a href="http://10.0.0.1/generate_204">http://10.0.0.1/generate_204</a></li>
</ul>
</li>
</ul>


<p>今回検出したアクセス時のUser-Agentは大別すると以下の4種類に分けられそれぞれ一定の役割のもと
用いられているようです。</p>

<ul>
<li>CaptiveNetworkSupport系</li>
<li>Dalvik系</li>
<li>WebKit系</li>
<li>その他</li>
</ul>


<p>CaptivePortalSupportは主に captive.apple.com 向けの通信に使われていました。
ただしこれだけ、と言うわけではなく以下の様に CaptiveNetworkSupport系とMozilla系のUser-Agentを交互に利用しているようです。</p>

<pre><code>10.0.0.73 GET /hotspot-detect.html FryingPan.lan captive.apple.com "CaptiveNetworkSupport-325.10.1 wispr" 200
10.0.0.73 GET /hotspot-detect.html FryingPan.lan captive.apple.com "Mozilla/5.0 (iPhone; CPU iPhone OS 9_3_3 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13G34" 200
</code></pre>

<p>CaptiveNetworkSupportを含むUser-Agent文字列には以下のパターンが存在していました。
WISPrの仕様上、User-Agent文字列は &ldquo;WISPR!任意の文字列&rdquo; ということになっているので
CaptiveNetworkSupportの文字列の出典および後続する数値列の意味は不明です。</p>

<pre><code>CaptiveNetworkSupport-346 wispr
CaptiveNetworkSupport-325.10.1 wispr
CaptiveNetworkSupport-277.10.5 wispr
CaptiveNetworkSupport-306.20.1 wispr
</code></pre>

<p>Android向けであると推測される connectivitycheck.gstatic.com等へのアクセスは主に Dalvik系 User-Agent から
なされています。が、Apple系とおなじくMozilla系Uer-Agentでのアクセスも確認されています。</p>

<pre><code>10.0.0.13 GET /generate_204 FryingPan.lan connectivitycheck.gstatic.com "Dalvik/2.1.0 (Linux; U; Android 7.0; Nexus 6 Build/NBD91P)" 200
10.0.0.13 GET /generate_204 FryingPan.lan connectivitycheck.gstatic.com "Mozilla/5.0 (Linux; Android 7.0; Nexus 6 Build/NBD91P; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36" 200
</code></pre>

<!---

- "KT/6.0.1 An/4.4.2 ko"
  - アプリ内の広告表示アクセスっぽい
- なし
  - simejiっぽい
- "iPad5,3/9.3.3 (13G34)"
  - iOSのPush通知関連？
- "dianxinos-user-agent"
  - Baidu系っぽい
- "LINE/2016.1114.1637 CFNetwork/758.5.3 Darwin/15.6.0"
  - LINE?
- "DXCoreService"
- "com.baidujp.Simeji.SimejiKB/243 CFNetwork/758.5.3 Darwin/15.6.0"
  - Simeji
- "Alamofire"
  - Simejiっぽい

--->


<h1>まとめ</h1>

<ul>
<li>コミケ91 1日目にてハニーポットAPを動かしてみた</li>
<li>62人のお客さんが釣れた

<ul>
<li>うち43人程度にはキャプティブWebページを見てもらえた模様</li>
<li>前回 (C90, 10人程度) に比べてだいぶアクセスしてもらえた</li>
</ul>
</li>
<li>キャプティブポータル検知をしてるらしい動きが見れた

<ul>
<li>iphone &amp; android がメイン?</li>
<li>PC系は今回はほぼいないのもあって確認できず</li>
<li>1台だけ Ubuntu マシンがいたが、キャプティブ検知っぽい動作はしていなかった</li>
</ul>
</li>
</ul>


<h1>Future Work</h1>

<p>お次やるとしたらこう工夫しようというToDoリスト</p>

<ul>
<li>DHCP リースタイムの延長

<ul>
<li>1日程度の方が良さそう</li>
</ul>
</li>
<li>運用時の可視化方法

<ul>
<li>本当は ruby 動かして管理用 WebUI が見れるはずだったけど、上手く動かなかった</li>
</ul>
</li>
<li>自律的な時刻同期

<ul>
<li>会期中一回落ちて時刻がおかしくなった</li>
<li>3G/LTE で NTP ?</li>
</ul>
</li>
<li>電源モジュールの基板化

<ul>
<li>ブレッドボードはつらい</li>
</ul>
</li>
<li>DHCP Fingerprinting で遊びたい</li>
<li>別の場所での運用

<ul>
<li>PC が多そうな環境で見てみたい</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[システム系論文紹介 Advent Calendar 2016 - 時刻同期話]]></title>
    <link href="http://enukane.github.io/blog/2016/12/04/2016-system-paper-adv-calendar/"/>
    <updated>2016-12-04T10:58:41+09:00</updated>
    <id>http://enukane.github.io/blog/2016/12/04/2016-system-paper-adv-calendar</id>
    <content type="html"><![CDATA[<h1>論文紹介: “Globally Synchronized Time via Datacenter Networks”</h1>

<p>本記事は システム系論文紹介 Advent Calendar 2016の4日目, 12/04 のための記事です.</p>

<h2>はじめに</h2>

<p>4日目 n_kane の担当分では今年の ACM SIGCOMM 2016 より時刻同期話ということで以下の論文を取り上げます.</p>

<ul>
<li>タイトル: Globally Synchronized Time via Datacenter Networks

<ul>
<li>著者 Ki Suh Lee et al. (Cornell University)</li>
<li>出展: ACM SIGCOMM 2016, Session 5, Datacenters 1</li>
<li><a href="http://dl.acm.org/authorize?N19282">論文へのリンク</a></li>
<li><a href="http://conferences.sigcomm.org/sigcomm/2016/files/program/sigcomm/Session05-Paper01-Global-Ki.pdf">スライド資料へのリンク</a></li>
</ul>
</li>
</ul>


<p>セッション自体の括りはデータセンター, 内容としても DC 環境での分散システム向けの時刻同期をターゲットにしています. このあたりは個人的な興味ではなかったのですが, 最近時刻同期関連(GPS, NTP, PTP 等等)を勉強しようと思っておりました. その矢先にこの論文を見つけたため今回取り上げることにしました.</p>

<h2>対象としている問題</h2>

<p>NTPやPTPをベースにした時刻同期はもはや無くてはならないプロトコルですが, ナノ秒レベルでの時刻同期が必要な場合, 精度に非決定性があるというのが本論文で取り上げ解決策を提示している問題です.</p>

<p>NTPはマイクロ〜ミリ秒, PTPはサブナノ秒の精度で時刻(クロック)同期が可能なプロトコルです. これらのプロトコルでは細かい差異はあるにせよ共に, 2台の計算機の間でRTTを測定し これをもとに一方向遅延(OWD One Way Delay)と相互のクロックの差(Offset)を算出, 時刻やクロックを合わせ, クロック発振器がそれを維持し定期的に再計測を行うという方法で 同期を行います.</p>

<p>この流れの RTT 計測, クロックの維持, 再計測に非決定的な誤差を生む要因がある, と本論文では主張しています. NTP, PTPはともに UDP ベースのプロトコルでありネットワーク帯域を消費しているため 間の経路の経路, 輻輳, 機器類のバッファリングや送受信のスケジューリングによる影響を受けます. ベースとなるRTT計測は往路復路が同じであることを前提としていますが, これが常に満たされるとは限りません. クロックの維持も誤差要因となります. 原子時計と異なり一般的なx86の計算機に積まれたクロックはそれぞれに 一定の誤差を生じながら動くため, 時が進むにつれズレが発生します. この補正のためには頻繁な再計測・再同期を行う必要がありますが, あまりに同期対象や頻度が多い場合に時刻同期に帯域を取られてしまうといった問題があります.</p>

<h2>解決策</h2>

<p>この論文では時刻同期を Ethernet で直結された2台の計算機間において PHY レイヤで行うことで 前節の問題を解決しようとしています. キモはEthernet で接続された計算機間では「既にNIC同士のクロックが同期されている」という点です. Figure 2 にクロックドメインについての図が掲載されていますが, Ethernetのフレームを送受信するにあたって送信側と受信側は実質同じ回路になっており 送信側のクロックに併せて動作をしていると考えることができます.</p>

<p>このNICレベルでのクロック同期を, システムレベルでのクロック同期に利用するというのが 本論文で提示する手法になっています. この手法を用いたクロック同期として DTP (Datacenter Time Protocol) とそれを実装した 10Gbit Ethernet PHY を取り上げています.</p>

<h2>ポイント</h2>

<p>この論文で DTP の推しポイントとして主張されているのは以下の3点です.</p>

<ol>
<li>802.3プロトコルのハックによるオーバーヘッド実質0のプロトコル</li>
<li>ナノ秒レベルでの同期で誤差が予測可能</li>
<li>スイッチを用いたスケーラブルなクロック同期が可能</li>
</ol>


<h3>1. オーバーヘッド実質0のプロトコル</h3>

<p>NTPやPTPと同じく DTP も RTT の計測からの一方向遅延の算出を基本としています. 最終的なクロック合わせをオフセットの計算ではなく「一番速いやつに合わせる」 というアルゴリズムの違いはありますが, やっていることはあまり替わりません.</p>

<p>大きな違いは先にも述べたとおり DTP では Ethernet の PHY レイヤで伝送を行う点です. 具体的には PHY の PCS (Protocol Control Sublayer) のスクランブル/デスクランブル化の直前に, 処理を差し込むことでこのレイヤで伝送されているコントロールブロックに載せて DTPのデータを送受信します.</p>

<p>このレイヤでは実際のデータ(Ethernetフレーム)転送の間にリンク維持やエラー通知を目的とした コントロールブロックの送受信が行われています. このうちDTPが有効なリンクでは Idle キャラクタの部分に DTP のデータを載せ送受信することとしています. PCSの上位レイヤには Idle キャラクタを正しく戻してやることで, Ethernetのデータ転送の帯域を実質的に 使うこと無くDTPのやりとりを行うことが可能となっています.</p>

<p>この方法の利点として Ethernet の伝送を邪魔しないこと, 高頻度にクロック同期が可能であることが挙げられます. Idleキャラクタのコントロールブロックは Ethernet フレームが流れる時はその前後に, 何も流れていない時は継続的に差し込まれるため Ethernet の帯域を消費しません. いわゆる10GbE, 100GbEといった速度はこの制御系の通信を除いたものであるためです. このコントロールブロックは輻輳している場合でも 1280〜7680ns の間隔で挿入が可能です. ワーストケースでも数usの周期でクロック同期を回すことが可能であるため, 精度の維持</p>

<h3>2. ナノ秒レベルで誤差予測可能なクロック同期</h3>

<p>DTP では同期誤差が「4T」に決定的(deterministic)に収まるように設計されています. ここで T は最も速いクロックの周期であり, 10Gbit Ethernetの場合は T = 1 / f = 1 / 156.25MHz = 6.4 nsとなるため, 25.6ns内に収まることになります.</p>

<p>この誤差予測が可能なのは PHY レイヤで同期しているためソフトウェアスタックが介在しないこと, 直結されているため間に何も入らないことにより誤差導入要素が(ほぼ)無いためです. 遅延要因としてはケーブル上の伝搬遅延やエンドポイントでの処理遅延が存在しますが これらは動的には変化しないと仮定を置くことができ, 事前に予測が可能です 一部 Clock Domaing Crossing, 相手のTXに乗ったクロックと自分のTXのクロック間の 遅延を解決するのにランダム性のある誤差が生じますがこれもどちらか速いほうの1クロック内に 収まるということのようです.</p>

<p>複数のPHYを計算機に挿すことでPTPのBoundary Clockのようにネットワークを跨がって時刻を 同期することも可能です. この場合でも「4TD + 8T」に誤差が収まるとしています. ここで D はホップ数を挿します. スモールワールド現象に則って6ホップ経由すればデータセンターの 全ての計算機にリーチできると仮定すると, どの計算機の間でも 153.6ns 以内に誤差が収まる クロック同期が可能となります.</p>

<h3>3. スケーラブルな時刻同期</h3>

<p>DTP は Ethernet が直結された2台間で行うことが基本ですが, スイッチがDTPをサポートすることで 2台以上のクロック同期が可能となっています. 前提としてスイッチの全ポートが同じクロックを共有するスイッチチップにより制御されていることが 必須にはなりますが, これを基軸として全ポートと DTP のやりとりを行うことで現在の最速クロックに 合わせるという動作が可能です.</p>

<h2>評価</h2>

<p>有効性の評価としてこの論文では DTP が PTP と比べて非決定性を抑制できていることを確認しています. PTPでは負荷の状況をなし, 中度, 重度と変えたときに300ns程度内, 25us程度内, 100us程度内と 誤差が大きくなっていきまた定常的にもブレが大きいことが見て取れます. 一方の DTP ではMTU 1500バイトの通常のEthernetややジャンボフレームの場合に負荷を掛けても ワーストケースで 4T = 25.6 ns内に常に収まっていることが確認できます.</p>

<h2>まとめとおわりに</h2>

<p>ここでは Ethernet の PHY レイヤを用いたクロック同期手法 DTP (Datacenter Time Protocol) についての論文を取り上げました. 時刻同期というよりはクロック同期であり, PTPと比してさらにハードウェアのサポートが必要であること, 同期ピア間でケーブルの直結が必要であることなど制約がより強い手法ではあります. ただし誤差の予測がネットワークを跨いでも可能であり必ずしも局所的にしか使えないといったものでもないようです.</p>

<p>スイッチの実装はまだ構想段階のようなので論文中の前提がフィールドで適用できるかどうかや, DTP を実装する NIC PHY のコストや性能への実際の影響についてはより調査や実験が必要と感じました. 個人的には IEEE 802.11ae の PCS をある意味ハックしているのが面白く感じました. また REFERENCES に時刻同期関連の一通りが並んでいるので大変にありがたい文章です.</p>

<h2>後付け: 他の候補</h2>

<p>その他, 今回紹介しようと思った候補としては以下に挙げるものがありました.</p>

<ul>
<li>ACM SIGCOMM 2016: Inter-Technology Backscatter: Towards Internet Connectivity for Implanted Devices, Iyer et al (University of Washington)</li>
<li>ACM SIGCOMM 2016: Evolve or Die: High-Availability Design Principles Drawn from Google’s Network Infrastructure, Govindan et al (Google/USC)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SEIL で OPEN IPv6 DDNS for NGN を使う]]></title>
    <link href="http://enukane.github.io/blog/2016/09/20/open-ipv6-ddns-on-seil/"/>
    <updated>2016-09-20T21:16:46+09:00</updated>
    <id>http://enukane.github.io/blog/2016/09/20/open-ipv6-ddns-on-seil</id>
    <content type="html"><![CDATA[<p>また Qiita。</p>

<blockquote><p><a href="http://qiita.com/n_kane/items/f4d098d6332f44ce5f8e">SEIL で OPEN IPv6 DDNS for NGN の DDNS 機能だけを使う</a></p></blockquote>

<p>IPoE契約してるとお外から名前で引けるようになるの便利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[\"Fluent Dashboard + SDR デバイスで周囲の電波状況を可視化してみる\" 書いた]]></title>
    <link href="http://enukane.github.io/blog/2016/09/13/fluentdashboard-with-sdr/"/>
    <updated>2016-09-13T23:02:15+09:00</updated>
    <id>http://enukane.github.io/blog/2016/09/13/fluentdashboard-with-sdr</id>
    <content type="html"><![CDATA[<p>久々に Qiita に記事書いた。</p>

<blockquote><p><a href="http://qiita.com/n_kane/items/d9037c8744634053dbab">Fluentd Dashboard + SDR デバイスで周囲の電波状況を可視化してみる</a></p></blockquote>

<p>Google SpreadSheet は便利だけど、描画の遅延とかが半端ないんでお次は App Engine + BigQuery かな。
ElasticSearch + Kibana でいい感じに横並びなメトリックが掛けるならそれが一番なんだけど&hellip;</p>
]]></content>
  </entry>
  
</feed>
