<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | #error NO_MONEY]]></title>
  <link href="http://enukane.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://enukane.github.io/"/>
  <updated>2015-05-01T17:00:11+09:00</updated>
  <id>http://enukane.github.io/</id>
  <author>
    <name><![CDATA[n_kane]]></name>
    <email><![CDATA[enukane@glenda9.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[貧乏人でもスペアナがしたい!]]></title>
    <link href="http://enukane.github.io/blog/2015/05/01/bimbo-spectrum-analyzer/"/>
    <updated>2015-05-01T12:51:00+09:00</updated>
    <id>http://enukane.github.io/blog/2015/05/01/bimbo-spectrum-analyzer</id>
    <content type="html"><![CDATA[<h2>貧乏人でもスペアナがしたい!(掲題ママ)</h2>

<p>新品を買うと, 数十万〜数百万だし, ヤフオク等の中古品でも明らかなジャンク品でないものに限ったとしても十〜数十万ぐらいは行ってしまう.</p>

<p>やりたいことができて, こわしても気落ちしない程度のモノが欲しいので探してみたメモ.</p>

<p>やりたいことベースでのおおよその要件は以下の通り
(貧乏人にしては盛りすぎだ!生意気だ!等のコメントはNO)</p>

<ul>
<li>(MUST) 無線LANの周波数帯がカバーできること

<ul>
<li>2.4 &amp; 5GHz帯</li>
</ul>
</li>
<li>(MUST) PCと連携できること

<ul>
<li>(SHOULD) 外部のスクリプト等で扱える形式でデータがエクスポートできること</li>
<li>(MAY) あるいは, 独自形式でもかまわないが仕様が公開されていること</li>
</ul>
</li>
<li>(MUST) 数十万円後半は絶対にNO

<ul>
<li>10〜20万ぐらいが限度</li>
</ul>
</li>
<li>(MAY) RBW と sweeptimeの両立がそこそこ成り立つこと

<ul>
<li>(MAY) できれば20/40MHzスパンに対して200〜300kHzのRBWで数百ms程度が望ましい (秒はかからない程度であれば)</li>
</ul>
</li>
<li>(MAY) できれば普通のスペアナと同じような汎用性

<ul>
<li>スペアナのお勉強用に使えること</li>
</ul>
</li>
<li>(MAY) Mac向けのアプリがあること

<ul>
<li>(MAY) あるいはUNIX系からアクセス可能なインタフェース(ライブラリ/API etc)が用意されていること</li>
</ul>
</li>
<li>(MAY) USBバスパワーで動くこと</li>
<li>(MAY) 携帯可能な電源仕様, 形状, 重さであること</li>
</ul>


<p>おおよそ2つの側面があって, きちんとしたスペアナ買ってお勉強したいというのと, 今までやってきている無線LANキャプチャに織り交ぜたいという2つの方向からの要求が混ざっている. 分けた方がいいような気はする.</p>

<h2>候補になりそうな人たち</h2>

<p>中古のスペアナをヤフオクで探すのは継続するとして, ハンディに使えそうな子達.</p>

<ul>
<li>Giga ST</li>
<li>RF Explorer 6G Combo</li>
<li>Aaronia AG

<ul>
<li>SPECTRAN HF-6060V4</li>
<li>SPECTRAN HF-6060V4 X</li>
</ul>
</li>
<li>Metageek WiSpy DBx</li>
<li>Signal Hound

<ul>
<li>USB-SA124B</li>
<li>BB60C</li>
</ul>
</li>
<li>Tektronix RSA306</li>
</ul>


<table>
<thead>
<tr>
<th style="text-align:left;">機種</th>
<th style="text-align:right;">お値段</th>
<th style="text-align:center;">周波数レンジ</th>
<th style="text-align:left;">RBW</th>
<th>スイープ時間</th>
<th>アプリ対応OS</th>
<th> export可? </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">GigaSt v5c</td>
<td style="text-align:right;">29,000 (税, 送料込み)</td>
<td style="text-align:center;">3 - 12000MHz</td>
<td style="text-align:left;">15/30/180 KHz</td>
<td>500ms? (SPAN:100MHz, RBW:180KHz)</td>
<td>Windows</td>
<td> 形式不明 </td>
</tr>
<tr>
<td style="text-align:left;">RF Explorer 6G Combo</td>
<td style="text-align:right;">43,800 (税込み)</td>
<td style="text-align:center;">15 - 2700MHz, 4850 - 6100 MHz</td>
<td style="text-align:left;"> 2.6 - 812 kHz </td>
<td> 200ms? (Span: 60MHz, 600KHz) </td>
<td>Windows, Mac(?) </td>
<td> XML/CSV </td>
</tr>
<tr>
<td style="text-align:left;">SPECTRAN HF-6060V4</td>
<td style="text-align:right;"> €999.95 (129,384) </td>
<td style="text-align:center;"> 10MHz - 6GHz </td>
<td style="text-align:left;"> 3kHz - 50MHz </td>
<td> 200ms (Span: 20MHz, RBW: 300kHz) </td>
<td> Windows, Linux, Mac </td>
<td> CSV </td>
</tr>
<tr>
<td style="text-align:left;">SPECTRAN HF-6060V4 X</td>
<td style="text-align:right;"> €999.95 (129,384) </td>
<td style="text-align:center;"> 10MHz - 6GHz </td>
<td style="text-align:left;"> 3kHz - 50MHz </td>
<td> 200ms (Span: 20MHz, RBW: 300kHz) </td>
<td> Windows, Linux, Mac </td>
<td> CSV </td>
</tr>
<tr>
<td style="text-align:left;">WiSpy DBx</td>
<td style="text-align:right;"> $1,149 (136,834) </td>
<td style="text-align:center;"> 2.4GHz帯, 5GHz帯 </td>
<td style="text-align:left;"> 500ms (Span: 95MHz, RBW: 333KHz) </td>
<td> 500ms or 1s ? </td>
<td>Windows, Mac </td>
<td> sqlite DB </td>
</tr>
<tr>
<td style="text-align:left;">USB-SA124B</td>
<td style="text-align:right;"> $1,995 (238,386) </td>
<td style="text-align:center;"> 100kHz - 12.4GHz </td>
<td style="text-align:left;"> 100Hz - 250KHz, 6MHz </td>
<td> </td>
<td> Windows </td>
<td> ? </td>
</tr>
<tr>
<td style="text-align:left;">BB60C</td>
<td style="text-align:right;"> $2,879 (342,860) </td>
<td style="text-align:center;"> 9kHz - 6GHz </td>
<td style="text-align:left;"> 10khz </td>
<td> 24GHz/sec </td>
<td> Windows </td>
<td> ? </td>
</tr>
<tr>
<td style="text-align:left;">RSA306</td>
<td style="text-align:right;">434,000</td>
<td style="text-align:center;">9kHz - 6.2GHz</td>
<td style="text-align:left;"> 10Hz - 10MHz </td>
<td> 100us (Span: 400MHz, RBW: 300KHz) </td>
<td> Windows </td>
<td> CSV </td>
</tr>
</tbody>
</table>


<h3>諸々の前提</h3>

<ul>
<li>とりあえず無線LANターゲットなので, スパンとして20/40/80/160MHzがありうる

<ul>
<li>OFDMの各キャリアは312.5KHz間隔</li>
</ul>
</li>
<li>RBWと掃引時間の関係: sweeptime [s] = (k * span [Hz]) / (RBW [Hz])<sup>2</sup>

<ul>
<li>掃引時間はRBWの二乗に反比例</li>
<li>掃引時間は周波数スパンに比例</li>
</ul>
</li>
</ul>


<h2>候補</h2>

<h3>GigaSt v5c</h3>

<ul>
<li><p>参考</p>

<ul>
<li><a href="http://www.wa.commufa.jp/gigast/GigaSt5/GigaSt-v5.html">http://www.wa.commufa.jp/gigast/GigaSt5/GigaSt-v5.html</a></li>
<li><a href="https://www.youtube.com/watch?v=3vLZrA0e8EY">https://www.youtube.com/watch?v=3vLZrA0e8EY</a></li>
</ul>
</li>
<li><p>Pros</p>

<ul>
<li>安い! (送料込みで3万円以下)</li>
<li>USBバスパワー駆動</li>
<li>内部的にはシリアル(VCP) &amp; コントロール等々のドキュメントはそろってるので他OSでも触るのは簡単そう</li>
</ul>
</li>
<li>Cons

<ul>
<li>ケースはないので自分で用意</li>
<li>「グラフデータ保存機能」でどんな形式がサポートされてるか</li>
<li>注文ウィンドウがよく分からない (受付してない時期がある?)</li>
</ul>
</li>
</ul>


<h2>RF Explorer 6G Combo / WiFi Combo</h2>

<ul>
<li><p>参考</p>

<ul>
<li><a href="http://rfexplorer.com/combo-specs/">http://rfexplorer.com/combo-specs/</a></li>
<li><a href="https://www.youtube.com/watch?v=3ZhdcUJanCI">https://www.youtube.com/watch?v=3ZhdcUJanCI</a></li>
</ul>
</li>
<li><p>Pros</p>

<ul>
<li>コンパクト</li>
<li>そこそこお安い(5万内)</li>
<li>千石電商でも売っているので手には入れやすい</li>
<li>デバイスにLCDがついてる</li>
<li>バッテリー付き(16時間+ぐらいは動くらしい)</li>
<li>こちらも内部的にはシリアルっぽいのでコマンド叩けばいろいろ遊べる (<a href="https://code.google.com/p/rfexplorer/">rfexplorer</a>)</li>
</ul>
</li>
<li>Cons

<ul>
<li>2700MHz〜4850MHzの間は計測不可

<ul>
<li>とはいっても今のところ使い道はない</li>
</ul>
</li>
<li>基本となるアプリ(<a href="http://rfexplorer.com/touchstone/">touchstone</a>)は無料だけど, 一部のアプリが有料 ($49)

<ul>
<li>有料版(PRO)でないとxml/csvへのエクスポート機能がない</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Aaronia SPECTRAN HF-6060V4 / HF-6060V4 X</h2>

<ul>
<li>参考

<ul>
<li><a href="http://www.aaronia.com/products/spectrum-analyzers/HF-6060-V4-RF-Spectrum-Analyzer/">SPECTRAN HF-6060 V4</a></li>
<li><a href="http://www.aaronia.com/products/spectrum-analyzers/HF-6060-V4-X-USB-remote-Analyzer/">SPECTRAN HF-6060 V4 X</a></li>
</ul>
</li>
</ul>


<p>V4はいわゆるハンドヘルド版で, V4 Xがデスクトップ向け.</p>

<ul>
<li>Pros

<ul>
<li><a href="http://www.aaronia.com/products/software/">MCS</a>なるアプリが無料, Win/Mac/Linuxをそれぞれサポートしてる</li>
<li>V4ハンドヘルド版は単体で動作可能</li>
<li>サポートしてる周波数帯は基本的に連続 (どこかで途切れてる可能性はあるが)</li>
<li>悪くない価格 (11万程度)</li>
</ul>
</li>
<li>Cons

<ul>
<li>V4 XがUSBバスパワーだけでは動かない. 動いたら完璧だったのに&hellip;

<ul>
<li>モバイルバッテリーでは無理だろうが, DCなバッテリー + 電源ケーブル調達でなんとかなりそうではある</li>
</ul>
</li>
<li>V4ハンドヘルド版の動作時間は?</li>
<li>V4とV4 Xの機能面での差は?

<ul>
<li>LCD, ジョグダイヤルの有無</li>
<li>付属アンテナ:</li>
<li>HyperLOG EMC directional LogPer antenna: 7060 vs なし</li>
<li>OmniLOG 90200 radial isotropic antenna: なし vs あり</li>
<li>Xのみ: マーカの数unlimited, 複数デバイス操作可, スイープポイント無限等々

<ul>
<li>Xの方にだけPRO版ソフト?とやらが付いてくるらしいが?</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>WiSpy DBx</h2>

<ul>
<li>参考

<ul>
<li><a href="http://www.metageek.com/products/wi-spy/">WiSpy</a></li>
</ul>
</li>
</ul>


<p>「無線LAN &amp; スペアナ」でググると一番最初に出てくるデファクトスタンダード品みたいなもの.</p>

<ul>
<li>Pros

<ul>
<li>無線LANに特化

<ul>
<li>AP(SSID)一覧との紐付けが標準で存在している</li>
<li>「チャネル:周波数」の変換</li>
</ul>
</li>
<li>Macのアプリがある (Channalyzer)</li>
<li>kismetが出してる<a href="https://www.kismetwireless.net/spectools/">spectools</a>を使えばLinuxでも動きそう</li>
</ul>
</li>
<li>Cons

<ul>
<li>スペアナと見たときに, 細かいことがあまりできない

<ul>
<li>細かいパラメータがいじれない</li>
<li>無線LAN以外にはあまり使えなさそう

<ul>
<li>無線LAN特化のスペアナという立ち位置</li>
<li>現状無線LAN以外に使う予定はないが, 勉強用なので諸々のパラメータは弄りたい</li>
</ul>
</li>
<li>5GHz帯は細かくチャネルごとに見れない

<ul>
<li>2.4GHz帯はチャネル毎に見れる</li>
</ul>
</li>
</ul>
</li>
<li>その割には値段が高い (13万ぐらい)</li>
</ul>
</li>
</ul>


<p>スイープの性能については以下の通り. 見てる幅により固定になっている.</p>

<ul>
<li>2.4GHz 全体

<ul>
<li>Span: 95.310MHz ( 2400 - 2495 MHz )</li>
<li>RBW: 333.3 KHz</li>
<li>スイープ時間: 500ms?</li>
</ul>
</li>
<li>2.4GHz各チャネル (例としてチャネル 1)

<ul>
<li>Span: 424MHz ( 2400 - 2424 MHz )</li>
<li>RBW: 100kHz</li>
<li>スイープ時間: 500ms?</li>
</ul>
</li>
<li>5GHz

<ul>
<li>Span: 676.7 MHz ( 5160 - 5836 MHz )</li>
<li>RBW: 150.0 KHz</li>
<li>スイープ時間: 1s?</li>
</ul>
</li>
</ul>


<h2>Signal Hound USB-SA124B / BB60C</h2>

<ul>
<li><p>参考</p>

<ul>
<li><a href="https://signalhound.com/products/bb60c/">BB60C</a></li>
<li><a href="https://signalhound.com/products/usb-sa124b/">USB-SA124B</a></li>
<li><a href="https://www.youtube.com/watch?v=OWrp4M-T2r0">BBC60 Demo and Remote</a></li>
<li><a href="https://www.youtube.com/playlist?list=PL3IOktxB0nG5baFmDHwiZrb284akt6n9K">SA-Series Videos</a></li>
</ul>
</li>
<li><p>Pros</p>

<ul>
<li>スぺアナというよりはHackRFとかUSRPみたいなSDRデバイス + スペアナができるアプリという感じ</li>
<li>BB60Cに至っては24GHz/sec sweep speed (>= 10kHz RBW)</li>
</ul>
</li>
<li>Cons

<ul>
<li>お値段は微妙 (RSA306に手が届きそうな値段)</li>
<li>スペアナというよりSDR. これかうならHackRF買った方がよさそうな気はする.</li>
</ul>
</li>
</ul>


<h2>Tektronix RSA306</h2>

<ul>
<li><a href="http://jp.tek.com/spectrum-analyzer/rsa306-0">RSA306型USBスペクトラム・アナライザ</a></li>
</ul>


<p>Tektronixが出した「USBリアルタイムスペクトラムアナライザ」</p>

<ul>
<li>Pros

<ul>
<li>反応めっちゃはやい

<ul>
<li>40MHz幅内ならRBW 120KHzぐらいまでならだいぶぬるぬる表示する</li>
</ul>
</li>
<li>ソフトはタダ (基本部分は, という条件付きだが)</li>
<li>USB3.0ポート一つで制御・電源供給</li>
</ul>
</li>
<li>Cons

<ul>
<li>お値段

<ul>
<li>とはいえこの性能比で考えれば破格. 単純に予算の問題</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chokaigi 2015 Wi-Fiみてきた]]></title>
    <link href="http://enukane.github.io/blog/2015/04/28/chokaigi2015-wifi/"/>
    <updated>2015-04-28T17:31:09+09:00</updated>
    <id>http://enukane.github.io/blog/2015/04/28/chokaigi2015-wifi</id>
    <content type="html"><![CDATA[<p>ニコニコ超会議2015で Free Wi-Fi が提供されている、とのことだったので
どんな感じなのか偵察に行くついでにいつもの如くパケットあつめて
データをまとめてみた.</p>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/47427093 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015-02-23 Released Embulk-input-pcapng-files 0.1.0]]></title>
    <link href="http://enukane.github.io/blog/2015/02/24/2015-02-23-embulk-input-pcapng-files/"/>
    <updated>2015-02-24T09:07:52+09:00</updated>
    <id>http://enukane.github.io/blog/2015/02/24/2015-02-23-embulk-input-pcapng-files</id>
    <content type="html"><![CDATA[<p>pcapngファイルを読み込むembulk inputプラグインの新しいのをリリースしました.</p>

<ul>
<li><a href="https://rubygems.org/gems/embulk-input-pcapng-files">embulk-input-pcapng-files</a></li>
<li><a href="https://github.com/enukane/embulk-input-pcapng-files">enukane/embulk-input-pcapng-files</a></li>
</ul>


<p>embulk 0.4.X系ではプラグイン体系が0.3.X系のそれとは異なっているため,
これまで晒していた<a href="https://rubygems.org/gems/embulk-plugin-input-pcapng-files">embulk-plugin-input-pcapng-files</a>
が動作しません. これを修正したものが上記になります.</p>

<p>使い方自体は変わらず, 以下の様なconfig.ymlを書いて実行すると&hellip;</p>

<pre><code>exec: {}
in:
  type: pcapng_files
  paths: [ /Users/enukane/Desktop/emtestpcap/ ]
  threads: 2
  schema:
    - { name: frame.number,                 type: long }
    - { name: frame.time_epoch,             type: long }
    - { name: frame.len,                    type: long }
    - { name: radiotap.length,              type: long }
    - { name: radiotap.mactime,             type: long }
    - { name: radiotap.flags.preamble,      type: long }
    - { name: radiotap.flags.wep,           type: long }
    - { name: radiotap.flags.fcs,           type: long }
    - { name: radiotap.flags.shortgi,       type: long }
    - { name: radiotap.datarate,            type: long }
    - { name: radiotap.channel.freq,        type: long }
    - { name: radiotap.channel.type.ofdm,   type: long }
    - { name: radiotap.dbm_antsignal,       type: long }
    - { name: radiotap.dbm_antnoise,        type: long }
    - { name: radiotap.xchannel,            type: long }
    - { name: radiotap.xchannel.freq,       type: long }
    - { name: radiotap.xchannel.type.ofdm,  type: long }
    - { name: radiotap.mcs.gi,              type: long }
    - { name: radiotap.mcs.bw,              type: long }
    - { name: radiotap.mcs.index,           type: long }
    - { name: wlan.fc.type_subtype,         type: long }
    - { name: wlan.ta,                      type: string }
    - { name: wlan.ra,                      type: string }
    - { name: wlan.sa,                      type: string }
    - { name: wlan.da,                      type: string }
out:
  type: mysql
  host: localhost
  user: testuser
  password: testpassword
  database: testdb
  table: testtb
  mode: insert
</code></pre>

<p>こんな感じにoutput先 (今回の場合はMySQL) にデータをはき出してくれます.</p>

<p><img src="/images/2015-02-23-pcapngmysql.png" alt="pcapng-mysql" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015-02-12 DS-Liteいれてみた]]></title>
    <link href="http://enukane.github.io/blog/2015/02/12/2015-02-12-dslite/"/>
    <updated>2015-02-12T23:50:42+09:00</updated>
    <id>http://enukane.github.io/blog/2015/02/12/2015-02-12-dslite</id>
    <content type="html"><![CDATA[<h2>追記</h2>

<ul>
<li>2015/02/13 「速度計測その2」を追加</li>
<li>2015/02/16 「速度計測その3」を追加</li>
</ul>


<h2>はじめに</h2>

<p>新居でのフレッツv6オプションおよび IIJmio FiberAccess/NF の準備ができたので
<a href="https://www.iijmio.jp/guide/outline/ipv6/ipv6_access/dslite/">DS-Lite</a>で
IPv4での疎通性を確保してみた.
が, ちょいと速度面で問題?があったのでメモ.</p>

<h2>設定</h2>

<p>設定は以下を参照. フィルタ周りの設定やIPv4 PPPoe周りを継ぎ足してほぼそのままで導入.</p>

<ul>
<li><a href="http://www.seil.jp/blog/ds-lite">SEIL/x86でDS-Lite</a></li>
</ul>


<h2>動作確認</h2>

<p>tracerouteを取ってみるとこんな感じに transix.jp を通って
IPv4インターネットに出て行けてることが確認できたら完了.
<img src="/images/traceroute-dslite.png" alt="traceroute-dslite" /></p>

<p>なお普通にIPv4 PPPoE経由でいくとこんな感じになる.
<img src="/images/traceroute-iijmio.png" alt="traceroute-iijmio" /></p>

<h2>速度計測</h2>

<p>問題は速度で, 以下の様な三者間で速度を測ってみるとどうにも DS-Lite 経由の iperf の結果が芳しくない.</p>

<p><img src="/images/dslitevspppoe.png" alt="dslitevspppoe" /></p>

<table>
<thead>
<tr>
<th style="text-align:left;">経由       </th>
<th style="text-align:left;">ISPまたは事業者    </th>
<th style="text-align:center;">対戦表</th>
<th style="text-align:right;">速度(Mbps)</th>
<th style="text-align:left;">備考             </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">???        </td>
<td style="text-align:left;"> sakura internet?  </td>
<td style="text-align:center;">1     </td>
<td style="text-align:right;">87.2      </td>
<td style="text-align:left;">VPS側の速度計測用</td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">2     </td>
<td style="text-align:right;">46.5      </td>
<td style="text-align:left;">                 </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">3     </td>
<td style="text-align:right;">43.5      </td>
<td style="text-align:left;">                 </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">2     </td>
<td style="text-align:right;">87.9      </td>
<td style="text-align:left;">                 </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">3     </td>
<td style="text-align:right;">73.7      </td>
<td style="text-align:left;">                 </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> Interlink         </td>
<td style="text-align:center;">2     </td>
<td style="text-align:right;">88.6      </td>
<td style="text-align:left;">                 </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> Interlink         </td>
<td style="text-align:center;">3     </td>
<td style="text-align:right;">69.4      </td>
<td style="text-align:left;">                 </td>
</tr>
</tbody>
</table>


<ul>
<li>なお上流はフレッツ光マンションタイプ・ミニ(VDSL方式)なので,最大100Mbps</li>
<li>ルータにはSEIL/X1を利用</li>
<li>常にsakura VPS側がiperf server

<ul>
<li>1の場合は, 東京第二側をserverに</li>
</ul>
</li>
<li>めんどうなので一発勝負. 5回平均や最大値採取はせず</li>
</ul>


<p>おおよそIIJmio側もInterlink側も70〜80Mbps程度は出ているように見受けられる.
一方, DS-Liteを通すとなぜか40〜50Mbpsに下がる模様.</p>

<p>さて, なんででしょう.</p>

<h2>速度計測その2</h2>

<p>上記速度計測では, LAN内からはiperf clientとしてしか通信していなかったので,
ここではiperf3 (ver 3.0.11)のReverseモードを使って, 上り下り両方を測ってみる.
なお, 上記速度計測とは以下の違いがある.</p>

<ul>
<li>今度は MacBookAir + Thunderbolt Ethernet Adapterをiperf clientとして利用

<ul>
<li>若干速くなってる</li>
</ul>
</li>
<li>IIJmioとinterlinkには速度差はあまりないのでinterlink側経由の速度は省略</li>
</ul>


<table>
<thead>
<tr>
<th style="text-align:left;">経由       </th>
<th style="text-align:left;">ISPまたは事業者    </th>
<th style="text-align:center;">対戦表</th>
<th style="text-align:center;">向き      </th>
<th style="text-align:right;">速度(Mbps): sender</th>
<th style="text-align:right;">速度(Mbps): receiver</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">2     </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;"><strong>51.5</strong>          </td>
<td style="text-align:right;"><strong>51.2</strong>            </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">2     </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">90.4              </td>
<td style="text-align:right;">89.9                </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">3     </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;"><strong>53.5</strong>          </td>
<td style="text-align:right;"><strong>53.1</strong>            </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">3     </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">90.9              </td>
<td style="text-align:right;">90.4                </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">2     </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;">93.8              </td>
<td style="text-align:right;">93.8                </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">2     </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">94.1              </td>
<td style="text-align:right;">93.4                </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">3     </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;">87.3              </td>
<td style="text-align:right;">86.3                </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">3     </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">88.6              </td>
<td style="text-align:right;">87.5                </td>
</tr>
</tbody>
</table>


<ul>
<li>iperf3はクライアント側からサーバ側に向けてトラフィックを出す</li>
<li>&ldquo;-R&#8221;オプションで逆方向になる</li>
<li>このため, &ldquo;-R&#8221;なしがUP, &rdquo;-R&#8221;ありがDOWN</li>
</ul>


<p>DS-LiteのUP方向が妙に抑えられているようだ. DOWN方向は普通に速度が出ている.</p>

<h2>速度計測その3</h2>

<p>&ldquo;option ipv6 avoid-path-mtu-discovery on|off&#8221;を切り替えてみる.
対戦表は2のみ.</p>

<table>
<thead>
<tr>
<th style="text-align:left;">経由       </th>
<th style="text-align:left;">ISPまたは事業者    </th>
<th style="text-align:center;">avoid-path-mtu-discovery</th>
<th style="text-align:center;">向き      </th>
<th style="text-align:right;">速度(Mbps): sender</th>
<th style="text-align:right;">速度(Mbps): receiver</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">default                 </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;"><strong>50.4</strong>          </td>
<td style="text-align:right;"><strong>50.2</strong>            </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">default                 </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">90.2              </td>
<td style="text-align:right;">89.8                </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">off                     </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;"><strong>75.0</strong>          </td>
<td style="text-align:right;"><strong>74.9</strong>            </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">off                     </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">90.5              </td>
<td style="text-align:right;">90.0                </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">on                      </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;"><strong>52.0</strong>          </td>
<td style="text-align:right;"><strong>51.7</strong>            </td>
</tr>
<tr>
<td style="text-align:left;">DS-Lite    </td>
<td style="text-align:left;"> Multifeed(transix)</td>
<td style="text-align:center;">on                      </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">90.7              </td>
<td style="text-align:right;">90.4                </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">X                       </td>
<td style="text-align:center;"> UP       </td>
<td style="text-align:right;">93.7              </td>
<td style="text-align:right;">93.7                </td>
</tr>
<tr>
<td style="text-align:left;">IPv4 PPPoE </td>
<td style="text-align:left;"> IIJmio            </td>
<td style="text-align:center;">X                       </td>
<td style="text-align:center;"> DOWN     </td>
<td style="text-align:right;">93.4              </td>
<td style="text-align:right;">92.5                </td>
</tr>
</tbody>
</table>


<p>offにすると少し良くなるようだ.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015-01-28 Embulk-plugin-input-pcapng-files書いた]]></title>
    <link href="http://enukane.github.io/blog/2015/01/29/2015-01-28-embulk-playground/"/>
    <updated>2015-01-29T00:03:51+09:00</updated>
    <id>http://enukane.github.io/blog/2015/01/29/2015-01-28-embulk-playground</id>
    <content type="html"><![CDATA[<h3>追記 (2015/01/29 20:03)</h3>

<p>ver 0.0.2切った. ファイルのソート周りはまだ直してない.</p>

<p><a href="https://rubygems.org/gems/embulk-plugin-input-pcapng-files">https://rubygems.org/gems/embulk-plugin-input-pcapng-files</a></p>

<h3>追記 (2015/01/29 19:49)</h3>

<p>手元で動作確認してたらいつの間にか次のバージョンのembulkがリリースされてた.
おかしいぞ&hellip;さっきのpullreqで入れてもらったワークアラウンド試し始めたばっかりなのに&hellip;(もう不要になった)</p>

<p><a href="https://twitter.com/frsyuki/status/560750747608817665">https://twitter.com/frsyuki/status/560750747608817665</a></p>

<h3>追記 (2015/01/29 19:38)</h3>

<p>frsyuki先生から後ろ方のてきとーなメモに対する, 大変丁寧なコメントを頂けた. なるほどなるほど.</p>

<p><a href="https://gist.github.com/frsyuki/dcfb30690fd453542f45">https://gist.github.com/frsyuki/dcfb30690fd453542f45</a></p>

<p>ついでにいろいろと手直しして頂いて感謝感謝</p>

<ul>
<li><a href="https://github.com/enukane/embulk-plugin-input-pcapng-files/pull/1">https://github.com/enukane/embulk-plugin-input-pcapng-files/pull/1</a></li>
<li><a href="https://github.com/enukane/embulk-plugin-input-pcapng-files/pull/2">https://github.com/enukane/embulk-plugin-input-pcapng-files/pull/2</a></li>
</ul>


<h2>はじめに</h2>

<p>前々からやっているコミケその他イベントでの無線LAN解析(※)に良い感じに使えそうなので
pcapngファイルからの入力を取れる &ldquo;embulk-plugin-input-pcapng-files&rdquo; なるプラグインを書いてみました.</p>

<ul>
<li><a href="https://github.com/enukane/embulk-plugin-input-pcapng-files">enukane/embulk-plugin-input-pcapng-files</a></li>
<li><p><a href="https://rubygems.org/gems/embulk-plugin-input-pcapng-files">rubygems - embulk-plugin-input-pcapng-files</a></p></li>
<li><p>※</p>

<ul>
<li><a href="http://www.slideshare.net/enukane/comiket-space-29723016">http://www.slideshare.net/enukane/comiket-space-29723016</a></li>
<li><a href="http://www.slideshare.net/enukane/comiket-space-c86">http://www.slideshare.net/enukane/comiket-space-c86</a></li>
<li><a href="http://www.slideshare.net/enukane/c87-wifi-comiket-space">http://www.slideshare.net/enukane/c87-wifi-comiket-space</a></li>
</ul>
</li>
</ul>


<p>中身はまんまtshark呼んでるだけですが, 抽出条件をコンフィグに書けたり出力先を柔軟に変更可能だったりと
embulkのよさげなところを活かせそうなのが良い感じです.</p>

<p>今までは集めた多量のpcapngファイルを, ひとつひとつ真心()込めてスクリプトに食わせてたので
これを期に自動化の流れが造れるとベター.
またそこまで行かなくともこれまでに溜め込んだpcapngファイルの再掘り起こしが容易になるので
それだけでも良い感じです.</p>

<p>正直pcapngをこんな感じに触りたい人いない気がするので, 誰にも使ってもらえない感&hellip;</p>

<h3>使い方</h3>

<p>コンフィグファイルはこんな感じになります.
いわゆるguessはできないので手打ちで全部書く必要があります.</p>

<pre><code>exec: {}
in:
  type: pcapng_files
  paths: [/Users/enukane/Desktop/emtestpcap/, /tmp]
  threads: 3
  schema:
    - { name: frame.time_epoch, type: long }
    - { name: frame.len, type: long }
    - { name: wlan.ta, type: string }
    - { name: wlan.ra, type: string }
out: {type: stdout}
</code></pre>

<ul>
<li>typeにはpcapng_filesを指定します</li>
<li>pathsには, 処理したいpcapngファイルが入ったディレクトリを配列で指定します</li>
<li>threadsは, 並列度を指定します

<ul>
<li>上記paths内で見つかったpcapngファイルたちをこのthreadsの数に分配して並行に処理がなされる, はず</li>
<li>ちゃんと動いてるかは未確認&hellip;</li>
</ul>
</li>
<li>schemaにはpcapng中の抽出したいフィールド名(name)と変換先の型(type)を指定します

<ul>
<li>フィールド名は, wireshark/tsharkで -e オプションのfilterとして使っている名前が指定できます</li>
<li>型は今のところstringかlongのみ</li>
</ul>
</li>
</ul>


<p>これをpreviewコマンドで指定してみるとこんな感じ</p>

<pre><code>enukane@glenda-lairなう（´・ω・｀）つ ~/Sources/embulk-test % java -jar embulk.jar preview config.yml
+-------------------------------------------------+-----------------------+----------------+-------------------+-------------------+
|                                     path:string | frame.time_epoch:long | frame.len:long |    wlan.ta:string |    wlan.ra:string |
+-------------------------------------------------+-----------------------+----------------+-------------------+-------------------+
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             45 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             39 |                   | c4:7d:4f:56:e5:19 |
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             57 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             45 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             39 |                   | 20:c9:d0:d8:37:31 |
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |            146 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             57 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |            151 | c4:7d:4f:56:e5:1c | 33:33:00:01:00:03 |
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |            131 | c4:7d:4f:56:e5:1c | 01:00:5e:00:00:fc |
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |            283 | c4:7d:4f:56:e5:18 | ff:ff:ff:ff:ff:ff |
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             45 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             39 |                   | c4:7d:4f:56:e5:19 |
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |            146 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
| /Users/enukane/Desktop/emtestpcap//test1.pcapng |         1,413,615,217 |             57 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             45 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             39 |                   | c4:7d:4f:56:e5:19 |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             57 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             45 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             39 |                   | 20:c9:d0:d8:37:31 |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |            146 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             57 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |            151 | c4:7d:4f:56:e5:1c | 33:33:00:01:00:03 |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |            131 | c4:7d:4f:56:e5:1c | 01:00:5e:00:00:fc |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |            283 | c4:7d:4f:56:e5:18 | ff:ff:ff:ff:ff:ff |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             45 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             39 |                   | c4:7d:4f:56:e5:19 |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |            146 | c4:7d:4f:56:e5:19 | 20:c9:d0:d8:37:31 |
| /Users/enukane/Desktop/emtestpcap//test2.pcapng |         1,413,615,217 |             57 | 20:c9:d0:d8:37:31 | c4:7d:4f:56:e5:19 |
+-------------------------------------------------+-----------------------+----------------+-------------------+-------------------+
</code></pre>

<ul>
<li>previewでは部分的なタスクしか実行されません (ここではtask5.pcapngがぬけている)

<ul>
<li>runコマンドで出力される, &ldquo;次の状態のコンフィグ&#8221;も出力されません</li>
</ul>
</li>
<li>ただし上記のように良い感じに表っぽい出力がなされます</li>
</ul>


<p>実際にrunコマンドで走らせると以下の様になります</p>

<pre><code>enukane@glenda-lairなう（´・ω・｀）つ ~/Sources/embulk-test % java -jar embulk.jar run config.yml -o config.yml
2015-01-29 11:29:44,264 [INFO]: main:org.embulk.exec.LocalExecutor: Running 3 tasks using 8 local threads
2015-01-29 11:29:44,265 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  0 / 3, running: 0}
/Users/enukane/Desktop/emtestpcap//test5.pcapng,1413615217,45,28:cf:e9:4d:bb:91,c4:7d:4f:56:e5:1d
/Users/enukane/Desktop/emtestpcap//test5.pcapng,1413615217,39,,28:cf:e9:4d:bb:91
/Users/enukane/Desktop/emtestpcap//test5.pcapng,1413615217,155,28:cf:e9:4d:bb:91,c4:7d:4f:56:e5:1d
(中略)
/Users/enukane/Desktop/emtestpcap//test1.pcapng,1413615217,283,c4:7d:4f:56:e5:18,ff:ff:ff:ff:ff:ff
/Users/enukane/Desktop/emtestpcap//test1.pcapng,1413615217,146,c4:7d:4f:56:e5:19,20:c9:d0:d8:37:31
/Users/enukane/Desktop/emtestpcap//test1.pcapng,1413615217,57,20:c9:d0:d8:37:31,c4:7d:4f:56:e5:19
/Users/enukane/Desktop/emtestpcap//test2.pcapng,1413615217,45,c4:7d:4f:56:e5:19,20:c9:d0:d8:37:31
/Users/enukane/Desktop/emtestpcap//test2.pcapng,1413615217,39,,c4:7d:4f:56:e5:19
(中略)
2015-01-29 11:29:47,517 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  3 / 3, running: 0}
2015-01-29 11:29:47,517 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  3 / 3, running: 0}
2015-01-29 11:29:47,517 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  3 / 3, running: 0}
2015-01-29 11:29:47,535 [INFO]: main:org.embulk.command.Runner: next config: {"type":"pcapng_files","paths":["/Users/enukane/Desktop/emtestpcap/","/tmp"],"threads":3,"schema":[{"name":"frame.time_epoch","type":"long"},{"name":"frame.len","type":"long"},{"name":"wlan.ta","
type":"string"},{"name":"wlan.ra","type":"string"}],"done":["/Users/enukane/Desktop/emtestpcap//test1.pcapng","/Users/enukane/Desktop/emtestpcap//test2.pcapng","/Users/enukane/Desktop/emtestpcap//test5.pcapng"]}
</code></pre>

<ul>
<li>-oオプションで実行中のコンフィグと同じパスを指定してやると, 元のコンフィグに「今処理したファイルリスト」を付け加えます

<ul>
<li>既にdoneが合った場合とか考慮してない等々で今はきちんと動いてない模様&hellip; (to be fixed)</li>
<li>いわゆるcommit reportとして, 次回に重複処理しないように考慮 (したかった)</li>
</ul>
</li>
<li>outがstdoutになっているので, previewの様な表ではなくcsv形式で出力.</li>
</ul>


<h3>embulk弄ってたときのメモ</h3>

<ul>
<li>embulkの<a href="https://github.com/embulk/embulk">README</a>をよめばだいたいどうにかなる。</li>
<li>bundleコマンドで作成したディレクトリ以下でプラグインの新規追加・名前変更等したときは, 再度bundleコマンド発行すること</li>
<li>本来的にはinputプラグインではなくFile input内のparser/decoderプラグインとして造るべきでは？

<ul>
<li>処理対象のファイル一覧→スレッドへの分配あたりを再開発してる感</li>
<li>input/output以外のプラグインがどの程度rubyで差し込みできるのかよく見えない. 要調査.

<ul>
<li>file inputのメインのロジックはJava側で書かれてるようなのでbundle側からのインタラクション次第か?</li>
</ul>
</li>
</ul>
</li>
<li>task to threadsのベストプラクティスが欲しい&hellip;</li>
<li>transactionとrunの間のデータ受け渡し, これでいいのかな感

<ul>
<li>引数でスレッドローカルなオブジェクト渡すものだと思ってたけど&hellip;</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
